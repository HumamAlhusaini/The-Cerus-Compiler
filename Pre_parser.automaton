State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On POUND shift to state 1
-- On program shift to state 834
-- On outer_attr shift to state 42
-- On list(outer_attr) shift to state 776
-- On items shift to state 835
-- On item shift to state 784
## Reductions:
-- On EOF
--   reduce production items ->
-- On USE UNSAFE MOD EXTERN
--   reduce production list(outer_attr) ->

State 1:
## Known stack suffix:
## POUND
## LR(1) items:
outer_attr -> POUND . LBRACK attr RBRACK [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STATIC_LIFETIME STAR SELFVALUE SELFTYPE SAFE RETURN REF RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PATHSEP OR NOT MUT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IMPL IF IDENT FOR FN FLOAT_LIT FALSE EXTERN ELIDED_LIFETIME DYN DOTDOTEQ DOTDOTDOT DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC ANDAND AND AMPMUT ]
## Transitions:
-- On LBRACK shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## POUND LBRACK
## LR(1) items:
outer_attr -> POUND LBRACK . attr RBRACK [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STATIC_LIFETIME STAR SELFVALUE SELFTYPE SAFE RETURN REF RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PATHSEP OR NOT MUT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IMPL IF IDENT FOR FN FLOAT_LIT FALSE EXTERN ELIDED_LIFETIME DYN DOTDOTEQ DOTDOTDOT DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC ANDAND AND AMPMUT ]
## Transitions:
-- On UNSAFE shift to state 3
-- On PATHSEP shift to state 4
-- On simple_path shift to state 12
-- On option(PATHSEP) shift to state 15
-- On attr shift to state 832
## Reductions:
-- On SUPER SELFVALUE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->

State 3:
## Known stack suffix:
## UNSAFE
## LR(1) items:
attr -> UNSAFE . simple_path maybe_attr_input [ RBRACK ]
## Transitions:
-- On PATHSEP shift to state 4
-- On simple_path shift to state 5
-- On option(PATHSEP) shift to state 15
## Reductions:
-- On SUPER SELFVALUE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->

State 4:
## Known stack suffix:
## PATHSEP
## LR(1) items:
option(PATHSEP) -> PATHSEP . [ SUPER SELFVALUE SELFTYPE RAW_IDENT LT LPAREN IDENT DOLLAR_CRATE CRATE ]
## Transitions:
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT LT LPAREN IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) -> PATHSEP

State 5:
## Known stack suffix:
## UNSAFE simple_path
## LR(1) items:
attr -> UNSAFE simple_path . maybe_attr_input [ RBRACK ]
## Transitions:
-- On EQ shift to state 6
-- On maybe_attr_input shift to state 831
-- On attr_input shift to state 14
## Reductions:
-- On RBRACK
--   reduce production maybe_attr_input ->

State 6:
## Known stack suffix:
## EQ
## LR(1) items:
attr_input -> EQ . expression [ RBRACK ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 830
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 7:
## Known stack suffix:
## UNSAFE
## LR(1) items:
unsafe_block_expression -> UNSAFE . block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On LBRACE shift to state 8
-- On block_expression shift to state 829
## Reductions:

State 8:
## Known stack suffix:
## LBRACE
## LR(1) items:
block_expression -> LBRACE . list(inner_attr) option(statements) RBRACE [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On POUND shift to state 9
-- On list(inner_attr) shift to state 29
-- On inner_attr shift to state 703
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production list(inner_attr) ->
** Conflict on POUND

State 9:
## Known stack suffix:
## POUND
## LR(1) items:
inner_attr -> POUND . NOT LBRACK attr RBRACK [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On NOT shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## POUND NOT
## LR(1) items:
inner_attr -> POUND NOT . LBRACK attr RBRACK [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On LBRACK shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## POUND NOT LBRACK
## LR(1) items:
inner_attr -> POUND NOT LBRACK . attr RBRACK [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On UNSAFE shift to state 3
-- On PATHSEP shift to state 4
-- On simple_path shift to state 12
-- On option(PATHSEP) shift to state 15
-- On attr shift to state 27
## Reductions:
-- On SUPER SELFVALUE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->

State 12:
## Known stack suffix:
## simple_path
## LR(1) items:
attr -> simple_path . maybe_attr_input [ RBRACK ]
## Transitions:
-- On EQ shift to state 6
-- On maybe_attr_input shift to state 13
-- On attr_input shift to state 14
## Reductions:
-- On RBRACK
--   reduce production maybe_attr_input ->

State 13:
## Known stack suffix:
## simple_path maybe_attr_input
## LR(1) items:
attr -> simple_path maybe_attr_input . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production attr -> simple_path maybe_attr_input

State 14:
## Known stack suffix:
## attr_input
## LR(1) items:
maybe_attr_input -> attr_input . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production maybe_attr_input -> attr_input

State 15:
## Known stack suffix:
## option(PATHSEP)
## LR(1) items:
simple_path -> option(PATHSEP) . separated_nonempty_list(PATHSEP,simple_path_segment) [ SEMI RBRACK RBRACE EQ COMMA AS ]
## Transitions:
-- On SUPER shift to state 16
-- On SELFVALUE shift to state 17
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On DOLLAR_CRATE shift to state 20
-- On CRATE shift to state 21
-- On simple_path_segment shift to state 22
-- On separated_nonempty_list(PATHSEP,simple_path_segment) shift to state 26
-- On ident shift to state 25
## Reductions:

State 16:
## Known stack suffix:
## SUPER
## LR(1) items:
simple_path_segment -> SUPER . [ SEMI RBRACK RBRACE PATHSEP GT EQ COMMA AS ]
## Transitions:
## Reductions:
-- On SEMI RBRACK RBRACE PATHSEP GT EQ COMMA AS
--   reduce production simple_path_segment -> SUPER

State 17:
## Known stack suffix:
## SELFVALUE
## LR(1) items:
simple_path_segment -> SELFVALUE . [ SEMI RBRACK RBRACE PATHSEP GT EQ COMMA AS ]
## Transitions:
## Reductions:
-- On SEMI RBRACK RBRACE PATHSEP GT EQ COMMA AS
--   reduce production simple_path_segment -> SELFVALUE

State 18:
## Known stack suffix:
## RAW_IDENT
## LR(1) items:
ident -> RAW_IDENT . [ XOREQ XOR USE TRUE SUPER STRING_LIT STATIC_LIFETIME STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LIFETIME_OR_LABEL LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE ELIDED_LIFETIME DOTDOTEQ DOTDOTDOT DOTDOT DOT DOLLAR_CRATE C_STRING CRATE COMMA COLON CHAR_LIT BYTE_STRING BYTE AT AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR USE TRUE SUPER STRING_LIT STATIC_LIFETIME STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LIFETIME_OR_LABEL LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE ELIDED_LIFETIME DOTDOTEQ DOTDOTDOT DOTDOT DOT DOLLAR_CRATE C_STRING CRATE COMMA COLON CHAR_LIT BYTE_STRING BYTE AT AS ANDEQ ANDAND AND
--   reduce production ident -> RAW_IDENT

State 19:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ XOREQ XOR USE TRUE SUPER STRING_LIT STATIC_LIFETIME STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LIFETIME_OR_LABEL LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE ELIDED_LIFETIME DOTDOTEQ DOTDOTDOT DOTDOT DOT DOLLAR_CRATE C_STRING CRATE COMMA COLON CHAR_LIT BYTE_STRING BYTE AT AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR USE TRUE SUPER STRING_LIT STATIC_LIFETIME STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LIFETIME_OR_LABEL LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE ELIDED_LIFETIME DOTDOTEQ DOTDOTDOT DOTDOT DOT DOLLAR_CRATE C_STRING CRATE COMMA COLON CHAR_LIT BYTE_STRING BYTE AT AS ANDEQ ANDAND AND
--   reduce production ident -> IDENT

State 20:
## Known stack suffix:
## DOLLAR_CRATE
## LR(1) items:
simple_path_segment -> DOLLAR_CRATE . [ SEMI RBRACK RBRACE PATHSEP GT EQ COMMA AS ]
## Transitions:
## Reductions:
-- On SEMI RBRACK RBRACE PATHSEP GT EQ COMMA AS
--   reduce production simple_path_segment -> DOLLAR_CRATE

State 21:
## Known stack suffix:
## CRATE
## LR(1) items:
simple_path_segment -> CRATE . [ SEMI RBRACK RBRACE PATHSEP GT EQ COMMA AS ]
## Transitions:
## Reductions:
-- On SEMI RBRACK RBRACE PATHSEP GT EQ COMMA AS
--   reduce production simple_path_segment -> CRATE

State 22:
## Known stack suffix:
## simple_path_segment
## LR(1) items:
separated_nonempty_list(PATHSEP,simple_path_segment) -> simple_path_segment . [ SEMI RBRACK RBRACE EQ COMMA AS ]
separated_nonempty_list(PATHSEP,simple_path_segment) -> simple_path_segment . PATHSEP separated_nonempty_list(PATHSEP,simple_path_segment) [ SEMI RBRACK RBRACE EQ COMMA AS ]
## Transitions:
-- On PATHSEP shift to state 23
## Reductions:
-- On SEMI RBRACK RBRACE EQ COMMA AS
--   reduce production separated_nonempty_list(PATHSEP,simple_path_segment) -> simple_path_segment

State 23:
## Known stack suffix:
## simple_path_segment PATHSEP
## LR(1) items:
separated_nonempty_list(PATHSEP,simple_path_segment) -> simple_path_segment PATHSEP . separated_nonempty_list(PATHSEP,simple_path_segment) [ SEMI RBRACK RBRACE EQ COMMA AS ]
## Transitions:
-- On SUPER shift to state 16
-- On SELFVALUE shift to state 17
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On DOLLAR_CRATE shift to state 20
-- On CRATE shift to state 21
-- On simple_path_segment shift to state 22
-- On separated_nonempty_list(PATHSEP,simple_path_segment) shift to state 24
-- On ident shift to state 25
## Reductions:

State 24:
## Known stack suffix:
## simple_path_segment PATHSEP separated_nonempty_list(PATHSEP,simple_path_segment)
## LR(1) items:
separated_nonempty_list(PATHSEP,simple_path_segment) -> simple_path_segment PATHSEP separated_nonempty_list(PATHSEP,simple_path_segment) . [ SEMI RBRACK RBRACE EQ COMMA AS ]
## Transitions:
## Reductions:
-- On SEMI RBRACK RBRACE EQ COMMA AS
--   reduce production separated_nonempty_list(PATHSEP,simple_path_segment) -> simple_path_segment PATHSEP separated_nonempty_list(PATHSEP,simple_path_segment)

State 25:
## Known stack suffix:
## ident
## LR(1) items:
simple_path_segment -> ident . [ SEMI RBRACK RBRACE PATHSEP EQ COMMA AS ]
## Transitions:
## Reductions:
-- On SEMI RBRACK RBRACE PATHSEP EQ COMMA AS
--   reduce production simple_path_segment -> ident

State 26:
## Known stack suffix:
## option(PATHSEP) separated_nonempty_list(PATHSEP,simple_path_segment)
## LR(1) items:
simple_path -> option(PATHSEP) separated_nonempty_list(PATHSEP,simple_path_segment) . [ SEMI RBRACK RBRACE EQ COMMA AS ]
## Transitions:
## Reductions:
-- On SEMI RBRACK RBRACE EQ COMMA AS
--   reduce production simple_path -> option(PATHSEP) separated_nonempty_list(PATHSEP,simple_path_segment)

State 27:
## Known stack suffix:
## POUND NOT LBRACK attr
## LR(1) items:
inner_attr -> POUND NOT LBRACK attr . RBRACK [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On RBRACK shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## POUND NOT LBRACK attr RBRACK
## LR(1) items:
inner_attr -> POUND NOT LBRACK attr RBRACK . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production inner_attr -> POUND NOT LBRACK attr RBRACK

State 29:
## Known stack suffix:
## LBRACE list(inner_attr)
## LR(1) items:
block_expression -> LBRACE list(inner_attr) . option(statements) RBRACE [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On statements shift to state 739
-- On statement shift to state 740
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 741
-- On option(statements) shift to state 824
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On list(statement) shift to state 826
-- On list(outer_attr) shift to state 743
-- On let_statement shift to state 816
-- On item shift to state 817
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 828
-- On exprs_with_block shift to state 820
-- On expression_statement shift to state 823
-- On expression shift to state 485
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On USE UNSAFE MOD LET EXTERN
--   reduce production list(outer_attr) ->
-- On WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production list(statement) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
-- On RBRACE
--   reduce production option(statements) ->
** Conflict on WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT

State 30:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
exprs_without_block -> UNDERSCORE . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> UNDERSCORE

State 31:
## Known stack suffix:
## TRUE
## LR(1) items:
literal_expression -> TRUE . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production literal_expression -> TRUE

State 32:
## Known stack suffix:
## STRING_LIT
## LR(1) items:
literal_expression -> STRING_LIT . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production literal_expression -> STRING_LIT

State 33:
## Known stack suffix:
## STAR
## LR(1) items:
operator_expression -> STAR . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 738
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 34:
## Known stack suffix:
## RETURN
## LR(1) items:
return_expression -> RETURN . option(expression) [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(expression) shift to state 737
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 646
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production option(expression) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on STAR OR MINUS LT LPAREN LBRACK LBRACE DOTDOTEQ DOTDOT AND

State 35:
## Known stack suffix:
## RAW_STRING_LIT
## LR(1) items:
literal_expression -> RAW_STRING_LIT . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production literal_expression -> RAW_STRING_LIT

State 36:
## Known stack suffix:
## RAW_MUT
## LR(1) items:
operator_expression -> RAW_MUT . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 736
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 37:
## Known stack suffix:
## RAW_C_STRING
## LR(1) items:
literal_expression -> RAW_C_STRING . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production literal_expression -> RAW_C_STRING

State 38:
## Known stack suffix:
## RAW_CONST
## LR(1) items:
operator_expression -> RAW_CONST . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 735
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 39:
## Known stack suffix:
## RAW_BYTE_STRING
## LR(1) items:
literal_expression -> RAW_BYTE_STRING . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production literal_expression -> RAW_BYTE_STRING

State 40:
## Known stack suffix:
## OR
## LR(1) items:
closure_expression -> OR . option(closure_params) OR expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On POUND shift to state 1
-- On separated_nonempty_list(COMMA,closure_param) shift to state 41
-- On outer_attr shift to state 42
-- On option(closure_params) shift to state 44
-- On nonempty_separated_or_terminated_list(COMMA,closure_param) shift to state 625
-- On nonempty_list(terminated(closure_param,COMMA)) shift to state 626
-- On list(outer_attr) shift to state 627
-- On closure_params shift to state 633
-- On closure_param shift to state 634
## Reductions:
-- On UNDERSCORE TRUE SUPER STRING_LIT SELFVALUE SELFTYPE REF RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PATHSEP MUT MINUS LT LPAREN LBRACK INT_LIT IDENT FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CHAR_LIT BYTE_STRING BYTE ANDAND AND
--   reduce production list(outer_attr) ->
-- On OR
--   reduce production option(closure_params) ->

State 41:
## Known stack suffix:
## separated_nonempty_list(COMMA,closure_param)
## LR(1) items:
nonempty_separated_or_terminated_list(COMMA,closure_param) -> separated_nonempty_list(COMMA,closure_param) . [ OR ]
## Transitions:
## Reductions:
-- On OR
--   reduce production nonempty_separated_or_terminated_list(COMMA,closure_param) -> separated_nonempty_list(COMMA,closure_param)

State 42:
## Known stack suffix:
## outer_attr
## LR(1) items:
list(outer_attr) -> outer_attr . list(outer_attr) [ USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STATIC_LIFETIME STAR SELFVALUE SELFTYPE SAFE REF RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PATHSEP OR NOT MUT MOD MINUS LT LPAREN LIFETIME_OR_LABEL LBRACK INT_LIT IMPL IDENT FOR FN FLOAT_LIT FALSE EXTERN ELIDED_LIFETIME DYN DOTDOTEQ DOTDOTDOT DOTDOT DOLLAR_CRATE C_STRING CRATE CONST CHAR_LIT BYTE_STRING BYTE ANDAND AND ]
## Transitions:
-- On POUND shift to state 1
-- On outer_attr shift to state 42
-- On list(outer_attr) shift to state 43
## Reductions:
-- On USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STATIC_LIFETIME STAR SELFVALUE SELFTYPE SAFE REF RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PATHSEP OR NOT MUT MOD MINUS LT LPAREN LIFETIME_OR_LABEL LBRACK INT_LIT IMPL IDENT FOR FN FLOAT_LIT FALSE EXTERN ELIDED_LIFETIME DYN DOTDOTEQ DOTDOTDOT DOTDOT DOLLAR_CRATE C_STRING CRATE CONST CHAR_LIT BYTE_STRING BYTE ANDAND AND
--   reduce production list(outer_attr) ->

State 43:
## Known stack suffix:
## outer_attr list(outer_attr)
## LR(1) items:
list(outer_attr) -> outer_attr list(outer_attr) . [ USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STATIC_LIFETIME STAR SELFVALUE SELFTYPE SAFE REF RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PATHSEP OR NOT MUT MOD MINUS LT LPAREN LIFETIME_OR_LABEL LET LBRACK INT_LIT IMPL IDENT FOR FN FLOAT_LIT FALSE EXTERN ELIDED_LIFETIME DYN DOTDOTEQ DOTDOTDOT DOTDOT DOLLAR_CRATE C_STRING CRATE CONST CHAR_LIT BYTE_STRING BYTE ANDAND AND ]
## Transitions:
## Reductions:
-- On USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STATIC_LIFETIME STAR SELFVALUE SELFTYPE SAFE REF RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PATHSEP OR NOT MUT MOD MINUS LT LPAREN LIFETIME_OR_LABEL LET LBRACK INT_LIT IMPL IDENT FOR FN FLOAT_LIT FALSE EXTERN ELIDED_LIFETIME DYN DOTDOTEQ DOTDOTDOT DOTDOT DOLLAR_CRATE C_STRING CRATE CONST CHAR_LIT BYTE_STRING BYTE ANDAND AND
--   reduce production list(outer_attr) -> outer_attr list(outer_attr)

State 44:
## Known stack suffix:
## OR option(closure_params)
## LR(1) items:
closure_expression -> OR option(closure_params) . OR expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On OR shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## OR option(closure_params) OR
## LR(1) items:
closure_expression -> OR option(closure_params) OR . expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On RARROW shift to state 46
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 623
-- On expr_or_typ_block shift to state 734
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 46:
## Known stack suffix:
## RARROW
## LR(1) items:
expr_or_typ_block -> RARROW . type_no_bounds block_expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNDERSCORE shift to state 47
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LBRACK shift to state 72
-- On IMPL shift to state 119
-- On FOR shift to state 75
-- On DYN shift to state 122
-- On AND shift to state 116
-- On type_path shift to state 124
-- On type_no_bounds shift to state 732
-- On tuple_type shift to state 126
-- On trait_bound shift to state 127
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On impl_trait_type_one_bound shift to state 155
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 47:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
type_no_bounds -> UNDERSCORE . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_no_bounds -> UNDERSCORE

State 48:
## Known stack suffix:
## STAR
## LR(1) items:
raw_pointer_type -> STAR . MUT type_no_bounds [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
raw_pointer_type -> STAR . CONST type_no_bounds [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On MUT shift to state 49
-- On CONST shift to state 730
## Reductions:

State 49:
## Known stack suffix:
## STAR MUT
## LR(1) items:
raw_pointer_type -> STAR MUT . type_no_bounds [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNDERSCORE shift to state 47
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LBRACK shift to state 72
-- On IMPL shift to state 119
-- On FOR shift to state 75
-- On DYN shift to state 122
-- On AND shift to state 116
-- On type_path shift to state 124
-- On type_no_bounds shift to state 729
-- On tuple_type shift to state 126
-- On trait_bound shift to state 127
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On impl_trait_type_one_bound shift to state 155
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 50:
## Known stack suffix:
## QUESTION
## LR(1) items:
option(question_or_for) -> QUESTION . [ SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE ]
## Transitions:
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) -> QUESTION

State 51:
## Known stack suffix:
## NOT
## LR(1) items:
type_no_bounds -> NOT . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_no_bounds -> NOT

State 52:
## Known stack suffix:
## LT
## LR(1) items:
qualified_path_type -> LT . typ option(as_typath) GT [ SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On IMPL shift to state 73
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 723
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On lifetime shift to state 179
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 53:
## Known stack suffix:
## USE
## LR(1) items:
use_bound -> USE . use_bound_generic_args [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
-- On LT shift to state 54
-- On use_bound_generic_args shift to state 70
## Reductions:

State 54:
## Known stack suffix:
## LT
## LR(1) items:
use_bound_generic_args -> LT . GT [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
use_bound_generic_args -> LT . nonempty_separated_or_terminated_list(COMMA,use_bound_generic_arg) GT [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
-- On STATIC_LIFETIME shift to state 55
-- On SELFTYPE shift to state 56
-- On RAW_IDENT shift to state 18
-- On LIFETIME_OR_LABEL shift to state 57
-- On IDENT shift to state 19
-- On GT shift to state 58
-- On ELIDED_LIFETIME shift to state 59
-- On use_bound_generic_arg shift to state 60
-- On separated_nonempty_list(COMMA,use_bound_generic_arg) shift to state 66
-- On nonempty_separated_or_terminated_list(COMMA,use_bound_generic_arg) shift to state 67
-- On nonempty_list(terminated(use_bound_generic_arg,COMMA)) shift to state 69
-- On lifetime shift to state 64
-- On ident shift to state 65
## Reductions:

State 55:
## Known stack suffix:
## STATIC_LIFETIME
## LR(1) items:
lifetime -> STATIC_LIFETIME . [ UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SEMI SELFVALUE SELFTYPE SAFE RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUS PATHSEP OR NOT MUT LT LPAREN LBRACK INT_LIT IMPL IDENT GT FOR FN FLOAT_LIT FALSE EXTERN EQ DYN DOLLAR_CRATE C_STRING CRATE COMMA COLON CHAR_LIT BYTE_STRING BYTE AS AND ]
## Transitions:
## Reductions:
-- On UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SEMI SELFVALUE SELFTYPE SAFE RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUS PATHSEP OR NOT MUT LT LPAREN LBRACK INT_LIT IMPL IDENT GT FOR FN FLOAT_LIT FALSE EXTERN EQ DYN DOLLAR_CRATE C_STRING CRATE COMMA COLON CHAR_LIT BYTE_STRING BYTE AS AND
--   reduce production lifetime -> STATIC_LIFETIME

State 56:
## Known stack suffix:
## SELFTYPE
## LR(1) items:
use_bound_generic_arg -> SELFTYPE . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production use_bound_generic_arg -> SELFTYPE

State 57:
## Known stack suffix:
## LIFETIME_OR_LABEL
## LR(1) items:
lifetime -> LIFETIME_OR_LABEL . [ UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SEMI SELFVALUE SELFTYPE SAFE RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUS PATHSEP OR NOT MUT LT LPAREN LBRACK INT_LIT IMPL IDENT GT FOR FN FLOAT_LIT FALSE EXTERN EQ DYN DOLLAR_CRATE C_STRING CRATE COMMA COLON CHAR_LIT BYTE_STRING BYTE AS AND ]
## Transitions:
## Reductions:
-- On UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SEMI SELFVALUE SELFTYPE SAFE RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUS PATHSEP OR NOT MUT LT LPAREN LBRACK INT_LIT IMPL IDENT GT FOR FN FLOAT_LIT FALSE EXTERN EQ DYN DOLLAR_CRATE C_STRING CRATE COMMA COLON CHAR_LIT BYTE_STRING BYTE AS AND
--   reduce production lifetime -> LIFETIME_OR_LABEL

State 58:
## Known stack suffix:
## LT GT
## LR(1) items:
use_bound_generic_args -> LT GT . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production use_bound_generic_args -> LT GT

State 59:
## Known stack suffix:
## ELIDED_LIFETIME
## LR(1) items:
lifetime -> ELIDED_LIFETIME . [ UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SEMI SELFVALUE SELFTYPE SAFE RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUS PATHSEP OR NOT MUT LT LPAREN LBRACK INT_LIT IMPL IDENT GT FOR FN FLOAT_LIT FALSE EXTERN EQ DYN DOLLAR_CRATE C_STRING CRATE COMMA COLON CHAR_LIT BYTE_STRING BYTE AS AND ]
## Transitions:
## Reductions:
-- On UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SEMI SELFVALUE SELFTYPE SAFE RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUS PATHSEP OR NOT MUT LT LPAREN LBRACK INT_LIT IMPL IDENT GT FOR FN FLOAT_LIT FALSE EXTERN EQ DYN DOLLAR_CRATE C_STRING CRATE COMMA COLON CHAR_LIT BYTE_STRING BYTE AS AND
--   reduce production lifetime -> ELIDED_LIFETIME

State 60:
## Known stack suffix:
## use_bound_generic_arg
## LR(1) items:
nonempty_list(terminated(use_bound_generic_arg,COMMA)) -> use_bound_generic_arg . COMMA [ GT ]
nonempty_list(terminated(use_bound_generic_arg,COMMA)) -> use_bound_generic_arg . COMMA nonempty_list(terminated(use_bound_generic_arg,COMMA)) [ GT ]
separated_nonempty_list(COMMA,use_bound_generic_arg) -> use_bound_generic_arg . [ GT ]
separated_nonempty_list(COMMA,use_bound_generic_arg) -> use_bound_generic_arg . COMMA separated_nonempty_list(COMMA,use_bound_generic_arg) [ GT ]
## Transitions:
-- On COMMA shift to state 61
## Reductions:
-- On GT
--   reduce production separated_nonempty_list(COMMA,use_bound_generic_arg) -> use_bound_generic_arg

State 61:
## Known stack suffix:
## use_bound_generic_arg COMMA
## LR(1) items:
nonempty_list(terminated(use_bound_generic_arg,COMMA)) -> use_bound_generic_arg COMMA . [ GT ]
nonempty_list(terminated(use_bound_generic_arg,COMMA)) -> use_bound_generic_arg COMMA . nonempty_list(terminated(use_bound_generic_arg,COMMA)) [ GT ]
separated_nonempty_list(COMMA,use_bound_generic_arg) -> use_bound_generic_arg COMMA . separated_nonempty_list(COMMA,use_bound_generic_arg) [ GT ]
## Transitions:
-- On STATIC_LIFETIME shift to state 55
-- On SELFTYPE shift to state 56
-- On RAW_IDENT shift to state 18
-- On LIFETIME_OR_LABEL shift to state 57
-- On IDENT shift to state 19
-- On ELIDED_LIFETIME shift to state 59
-- On use_bound_generic_arg shift to state 60
-- On separated_nonempty_list(COMMA,use_bound_generic_arg) shift to state 62
-- On nonempty_list(terminated(use_bound_generic_arg,COMMA)) shift to state 63
-- On lifetime shift to state 64
-- On ident shift to state 65
## Reductions:
-- On GT
--   reduce production nonempty_list(terminated(use_bound_generic_arg,COMMA)) -> use_bound_generic_arg COMMA

State 62:
## Known stack suffix:
## use_bound_generic_arg COMMA separated_nonempty_list(COMMA,use_bound_generic_arg)
## LR(1) items:
separated_nonempty_list(COMMA,use_bound_generic_arg) -> use_bound_generic_arg COMMA separated_nonempty_list(COMMA,use_bound_generic_arg) . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production separated_nonempty_list(COMMA,use_bound_generic_arg) -> use_bound_generic_arg COMMA separated_nonempty_list(COMMA,use_bound_generic_arg)

State 63:
## Known stack suffix:
## use_bound_generic_arg COMMA nonempty_list(terminated(use_bound_generic_arg,COMMA))
## LR(1) items:
nonempty_list(terminated(use_bound_generic_arg,COMMA)) -> use_bound_generic_arg COMMA nonempty_list(terminated(use_bound_generic_arg,COMMA)) . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production nonempty_list(terminated(use_bound_generic_arg,COMMA)) -> use_bound_generic_arg COMMA nonempty_list(terminated(use_bound_generic_arg,COMMA))

State 64:
## Known stack suffix:
## lifetime
## LR(1) items:
use_bound_generic_arg -> lifetime . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production use_bound_generic_arg -> lifetime

State 65:
## Known stack suffix:
## ident
## LR(1) items:
use_bound_generic_arg -> ident . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production use_bound_generic_arg -> ident

State 66:
## Known stack suffix:
## separated_nonempty_list(COMMA,use_bound_generic_arg)
## LR(1) items:
nonempty_separated_or_terminated_list(COMMA,use_bound_generic_arg) -> separated_nonempty_list(COMMA,use_bound_generic_arg) . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production nonempty_separated_or_terminated_list(COMMA,use_bound_generic_arg) -> separated_nonempty_list(COMMA,use_bound_generic_arg)

State 67:
## Known stack suffix:
## LT nonempty_separated_or_terminated_list(COMMA,use_bound_generic_arg)
## LR(1) items:
use_bound_generic_args -> LT nonempty_separated_or_terminated_list(COMMA,use_bound_generic_arg) . GT [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
-- On GT shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## LT nonempty_separated_or_terminated_list(COMMA,use_bound_generic_arg) GT
## LR(1) items:
use_bound_generic_args -> LT nonempty_separated_or_terminated_list(COMMA,use_bound_generic_arg) GT . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production use_bound_generic_args -> LT nonempty_separated_or_terminated_list(COMMA,use_bound_generic_arg) GT

State 69:
## Known stack suffix:
## nonempty_list(terminated(use_bound_generic_arg,COMMA))
## LR(1) items:
nonempty_separated_or_terminated_list(COMMA,use_bound_generic_arg) -> nonempty_list(terminated(use_bound_generic_arg,COMMA)) . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production nonempty_separated_or_terminated_list(COMMA,use_bound_generic_arg) -> nonempty_list(terminated(use_bound_generic_arg,COMMA))

State 70:
## Known stack suffix:
## USE use_bound_generic_args
## LR(1) items:
use_bound -> USE use_bound_generic_args . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production use_bound -> USE use_bound_generic_args

State 71:
## Known stack suffix:
## LPAREN
## LR(1) items:
trait_bound -> LPAREN . option(question_or_for) type_path RPAREN [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
tuple_type -> LPAREN . separated_or_terminated_list(COMMA,typ) RPAREN [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
type_no_bounds -> LPAREN . typ RPAREN [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On IMPL shift to state 73
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 711
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On separated_or_terminated_list(COMMA,typ) shift to state 716
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On separated_nonempty_list(COMMA,typ) shift to state 718
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 719
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On loption(separated_nonempty_list(COMMA,typ)) shift to state 721
-- On list(terminated(typ,COMMA)) shift to state 722
-- On lifetime shift to state 179
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On RPAREN
--   reduce production list(terminated(typ,COMMA)) ->
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,typ)) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RPAREN RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 72:
## Known stack suffix:
## LBRACK
## LR(1) items:
type_no_bounds -> LBRACK . typ SEMI expression RBRACK [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
type_no_bounds -> LBRACK . typ RBRACK [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On IMPL shift to state 73
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 274
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On lifetime shift to state 179
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 73:
## Known stack suffix:
## IMPL
## LR(1) items:
impl_trait_type -> IMPL . type_param_bounds [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
impl_trait_type_one_bound -> IMPL . trait_bound [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
-- On USE shift to state 53
-- On STATIC_LIFETIME shift to state 55
-- On QUESTION shift to state 50
-- On LPAREN shift to state 74
-- On LIFETIME_OR_LABEL shift to state 57
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On use_bound shift to state 85
-- On type_param_bounds shift to state 272
-- On type_param_bound shift to state 87
-- On trait_bound shift to state 273
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On option(question_or_for) shift to state 91
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On lifetime shift to state 179
-- On for_lifetimes shift to state 121
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->

State 74:
## Known stack suffix:
## LPAREN
## LR(1) items:
trait_bound -> LPAREN . option(question_or_for) type_path RPAREN [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On QUESTION shift to state 50
-- On FOR shift to state 75
-- On option(question_or_for) shift to state 269
-- On for_lifetimes shift to state 121
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->

State 75:
## Known stack suffix:
## FOR
## LR(1) items:
for_lifetimes -> FOR . generic_params [ UNSAFE SUPER SELFVALUE SELFTYPE SAFE RAW_IDENT PATHSEP IDENT FN EXTERN DOLLAR_CRATE CRATE ]
## Transitions:
-- On LT shift to state 76
-- On generic_params shift to state 268
## Reductions:

State 76:
## Known stack suffix:
## LT
## LR(1) items:
generic_params -> LT . GT [ UNSAFE SUPER SELFVALUE SELFTYPE SAFE RAW_IDENT PATHSEP IDENT FN EXTERN DOLLAR_CRATE CRATE ]
generic_params -> LT . separated_nonempty_list(COMMA,generic_param) GT [ UNSAFE SUPER SELFVALUE SELFTYPE SAFE RAW_IDENT PATHSEP IDENT FN EXTERN DOLLAR_CRATE CRATE ]
## Transitions:
-- On POUND shift to state 1
-- On GT shift to state 77
-- On separated_nonempty_list(COMMA,generic_param) shift to state 78
-- On outer_attr shift to state 42
-- On list(outer_attr) shift to state 80
-- On generic_param shift to state 265
## Reductions:
-- On STATIC_LIFETIME RAW_IDENT LIFETIME_OR_LABEL IDENT ELIDED_LIFETIME CONST
--   reduce production list(outer_attr) ->

State 77:
## Known stack suffix:
## LT GT
## LR(1) items:
generic_params -> LT GT . [ UNSAFE SUPER SELFVALUE SELFTYPE SAFE RAW_IDENT PATHSEP IDENT FN EXTERN DOLLAR_CRATE CRATE ]
## Transitions:
## Reductions:
-- On UNSAFE SUPER SELFVALUE SELFTYPE SAFE RAW_IDENT PATHSEP IDENT FN EXTERN DOLLAR_CRATE CRATE
--   reduce production generic_params -> LT GT

State 78:
## Known stack suffix:
## LT separated_nonempty_list(COMMA,generic_param)
## LR(1) items:
generic_params -> LT separated_nonempty_list(COMMA,generic_param) . GT [ UNSAFE SUPER SELFVALUE SELFTYPE SAFE RAW_IDENT PATHSEP IDENT FN EXTERN DOLLAR_CRATE CRATE ]
## Transitions:
-- On GT shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## LT separated_nonempty_list(COMMA,generic_param) GT
## LR(1) items:
generic_params -> LT separated_nonempty_list(COMMA,generic_param) GT . [ UNSAFE SUPER SELFVALUE SELFTYPE SAFE RAW_IDENT PATHSEP IDENT FN EXTERN DOLLAR_CRATE CRATE ]
## Transitions:
## Reductions:
-- On UNSAFE SUPER SELFVALUE SELFTYPE SAFE RAW_IDENT PATHSEP IDENT FN EXTERN DOLLAR_CRATE CRATE
--   reduce production generic_params -> LT separated_nonempty_list(COMMA,generic_param) GT

State 80:
## Known stack suffix:
## list(outer_attr)
## LR(1) items:
generic_param -> list(outer_attr) . lifetime_param [ GT COMMA ]
generic_param -> list(outer_attr) . type_param [ GT COMMA ]
generic_param -> list(outer_attr) . const_param [ GT COMMA ]
## Transitions:
-- On STATIC_LIFETIME shift to state 55
-- On RAW_IDENT shift to state 18
-- On LIFETIME_OR_LABEL shift to state 57
-- On IDENT shift to state 19
-- On ELIDED_LIFETIME shift to state 59
-- On CONST shift to state 81
-- On type_param shift to state 242
-- On lifetime_param shift to state 243
-- On lifetime shift to state 244
-- On ident shift to state 256
-- On const_param shift to state 264
## Reductions:

State 81:
## Known stack suffix:
## CONST
## LR(1) items:
const_param -> CONST . ident COLON typ option(const_param_body) [ GT COMMA ]
## Transitions:
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On ident shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## CONST ident
## LR(1) items:
const_param -> CONST ident . COLON typ option(const_param_body) [ GT COMMA ]
## Transitions:
-- On COLON shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## CONST ident COLON
## LR(1) items:
const_param -> CONST ident COLON . typ option(const_param_body) [ GT COMMA ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On IMPL shift to state 73
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 235
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On lifetime shift to state 179
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 84:
## Known stack suffix:
## DYN
## LR(1) items:
trait_object_type -> DYN . type_param_bounds [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
type_no_bounds -> DYN . trait_bound [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
-- On USE shift to state 53
-- On STATIC_LIFETIME shift to state 55
-- On QUESTION shift to state 50
-- On LPAREN shift to state 74
-- On LIFETIME_OR_LABEL shift to state 57
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On use_bound shift to state 85
-- On type_param_bounds shift to state 86
-- On type_param_bound shift to state 87
-- On trait_bound shift to state 234
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On option(question_or_for) shift to state 91
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On lifetime shift to state 179
-- On for_lifetimes shift to state 121
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->

State 85:
## Known stack suffix:
## use_bound
## LR(1) items:
type_param_bound -> use_bound . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production type_param_bound -> use_bound

State 86:
## Known stack suffix:
## DYN type_param_bounds
## LR(1) items:
trait_object_type -> DYN type_param_bounds . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production trait_object_type -> DYN type_param_bounds

State 87:
## Known stack suffix:
## type_param_bound
## LR(1) items:
nonempty_list(terminated(type_param_bound,PLUS)) -> type_param_bound . PLUS [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
nonempty_list(terminated(type_param_bound,PLUS)) -> type_param_bound . PLUS nonempty_list(terminated(type_param_bound,PLUS)) [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
separated_nonempty_list(PLUS,type_param_bound) -> type_param_bound . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
separated_nonempty_list(PLUS,type_param_bound) -> type_param_bound . PLUS separated_nonempty_list(PLUS,type_param_bound) [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
-- On PLUS shift to state 88
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production separated_nonempty_list(PLUS,type_param_bound) -> type_param_bound

State 88:
## Known stack suffix:
## type_param_bound PLUS
## LR(1) items:
nonempty_list(terminated(type_param_bound,PLUS)) -> type_param_bound PLUS . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
nonempty_list(terminated(type_param_bound,PLUS)) -> type_param_bound PLUS . nonempty_list(terminated(type_param_bound,PLUS)) [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
separated_nonempty_list(PLUS,type_param_bound) -> type_param_bound PLUS . separated_nonempty_list(PLUS,type_param_bound) [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
-- On USE shift to state 53
-- On STATIC_LIFETIME shift to state 55
-- On QUESTION shift to state 50
-- On LPAREN shift to state 74
-- On LIFETIME_OR_LABEL shift to state 57
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On use_bound shift to state 85
-- On type_param_bound shift to state 87
-- On trait_bound shift to state 89
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 90
-- On option(question_or_for) shift to state 91
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 233
-- On lifetime shift to state 179
-- On for_lifetimes shift to state 121
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production nonempty_list(terminated(type_param_bound,PLUS)) -> type_param_bound PLUS
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on RAW_IDENT IDENT

State 89:
## Known stack suffix:
## trait_bound
## LR(1) items:
type_param_bound -> trait_bound . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production type_param_bound -> trait_bound

State 90:
## Known stack suffix:
## type_param_bound PLUS separated_nonempty_list(PLUS,type_param_bound)
## LR(1) items:
separated_nonempty_list(PLUS,type_param_bound) -> type_param_bound PLUS separated_nonempty_list(PLUS,type_param_bound) . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production separated_nonempty_list(PLUS,type_param_bound) -> type_param_bound PLUS separated_nonempty_list(PLUS,type_param_bound)

State 91:
## Known stack suffix:
## option(question_or_for)
## LR(1) items:
trait_bound -> option(question_or_for) . type_path [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On PATHSEP shift to state 4
-- On type_path shift to state 92
-- On option(PATHSEP) shift to state 93
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->

State 92:
## Known stack suffix:
## option(question_or_for) type_path
## LR(1) items:
trait_bound -> option(question_or_for) type_path . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production trait_bound -> option(question_or_for) type_path

State 93:
## Known stack suffix:
## option(PATHSEP)
## LR(1) items:
type_path -> option(PATHSEP) . separated_nonempty_list(PATHSEP,type_path_segment) [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On SUPER shift to state 94
-- On SELFVALUE shift to state 95
-- On SELFTYPE shift to state 96
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On DOLLAR_CRATE shift to state 97
-- On CRATE shift to state 98
-- On type_path_segment shift to state 99
-- On separated_nonempty_list(PATHSEP,type_path_segment) shift to state 232
-- On path_ident_segment shift to state 102
-- On ident shift to state 132
## Reductions:

State 94:
## Known stack suffix:
## SUPER
## LR(1) items:
path_ident_segment -> SUPER . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production path_ident_segment -> SUPER

State 95:
## Known stack suffix:
## SELFVALUE
## LR(1) items:
path_ident_segment -> SELFVALUE . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production path_ident_segment -> SELFVALUE

State 96:
## Known stack suffix:
## SELFTYPE
## LR(1) items:
path_ident_segment -> SELFTYPE . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production path_ident_segment -> SELFTYPE

State 97:
## Known stack suffix:
## DOLLAR_CRATE
## LR(1) items:
path_ident_segment -> DOLLAR_CRATE . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production path_ident_segment -> DOLLAR_CRATE

State 98:
## Known stack suffix:
## CRATE
## LR(1) items:
path_ident_segment -> CRATE . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production path_ident_segment -> CRATE

State 99:
## Known stack suffix:
## type_path_segment
## LR(1) items:
separated_nonempty_list(PATHSEP,type_path_segment) -> type_path_segment . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
separated_nonempty_list(PATHSEP,type_path_segment) -> type_path_segment . PATHSEP separated_nonempty_list(PATHSEP,type_path_segment) [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On PATHSEP shift to state 100
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production separated_nonempty_list(PATHSEP,type_path_segment) -> type_path_segment
** Conflict on PATHSEP

State 100:
## Known stack suffix:
## type_path_segment PATHSEP
## LR(1) items:
separated_nonempty_list(PATHSEP,type_path_segment) -> type_path_segment PATHSEP . separated_nonempty_list(PATHSEP,type_path_segment) [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On SUPER shift to state 94
-- On SELFVALUE shift to state 95
-- On SELFTYPE shift to state 96
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On DOLLAR_CRATE shift to state 97
-- On CRATE shift to state 98
-- On type_path_segment shift to state 99
-- On separated_nonempty_list(PATHSEP,type_path_segment) shift to state 101
-- On path_ident_segment shift to state 102
-- On ident shift to state 132
## Reductions:

State 101:
## Known stack suffix:
## type_path_segment PATHSEP separated_nonempty_list(PATHSEP,type_path_segment)
## LR(1) items:
separated_nonempty_list(PATHSEP,type_path_segment) -> type_path_segment PATHSEP separated_nonempty_list(PATHSEP,type_path_segment) . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production separated_nonempty_list(PATHSEP,type_path_segment) -> type_path_segment PATHSEP separated_nonempty_list(PATHSEP,type_path_segment)

State 102:
## Known stack suffix:
## path_ident_segment
## LR(1) items:
type_path_segment -> path_ident_segment . option(path_gen_path_fn) [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On PATHSEP shift to state 4
-- On path_gen_path_fn shift to state 103
-- On option(path_gen_path_fn) shift to state 104
-- On option(PATHSEP) shift to state 105
## Reductions:
-- On LT LPAREN
--   reduce production option(PATHSEP) ->
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production option(path_gen_path_fn) ->
** Conflict on PATHSEP LT LPAREN

State 103:
## Known stack suffix:
## path_gen_path_fn
## LR(1) items:
option(path_gen_path_fn) -> path_gen_path_fn . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production option(path_gen_path_fn) -> path_gen_path_fn

State 104:
## Known stack suffix:
## path_ident_segment option(path_gen_path_fn)
## LR(1) items:
type_path_segment -> path_ident_segment option(path_gen_path_fn) . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_path_segment -> path_ident_segment option(path_gen_path_fn)

State 105:
## Known stack suffix:
## option(PATHSEP)
## LR(1) items:
path_gen_path_fn -> option(PATHSEP) . generic_args [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
path_gen_path_fn -> option(PATHSEP) . type_path_fn [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On LT shift to state 106
-- On LPAREN shift to state 215
-- On type_path_fn shift to state 230
-- On generic_args shift to state 231
## Reductions:

State 106:
## Known stack suffix:
## LT
## LR(1) items:
generic_args -> LT . separated_or_terminated_list(COMMA,generic_arg) GT [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On TRUE shift to state 31
-- On SUPER shift to state 16
-- On STRING_LIT shift to state 32
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On SELFVALUE shift to state 17
-- On RAW_STRING_LIT shift to state 35
-- On RAW_IDENT shift to state 18
-- On RAW_C_STRING shift to state 37
-- On RAW_BYTE_STRING shift to state 39
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On MINUS shift to state 107
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IMPL shift to state 73
-- On IDENT shift to state 19
-- On FOR shift to state 75
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On DOLLAR_CRATE shift to state 20
-- On C_STRING shift to state 111
-- On CRATE shift to state 21
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 192
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On simple_path_segment shift to state 193
-- On separated_or_terminated_list(COMMA,generic_arg) shift to state 194
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On separated_nonempty_list(COMMA,generic_arg) shift to state 196
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On loption(separated_nonempty_list(COMMA,generic_arg)) shift to state 197
-- On literal_expression shift to state 198
-- On list(terminated(generic_arg,COMMA)) shift to state 199
-- On lifetime shift to state 200
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On ident shift to state 201
-- On generic_args_const shift to state 207
-- On generic_args_bounds shift to state 208
-- On generic_args_binding shift to state 209
-- On generic_arg shift to state 210
-- On for_lifetimes shift to state 156
-- On block_expression shift to state 214
-- On bare_function_type shift to state 157
## Reductions:
-- On GT
--   reduce production list(terminated(generic_arg,COMMA)) ->
-- On GT
--   reduce production loption(separated_nonempty_list(COMMA,generic_arg)) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT GT DOLLAR_CRATE CRATE

State 107:
## Known stack suffix:
## MINUS
## LR(1) items:
generic_args_const -> MINUS . literal_expression [ GT COMMA ]
## Transitions:
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On RAW_STRING_LIT shift to state 35
-- On RAW_C_STRING shift to state 37
-- On RAW_BYTE_STRING shift to state 39
-- On INT_LIT shift to state 108
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On C_STRING shift to state 111
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On literal_expression shift to state 115
## Reductions:

State 108:
## Known stack suffix:
## INT_LIT
## LR(1) items:
literal_expression -> INT_LIT . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production literal_expression -> INT_LIT

State 109:
## Known stack suffix:
## FLOAT_LIT
## LR(1) items:
literal_expression -> FLOAT_LIT . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production literal_expression -> FLOAT_LIT

State 110:
## Known stack suffix:
## FALSE
## LR(1) items:
literal_expression -> FALSE . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production literal_expression -> FALSE

State 111:
## Known stack suffix:
## C_STRING
## LR(1) items:
literal_expression -> C_STRING . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production literal_expression -> C_STRING

State 112:
## Known stack suffix:
## CHAR_LIT
## LR(1) items:
literal_expression -> CHAR_LIT . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production literal_expression -> CHAR_LIT

State 113:
## Known stack suffix:
## BYTE_STRING
## LR(1) items:
literal_expression -> BYTE_STRING . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production literal_expression -> BYTE_STRING

State 114:
## Known stack suffix:
## BYTE
## LR(1) items:
literal_expression -> BYTE . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production literal_expression -> BYTE

State 115:
## Known stack suffix:
## MINUS literal_expression
## LR(1) items:
generic_args_const -> MINUS literal_expression . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production generic_args_const -> MINUS literal_expression

State 116:
## Known stack suffix:
## AND
## LR(1) items:
reference_type -> AND . option(lifetime) MUT type_no_bounds [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
reference_type -> AND . option(lifetime) type_no_bounds [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On STATIC_LIFETIME shift to state 55
-- On LIFETIME_OR_LABEL shift to state 57
-- On ELIDED_LIFETIME shift to state 59
-- On option(lifetime) shift to state 117
-- On lifetime shift to state 191
## Reductions:
-- On UNSAFE UNDERSCORE SUPER STAR SELFVALUE SELFTYPE SAFE RAW_IDENT QUESTION PATHSEP NOT MUT LT LPAREN LBRACK IMPL IDENT FOR FN EXTERN DYN DOLLAR_CRATE CRATE AND
--   reduce production option(lifetime) ->

State 117:
## Known stack suffix:
## AND option(lifetime)
## LR(1) items:
reference_type -> AND option(lifetime) . MUT type_no_bounds [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
reference_type -> AND option(lifetime) . type_no_bounds [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNDERSCORE shift to state 47
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On MUT shift to state 118
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LBRACK shift to state 72
-- On IMPL shift to state 119
-- On FOR shift to state 75
-- On DYN shift to state 122
-- On AND shift to state 116
-- On type_path shift to state 124
-- On type_no_bounds shift to state 190
-- On tuple_type shift to state 126
-- On trait_bound shift to state 127
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On impl_trait_type_one_bound shift to state 155
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 118:
## Known stack suffix:
## AND option(lifetime) MUT
## LR(1) items:
reference_type -> AND option(lifetime) MUT . type_no_bounds [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNDERSCORE shift to state 47
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LBRACK shift to state 72
-- On IMPL shift to state 119
-- On FOR shift to state 75
-- On DYN shift to state 122
-- On AND shift to state 116
-- On type_path shift to state 124
-- On type_no_bounds shift to state 125
-- On tuple_type shift to state 126
-- On trait_bound shift to state 127
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On impl_trait_type_one_bound shift to state 155
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 119:
## Known stack suffix:
## IMPL
## LR(1) items:
impl_trait_type_one_bound -> IMPL . trait_bound [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On QUESTION shift to state 50
-- On LPAREN shift to state 74
-- On FOR shift to state 75
-- On trait_bound shift to state 120
-- On option(question_or_for) shift to state 91
-- On for_lifetimes shift to state 121
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->

State 120:
## Known stack suffix:
## IMPL trait_bound
## LR(1) items:
impl_trait_type_one_bound -> IMPL trait_bound . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production impl_trait_type_one_bound -> IMPL trait_bound

State 121:
## Known stack suffix:
## for_lifetimes
## LR(1) items:
option(question_or_for) -> for_lifetimes . [ SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE ]
## Transitions:
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) -> for_lifetimes

State 122:
## Known stack suffix:
## DYN
## LR(1) items:
type_no_bounds -> DYN . trait_bound [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On QUESTION shift to state 50
-- On LPAREN shift to state 74
-- On FOR shift to state 75
-- On trait_bound shift to state 123
-- On option(question_or_for) shift to state 91
-- On for_lifetimes shift to state 121
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->

State 123:
## Known stack suffix:
## DYN trait_bound
## LR(1) items:
type_no_bounds -> DYN trait_bound . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_no_bounds -> DYN trait_bound

State 124:
## Known stack suffix:
## type_path
## LR(1) items:
type_no_bounds -> type_path . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_no_bounds -> type_path

State 125:
## Known stack suffix:
## AND option(lifetime) MUT type_no_bounds
## LR(1) items:
reference_type -> AND option(lifetime) MUT type_no_bounds . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production reference_type -> AND option(lifetime) MUT type_no_bounds

State 126:
## Known stack suffix:
## tuple_type
## LR(1) items:
type_no_bounds -> tuple_type . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_no_bounds -> tuple_type

State 127:
## Known stack suffix:
## trait_bound
## LR(1) items:
type_no_bounds -> trait_bound . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_no_bounds -> trait_bound

State 128:
## Known stack suffix:
## reference_type
## LR(1) items:
type_no_bounds -> reference_type . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_no_bounds -> reference_type

State 129:
## Known stack suffix:
## raw_pointer_type
## LR(1) items:
type_no_bounds -> raw_pointer_type . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_no_bounds -> raw_pointer_type

State 130:
## Known stack suffix:
## qualified_path_type
## LR(1) items:
qualified_path_in_type -> qualified_path_type . separated_nonempty_list(PATHSEP,type_path_segment) [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On SUPER shift to state 94
-- On SELFVALUE shift to state 95
-- On SELFTYPE shift to state 96
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On DOLLAR_CRATE shift to state 97
-- On CRATE shift to state 98
-- On type_path_segment shift to state 99
-- On separated_nonempty_list(PATHSEP,type_path_segment) shift to state 131
-- On path_ident_segment shift to state 102
-- On ident shift to state 132
## Reductions:

State 131:
## Known stack suffix:
## qualified_path_type separated_nonempty_list(PATHSEP,type_path_segment)
## LR(1) items:
qualified_path_in_type -> qualified_path_type separated_nonempty_list(PATHSEP,type_path_segment) . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production qualified_path_in_type -> qualified_path_type separated_nonempty_list(PATHSEP,type_path_segment)

State 132:
## Known stack suffix:
## ident
## LR(1) items:
path_ident_segment -> ident . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production path_ident_segment -> ident

State 133:
## Known stack suffix:
## qualified_path_in_type
## LR(1) items:
type_no_bounds -> qualified_path_in_type . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_no_bounds -> qualified_path_in_type

State 134:
## Known stack suffix:
## option(for_lifetimes)
## LR(1) items:
bare_function_type -> option(for_lifetimes) . function_type_qualifiers FN LPAREN option(function_parameters_maybe_named_variadic) RPAREN option(bare_function_return_type) [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 135
-- On SAFE shift to state 141
-- On EXTERN shift to state 144
-- On function_type_qualifiers shift to state 146
## Reductions:
-- On FN
--   reduce production function_type_qualifiers ->

State 135:
## Known stack suffix:
## UNSAFE
## LR(1) items:
function_type_qualifiers -> UNSAFE . [ FN ]
function_type_qualifiers -> UNSAFE . EXTERN option(abi) [ FN ]
## Transitions:
-- On EXTERN shift to state 136
## Reductions:
-- On FN
--   reduce production function_type_qualifiers -> UNSAFE

State 136:
## Known stack suffix:
## UNSAFE EXTERN
## LR(1) items:
function_type_qualifiers -> UNSAFE EXTERN . option(abi) [ FN ]
## Transitions:
-- On STRING_LIT shift to state 137
-- On RAW_STRING_LIT shift to state 138
-- On option(abi) shift to state 139
-- On abi shift to state 140
## Reductions:
-- On FN
--   reduce production option(abi) ->

State 137:
## Known stack suffix:
## STRING_LIT
## LR(1) items:
abi -> STRING_LIT . [ FN ]
## Transitions:
## Reductions:
-- On FN
--   reduce production abi -> STRING_LIT

State 138:
## Known stack suffix:
## RAW_STRING_LIT
## LR(1) items:
abi -> RAW_STRING_LIT . [ FN ]
## Transitions:
## Reductions:
-- On FN
--   reduce production abi -> RAW_STRING_LIT

State 139:
## Known stack suffix:
## UNSAFE EXTERN option(abi)
## LR(1) items:
function_type_qualifiers -> UNSAFE EXTERN option(abi) . [ FN ]
## Transitions:
## Reductions:
-- On FN
--   reduce production function_type_qualifiers -> UNSAFE EXTERN option(abi)

State 140:
## Known stack suffix:
## abi
## LR(1) items:
option(abi) -> abi . [ FN ]
## Transitions:
## Reductions:
-- On FN
--   reduce production option(abi) -> abi

State 141:
## Known stack suffix:
## SAFE
## LR(1) items:
function_type_qualifiers -> SAFE . [ FN ]
function_type_qualifiers -> SAFE . EXTERN option(abi) [ FN ]
## Transitions:
-- On EXTERN shift to state 142
## Reductions:
-- On FN
--   reduce production function_type_qualifiers -> SAFE

State 142:
## Known stack suffix:
## SAFE EXTERN
## LR(1) items:
function_type_qualifiers -> SAFE EXTERN . option(abi) [ FN ]
## Transitions:
-- On STRING_LIT shift to state 137
-- On RAW_STRING_LIT shift to state 138
-- On option(abi) shift to state 143
-- On abi shift to state 140
## Reductions:
-- On FN
--   reduce production option(abi) ->

State 143:
## Known stack suffix:
## SAFE EXTERN option(abi)
## LR(1) items:
function_type_qualifiers -> SAFE EXTERN option(abi) . [ FN ]
## Transitions:
## Reductions:
-- On FN
--   reduce production function_type_qualifiers -> SAFE EXTERN option(abi)

State 144:
## Known stack suffix:
## EXTERN
## LR(1) items:
function_type_qualifiers -> EXTERN . option(abi) [ FN ]
## Transitions:
-- On STRING_LIT shift to state 137
-- On RAW_STRING_LIT shift to state 138
-- On option(abi) shift to state 145
-- On abi shift to state 140
## Reductions:
-- On FN
--   reduce production option(abi) ->

State 145:
## Known stack suffix:
## EXTERN option(abi)
## LR(1) items:
function_type_qualifiers -> EXTERN option(abi) . [ FN ]
## Transitions:
## Reductions:
-- On FN
--   reduce production function_type_qualifiers -> EXTERN option(abi)

State 146:
## Known stack suffix:
## option(for_lifetimes) function_type_qualifiers
## LR(1) items:
bare_function_type -> option(for_lifetimes) function_type_qualifiers . FN LPAREN option(function_parameters_maybe_named_variadic) RPAREN option(bare_function_return_type) [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On FN shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## option(for_lifetimes) function_type_qualifiers FN
## LR(1) items:
bare_function_type -> option(for_lifetimes) function_type_qualifiers FN . LPAREN option(function_parameters_maybe_named_variadic) RPAREN option(bare_function_return_type) [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On LPAREN shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## option(for_lifetimes) function_type_qualifiers FN LPAREN
## LR(1) items:
bare_function_type -> option(for_lifetimes) function_type_qualifiers FN LPAREN . option(function_parameters_maybe_named_variadic) RPAREN option(bare_function_return_type) [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On POUND shift to state 1
-- On separated_or_terminated_list(COMMA,maybe_named_param) shift to state 149
-- On separated_nonempty_list(COMMA,maybe_named_param) shift to state 150
-- On outer_attr shift to state 42
-- On option(function_parameters_maybe_named_variadic) shift to state 151
-- On nonempty_list(terminated(maybe_named_param,COMMA)) shift to state 160
-- On maybe_named_param shift to state 163
-- On maybe_named_function_parameters_variadic shift to state 185
-- On maybe_named_function_parameters shift to state 186
-- On loption(separated_nonempty_list(COMMA,maybe_named_param)) shift to state 187
-- On list(terminated(maybe_named_param,COMMA)) shift to state 188
-- On list(outer_attr) shift to state 168
-- On function_parameters_maybe_named_variadic shift to state 189
## Reductions:
-- On USE UNSAFE UNDERSCORE SUPER STATIC_LIFETIME STAR SELFVALUE SELFTYPE SAFE RAW_IDENT QUESTION PATHSEP NOT LT LPAREN LIFETIME_OR_LABEL LBRACK IMPL IDENT FOR FN EXTERN ELIDED_LIFETIME DYN DOLLAR_CRATE CRATE AND
--   reduce production list(outer_attr) ->
-- On RPAREN
--   reduce production list(terminated(maybe_named_param,COMMA)) ->
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,maybe_named_param)) ->
-- On RPAREN
--   reduce production option(function_parameters_maybe_named_variadic) ->
** Conflict on RPAREN

State 149:
## Known stack suffix:
## separated_or_terminated_list(COMMA,maybe_named_param)
## LR(1) items:
maybe_named_function_parameters -> separated_or_terminated_list(COMMA,maybe_named_param) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production maybe_named_function_parameters -> separated_or_terminated_list(COMMA,maybe_named_param)

State 150:
## Known stack suffix:
## separated_nonempty_list(COMMA,maybe_named_param)
## LR(1) items:
loption(separated_nonempty_list(COMMA,maybe_named_param)) -> separated_nonempty_list(COMMA,maybe_named_param) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,maybe_named_param)) -> separated_nonempty_list(COMMA,maybe_named_param)

State 151:
## Known stack suffix:
## option(for_lifetimes) function_type_qualifiers FN LPAREN option(function_parameters_maybe_named_variadic)
## LR(1) items:
bare_function_type -> option(for_lifetimes) function_type_qualifiers FN LPAREN option(function_parameters_maybe_named_variadic) . RPAREN option(bare_function_return_type) [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On RPAREN shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## option(for_lifetimes) function_type_qualifiers FN LPAREN option(function_parameters_maybe_named_variadic) RPAREN
## LR(1) items:
bare_function_type -> option(for_lifetimes) function_type_qualifiers FN LPAREN option(function_parameters_maybe_named_variadic) RPAREN . option(bare_function_return_type) [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On RARROW shift to state 153
-- On option(bare_function_return_type) shift to state 158
-- On bare_function_return_type shift to state 159
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production option(bare_function_return_type) ->

State 153:
## Known stack suffix:
## RARROW
## LR(1) items:
bare_function_return_type -> RARROW . type_no_bounds [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNDERSCORE shift to state 47
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LBRACK shift to state 72
-- On IMPL shift to state 119
-- On FOR shift to state 75
-- On DYN shift to state 122
-- On AND shift to state 116
-- On type_path shift to state 124
-- On type_no_bounds shift to state 154
-- On tuple_type shift to state 126
-- On trait_bound shift to state 127
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On impl_trait_type_one_bound shift to state 155
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 154:
## Known stack suffix:
## RARROW type_no_bounds
## LR(1) items:
bare_function_return_type -> RARROW type_no_bounds . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production bare_function_return_type -> RARROW type_no_bounds

State 155:
## Known stack suffix:
## impl_trait_type_one_bound
## LR(1) items:
type_no_bounds -> impl_trait_type_one_bound . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_no_bounds -> impl_trait_type_one_bound

State 156:
## Known stack suffix:
## for_lifetimes
## LR(1) items:
option(for_lifetimes) -> for_lifetimes . [ UNSAFE SAFE FN EXTERN ]
option(question_or_for) -> for_lifetimes . [ SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE ]
## Transitions:
## Reductions:
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) -> for_lifetimes
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) -> for_lifetimes

State 157:
## Known stack suffix:
## bare_function_type
## LR(1) items:
type_no_bounds -> bare_function_type . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_no_bounds -> bare_function_type

State 158:
## Known stack suffix:
## option(for_lifetimes) function_type_qualifiers FN LPAREN option(function_parameters_maybe_named_variadic) RPAREN option(bare_function_return_type)
## LR(1) items:
bare_function_type -> option(for_lifetimes) function_type_qualifiers FN LPAREN option(function_parameters_maybe_named_variadic) RPAREN option(bare_function_return_type) . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production bare_function_type -> option(for_lifetimes) function_type_qualifiers FN LPAREN option(function_parameters_maybe_named_variadic) RPAREN option(bare_function_return_type)

State 159:
## Known stack suffix:
## bare_function_return_type
## LR(1) items:
option(bare_function_return_type) -> bare_function_return_type . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production option(bare_function_return_type) -> bare_function_return_type

State 160:
## Known stack suffix:
## nonempty_list(terminated(maybe_named_param,COMMA))
## LR(1) items:
maybe_named_function_parameters_variadic -> nonempty_list(terminated(maybe_named_param,COMMA)) . list(outer_attr) DOTDOTDOT [ RPAREN ]
## Transitions:
-- On POUND shift to state 1
-- On outer_attr shift to state 42
-- On list(outer_attr) shift to state 161
## Reductions:
-- On DOTDOTDOT
--   reduce production list(outer_attr) ->

State 161:
## Known stack suffix:
## nonempty_list(terminated(maybe_named_param,COMMA)) list(outer_attr)
## LR(1) items:
maybe_named_function_parameters_variadic -> nonempty_list(terminated(maybe_named_param,COMMA)) list(outer_attr) . DOTDOTDOT [ RPAREN ]
## Transitions:
-- On DOTDOTDOT shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## nonempty_list(terminated(maybe_named_param,COMMA)) list(outer_attr) DOTDOTDOT
## LR(1) items:
maybe_named_function_parameters_variadic -> nonempty_list(terminated(maybe_named_param,COMMA)) list(outer_attr) DOTDOTDOT . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production maybe_named_function_parameters_variadic -> nonempty_list(terminated(maybe_named_param,COMMA)) list(outer_attr) DOTDOTDOT

State 163:
## Known stack suffix:
## maybe_named_param
## LR(1) items:
list(terminated(maybe_named_param,COMMA)) -> maybe_named_param . COMMA list(terminated(maybe_named_param,COMMA)) [ RPAREN ]
nonempty_list(terminated(maybe_named_param,COMMA)) -> maybe_named_param . COMMA [ POUND DOTDOTDOT ]
nonempty_list(terminated(maybe_named_param,COMMA)) -> maybe_named_param . COMMA nonempty_list(terminated(maybe_named_param,COMMA)) [ POUND DOTDOTDOT ]
separated_nonempty_list(COMMA,maybe_named_param) -> maybe_named_param . [ RPAREN ]
separated_nonempty_list(COMMA,maybe_named_param) -> maybe_named_param . COMMA separated_nonempty_list(COMMA,maybe_named_param) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 164
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,maybe_named_param) -> maybe_named_param

State 164:
## Known stack suffix:
## maybe_named_param COMMA
## LR(1) items:
list(terminated(maybe_named_param,COMMA)) -> maybe_named_param COMMA . list(terminated(maybe_named_param,COMMA)) [ RPAREN ]
nonempty_list(terminated(maybe_named_param,COMMA)) -> maybe_named_param COMMA . [ POUND DOTDOTDOT ]
nonempty_list(terminated(maybe_named_param,COMMA)) -> maybe_named_param COMMA . nonempty_list(terminated(maybe_named_param,COMMA)) [ POUND DOTDOTDOT ]
separated_nonempty_list(COMMA,maybe_named_param) -> maybe_named_param COMMA . separated_nonempty_list(COMMA,maybe_named_param) [ RPAREN ]
## Transitions:
-- On POUND shift to state 1
-- On separated_nonempty_list(COMMA,maybe_named_param) shift to state 165
-- On outer_attr shift to state 42
-- On nonempty_list(terminated(maybe_named_param,COMMA)) shift to state 166
-- On maybe_named_param shift to state 163
-- On list(terminated(maybe_named_param,COMMA)) shift to state 167
-- On list(outer_attr) shift to state 168
## Reductions:
-- On USE UNSAFE UNDERSCORE SUPER STATIC_LIFETIME STAR SELFVALUE SELFTYPE SAFE RAW_IDENT QUESTION PATHSEP NOT LT LPAREN LIFETIME_OR_LABEL LBRACK IMPL IDENT FOR FN EXTERN ELIDED_LIFETIME DYN DOLLAR_CRATE CRATE AND
--   reduce production list(outer_attr) ->
-- On RPAREN
--   reduce production list(terminated(maybe_named_param,COMMA)) ->
-- On POUND DOTDOTDOT
--   reduce production nonempty_list(terminated(maybe_named_param,COMMA)) -> maybe_named_param COMMA
** Conflict on POUND

State 165:
## Known stack suffix:
## maybe_named_param COMMA separated_nonempty_list(COMMA,maybe_named_param)
## LR(1) items:
separated_nonempty_list(COMMA,maybe_named_param) -> maybe_named_param COMMA separated_nonempty_list(COMMA,maybe_named_param) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,maybe_named_param) -> maybe_named_param COMMA separated_nonempty_list(COMMA,maybe_named_param)

State 166:
## Known stack suffix:
## maybe_named_param COMMA nonempty_list(terminated(maybe_named_param,COMMA))
## LR(1) items:
nonempty_list(terminated(maybe_named_param,COMMA)) -> maybe_named_param COMMA nonempty_list(terminated(maybe_named_param,COMMA)) . [ POUND DOTDOTDOT ]
## Transitions:
## Reductions:
-- On POUND DOTDOTDOT
--   reduce production nonempty_list(terminated(maybe_named_param,COMMA)) -> maybe_named_param COMMA nonempty_list(terminated(maybe_named_param,COMMA))

State 167:
## Known stack suffix:
## maybe_named_param COMMA list(terminated(maybe_named_param,COMMA))
## LR(1) items:
list(terminated(maybe_named_param,COMMA)) -> maybe_named_param COMMA list(terminated(maybe_named_param,COMMA)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production list(terminated(maybe_named_param,COMMA)) -> maybe_named_param COMMA list(terminated(maybe_named_param,COMMA))

State 168:
## Known stack suffix:
## list(outer_attr)
## LR(1) items:
maybe_named_param -> list(outer_attr) . ident COLON typ [ RPAREN COMMA ]
maybe_named_param -> list(outer_attr) . UNDERSCORE COLON typ [ RPAREN COMMA ]
maybe_named_param -> list(outer_attr) . typ [ RPAREN COMMA ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 169
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On RAW_IDENT shift to state 18
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On IMPL shift to state 73
-- On IDENT shift to state 19
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 181
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On lifetime shift to state 179
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On ident shift to state 182
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 169:
## Known stack suffix:
## list(outer_attr) UNDERSCORE
## LR(1) items:
maybe_named_param -> list(outer_attr) UNDERSCORE . COLON typ [ RPAREN COMMA ]
type_no_bounds -> UNDERSCORE . [ RPAREN COMMA ]
## Transitions:
-- On COLON shift to state 170
## Reductions:
-- On RPAREN COMMA
--   reduce production type_no_bounds -> UNDERSCORE

State 170:
## Known stack suffix:
## list(outer_attr) UNDERSCORE COLON
## LR(1) items:
maybe_named_param -> list(outer_attr) UNDERSCORE COLON . typ [ RPAREN COMMA ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On IMPL shift to state 73
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 173
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On lifetime shift to state 179
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 171:
## Known stack suffix:
## type_param_bounds
## LR(1) items:
trait_object_type -> type_param_bounds . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production trait_object_type -> type_param_bounds

State 172:
## Known stack suffix:
## type_no_bounds
## LR(1) items:
typ -> type_no_bounds . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production typ -> type_no_bounds

State 173:
## Known stack suffix:
## list(outer_attr) UNDERSCORE COLON typ
## LR(1) items:
maybe_named_param -> list(outer_attr) UNDERSCORE COLON typ . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production maybe_named_param -> list(outer_attr) UNDERSCORE COLON typ

State 174:
## Known stack suffix:
## trait_object_type
## LR(1) items:
typ -> trait_object_type . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production typ -> trait_object_type

State 175:
## Known stack suffix:
## trait_bound
## LR(1) items:
type_no_bounds -> trait_bound . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
type_param_bound -> trait_bound . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production type_no_bounds -> trait_bound
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production type_param_bound -> trait_bound
** Conflict on TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS

State 176:
## Known stack suffix:
## separated_nonempty_list(PLUS,type_param_bound)
## LR(1) items:
nonempty_separated_or_terminated_list(PLUS,type_param_bound) -> separated_nonempty_list(PLUS,type_param_bound) . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production nonempty_separated_or_terminated_list(PLUS,type_param_bound) -> separated_nonempty_list(PLUS,type_param_bound)

State 177:
## Known stack suffix:
## nonempty_separated_or_terminated_list(PLUS,type_param_bound)
## LR(1) items:
type_param_bounds -> nonempty_separated_or_terminated_list(PLUS,type_param_bound) . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production type_param_bounds -> nonempty_separated_or_terminated_list(PLUS,type_param_bound)

State 178:
## Known stack suffix:
## nonempty_list(terminated(type_param_bound,PLUS))
## LR(1) items:
nonempty_separated_or_terminated_list(PLUS,type_param_bound) -> nonempty_list(terminated(type_param_bound,PLUS)) . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production nonempty_separated_or_terminated_list(PLUS,type_param_bound) -> nonempty_list(terminated(type_param_bound,PLUS))

State 179:
## Known stack suffix:
## lifetime
## LR(1) items:
type_param_bound -> lifetime . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production type_param_bound -> lifetime

State 180:
## Known stack suffix:
## impl_trait_type
## LR(1) items:
typ -> impl_trait_type . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production typ -> impl_trait_type

State 181:
## Known stack suffix:
## list(outer_attr) typ
## LR(1) items:
maybe_named_param -> list(outer_attr) typ . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production maybe_named_param -> list(outer_attr) typ

State 182:
## Known stack suffix:
## list(outer_attr) ident
## LR(1) items:
maybe_named_param -> list(outer_attr) ident . COLON typ [ RPAREN COMMA ]
## Transitions:
-- On COLON shift to state 183
## Reductions:

State 183:
## Known stack suffix:
## list(outer_attr) ident COLON
## LR(1) items:
maybe_named_param -> list(outer_attr) ident COLON . typ [ RPAREN COMMA ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On IMPL shift to state 73
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 184
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On lifetime shift to state 179
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 184:
## Known stack suffix:
## list(outer_attr) ident COLON typ
## LR(1) items:
maybe_named_param -> list(outer_attr) ident COLON typ . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production maybe_named_param -> list(outer_attr) ident COLON typ

State 185:
## Known stack suffix:
## maybe_named_function_parameters_variadic
## LR(1) items:
function_parameters_maybe_named_variadic -> maybe_named_function_parameters_variadic . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production function_parameters_maybe_named_variadic -> maybe_named_function_parameters_variadic

State 186:
## Known stack suffix:
## maybe_named_function_parameters
## LR(1) items:
function_parameters_maybe_named_variadic -> maybe_named_function_parameters . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production function_parameters_maybe_named_variadic -> maybe_named_function_parameters

State 187:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,maybe_named_param))
## LR(1) items:
separated_or_terminated_list(COMMA,maybe_named_param) -> loption(separated_nonempty_list(COMMA,maybe_named_param)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_or_terminated_list(COMMA,maybe_named_param) -> loption(separated_nonempty_list(COMMA,maybe_named_param))

State 188:
## Known stack suffix:
## list(terminated(maybe_named_param,COMMA))
## LR(1) items:
separated_or_terminated_list(COMMA,maybe_named_param) -> list(terminated(maybe_named_param,COMMA)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_or_terminated_list(COMMA,maybe_named_param) -> list(terminated(maybe_named_param,COMMA))

State 189:
## Known stack suffix:
## function_parameters_maybe_named_variadic
## LR(1) items:
option(function_parameters_maybe_named_variadic) -> function_parameters_maybe_named_variadic . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production option(function_parameters_maybe_named_variadic) -> function_parameters_maybe_named_variadic

State 190:
## Known stack suffix:
## AND option(lifetime) type_no_bounds
## LR(1) items:
reference_type -> AND option(lifetime) type_no_bounds . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production reference_type -> AND option(lifetime) type_no_bounds

State 191:
## Known stack suffix:
## lifetime
## LR(1) items:
option(lifetime) -> lifetime . [ UNSAFE UNDERSCORE SUPER STAR SELFVALUE SELFTYPE SAFE RAW_IDENT QUESTION PATHSEP NOT MUT LT LPAREN LBRACK IMPL IDENT FOR FN EXTERN DYN DOLLAR_CRATE CRATE AND ]
## Transitions:
## Reductions:
-- On UNSAFE UNDERSCORE SUPER STAR SELFVALUE SELFTYPE SAFE RAW_IDENT QUESTION PATHSEP NOT MUT LT LPAREN LBRACK IMPL IDENT FOR FN EXTERN DYN DOLLAR_CRATE CRATE AND
--   reduce production option(lifetime) -> lifetime

State 192:
## Known stack suffix:
## typ
## LR(1) items:
generic_arg -> typ . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production generic_arg -> typ

State 193:
## Known stack suffix:
## simple_path_segment
## LR(1) items:
generic_args_const -> simple_path_segment . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production generic_args_const -> simple_path_segment

State 194:
## Known stack suffix:
## LT separated_or_terminated_list(COMMA,generic_arg)
## LR(1) items:
generic_args -> LT separated_or_terminated_list(COMMA,generic_arg) . GT [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On GT shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## LT separated_or_terminated_list(COMMA,generic_arg) GT
## LR(1) items:
generic_args -> LT separated_or_terminated_list(COMMA,generic_arg) GT . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IN IF IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT C_STRING COMMA COLON CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production generic_args -> LT separated_or_terminated_list(COMMA,generic_arg) GT

State 196:
## Known stack suffix:
## separated_nonempty_list(COMMA,generic_arg)
## LR(1) items:
loption(separated_nonempty_list(COMMA,generic_arg)) -> separated_nonempty_list(COMMA,generic_arg) . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production loption(separated_nonempty_list(COMMA,generic_arg)) -> separated_nonempty_list(COMMA,generic_arg)

State 197:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,generic_arg))
## LR(1) items:
separated_or_terminated_list(COMMA,generic_arg) -> loption(separated_nonempty_list(COMMA,generic_arg)) . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production separated_or_terminated_list(COMMA,generic_arg) -> loption(separated_nonempty_list(COMMA,generic_arg))

State 198:
## Known stack suffix:
## literal_expression
## LR(1) items:
generic_args_const -> literal_expression . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production generic_args_const -> literal_expression

State 199:
## Known stack suffix:
## list(terminated(generic_arg,COMMA))
## LR(1) items:
separated_or_terminated_list(COMMA,generic_arg) -> list(terminated(generic_arg,COMMA)) . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production separated_or_terminated_list(COMMA,generic_arg) -> list(terminated(generic_arg,COMMA))

State 200:
## Known stack suffix:
## lifetime
## LR(1) items:
generic_arg -> lifetime . [ GT COMMA ]
type_param_bound -> lifetime . [ PLUS GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production generic_arg -> lifetime
-- On PLUS GT COMMA
--   reduce production type_param_bound -> lifetime
** Conflict on GT COMMA

State 201:
## Known stack suffix:
## ident
## LR(1) items:
generic_args_binding -> ident . option(generic_args) EQ typ [ GT COMMA ]
generic_args_bounds -> ident . option(generic_args) EQ type_param_bounds [ GT COMMA ]
simple_path_segment -> ident . [ GT COMMA ]
## Transitions:
-- On LT shift to state 106
-- On option(generic_args) shift to state 202
-- On generic_args shift to state 206
## Reductions:
-- On EQ
--   reduce production option(generic_args) ->
-- On GT COMMA
--   reduce production simple_path_segment -> ident

State 202:
## Known stack suffix:
## ident option(generic_args)
## LR(1) items:
generic_args_binding -> ident option(generic_args) . EQ typ [ GT COMMA ]
generic_args_bounds -> ident option(generic_args) . EQ type_param_bounds [ GT COMMA ]
## Transitions:
-- On EQ shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## ident option(generic_args) EQ
## LR(1) items:
generic_args_binding -> ident option(generic_args) EQ . typ [ GT COMMA ]
generic_args_bounds -> ident option(generic_args) EQ . type_param_bounds [ GT COMMA ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On IMPL shift to state 73
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 204
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 205
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On lifetime shift to state 179
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 204:
## Known stack suffix:
## ident option(generic_args) EQ type_param_bounds
## LR(1) items:
generic_args_bounds -> ident option(generic_args) EQ type_param_bounds . [ GT COMMA ]
trait_object_type -> type_param_bounds . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production generic_args_bounds -> ident option(generic_args) EQ type_param_bounds
-- On GT COMMA
--   reduce production trait_object_type -> type_param_bounds
** Conflict on GT COMMA

State 205:
## Known stack suffix:
## ident option(generic_args) EQ typ
## LR(1) items:
generic_args_binding -> ident option(generic_args) EQ typ . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production generic_args_binding -> ident option(generic_args) EQ typ

State 206:
## Known stack suffix:
## generic_args
## LR(1) items:
option(generic_args) -> generic_args . [ EQ ]
## Transitions:
## Reductions:
-- On EQ
--   reduce production option(generic_args) -> generic_args

State 207:
## Known stack suffix:
## generic_args_const
## LR(1) items:
generic_arg -> generic_args_const . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production generic_arg -> generic_args_const

State 208:
## Known stack suffix:
## generic_args_bounds
## LR(1) items:
generic_arg -> generic_args_bounds . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production generic_arg -> generic_args_bounds

State 209:
## Known stack suffix:
## generic_args_binding
## LR(1) items:
generic_arg -> generic_args_binding . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production generic_arg -> generic_args_binding

State 210:
## Known stack suffix:
## generic_arg
## LR(1) items:
list(terminated(generic_arg,COMMA)) -> generic_arg . COMMA list(terminated(generic_arg,COMMA)) [ GT ]
separated_nonempty_list(COMMA,generic_arg) -> generic_arg . [ GT ]
separated_nonempty_list(COMMA,generic_arg) -> generic_arg . COMMA separated_nonempty_list(COMMA,generic_arg) [ GT ]
## Transitions:
-- On COMMA shift to state 211
## Reductions:
-- On GT
--   reduce production separated_nonempty_list(COMMA,generic_arg) -> generic_arg

State 211:
## Known stack suffix:
## generic_arg COMMA
## LR(1) items:
list(terminated(generic_arg,COMMA)) -> generic_arg COMMA . list(terminated(generic_arg,COMMA)) [ GT ]
separated_nonempty_list(COMMA,generic_arg) -> generic_arg COMMA . separated_nonempty_list(COMMA,generic_arg) [ GT ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On TRUE shift to state 31
-- On SUPER shift to state 16
-- On STRING_LIT shift to state 32
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On SELFVALUE shift to state 17
-- On RAW_STRING_LIT shift to state 35
-- On RAW_IDENT shift to state 18
-- On RAW_C_STRING shift to state 37
-- On RAW_BYTE_STRING shift to state 39
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On MINUS shift to state 107
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IMPL shift to state 73
-- On IDENT shift to state 19
-- On FOR shift to state 75
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On DOLLAR_CRATE shift to state 20
-- On C_STRING shift to state 111
-- On CRATE shift to state 21
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 192
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On simple_path_segment shift to state 193
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On separated_nonempty_list(COMMA,generic_arg) shift to state 212
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On literal_expression shift to state 198
-- On list(terminated(generic_arg,COMMA)) shift to state 213
-- On lifetime shift to state 200
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On ident shift to state 201
-- On generic_args_const shift to state 207
-- On generic_args_bounds shift to state 208
-- On generic_args_binding shift to state 209
-- On generic_arg shift to state 210
-- On for_lifetimes shift to state 156
-- On block_expression shift to state 214
-- On bare_function_type shift to state 157
## Reductions:
-- On GT
--   reduce production list(terminated(generic_arg,COMMA)) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 212:
## Known stack suffix:
## generic_arg COMMA separated_nonempty_list(COMMA,generic_arg)
## LR(1) items:
separated_nonempty_list(COMMA,generic_arg) -> generic_arg COMMA separated_nonempty_list(COMMA,generic_arg) . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production separated_nonempty_list(COMMA,generic_arg) -> generic_arg COMMA separated_nonempty_list(COMMA,generic_arg)

State 213:
## Known stack suffix:
## generic_arg COMMA list(terminated(generic_arg,COMMA))
## LR(1) items:
list(terminated(generic_arg,COMMA)) -> generic_arg COMMA list(terminated(generic_arg,COMMA)) . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production list(terminated(generic_arg,COMMA)) -> generic_arg COMMA list(terminated(generic_arg,COMMA))

State 214:
## Known stack suffix:
## block_expression
## LR(1) items:
generic_args_const -> block_expression . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production generic_args_const -> block_expression

State 215:
## Known stack suffix:
## LPAREN
## LR(1) items:
type_path_fn -> LPAREN . option(type_path_fn_inputs) RPAREN option(rarrow_no_bounds) [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On IMPL shift to state 73
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path_fn_inputs shift to state 216
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 217
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On separated_nonempty_list(COMMA,typ) shift to state 221
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(type_path_fn_inputs) shift to state 222
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_separated_or_terminated_list(COMMA,typ) shift to state 228
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On nonempty_list(terminated(typ,COMMA)) shift to state 229
-- On lifetime shift to state 179
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
-- On RPAREN
--   reduce production option(type_path_fn_inputs) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 216:
## Known stack suffix:
## type_path_fn_inputs
## LR(1) items:
option(type_path_fn_inputs) -> type_path_fn_inputs . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production option(type_path_fn_inputs) -> type_path_fn_inputs

State 217:
## Known stack suffix:
## typ
## LR(1) items:
nonempty_list(terminated(typ,COMMA)) -> typ . COMMA [ RPAREN ]
nonempty_list(terminated(typ,COMMA)) -> typ . COMMA nonempty_list(terminated(typ,COMMA)) [ RPAREN ]
separated_nonempty_list(COMMA,typ) -> typ . [ RPAREN ]
separated_nonempty_list(COMMA,typ) -> typ . COMMA separated_nonempty_list(COMMA,typ) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 218
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,typ) -> typ

State 218:
## Known stack suffix:
## typ COMMA
## LR(1) items:
nonempty_list(terminated(typ,COMMA)) -> typ COMMA . [ RPAREN ]
nonempty_list(terminated(typ,COMMA)) -> typ COMMA . nonempty_list(terminated(typ,COMMA)) [ RPAREN ]
separated_nonempty_list(COMMA,typ) -> typ COMMA . separated_nonempty_list(COMMA,typ) [ RPAREN ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On IMPL shift to state 73
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 217
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On separated_nonempty_list(COMMA,typ) shift to state 219
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On nonempty_list(terminated(typ,COMMA)) shift to state 220
-- On lifetime shift to state 179
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On RPAREN
--   reduce production nonempty_list(terminated(typ,COMMA)) -> typ COMMA
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 219:
## Known stack suffix:
## typ COMMA separated_nonempty_list(COMMA,typ)
## LR(1) items:
separated_nonempty_list(COMMA,typ) -> typ COMMA separated_nonempty_list(COMMA,typ) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,typ) -> typ COMMA separated_nonempty_list(COMMA,typ)

State 220:
## Known stack suffix:
## typ COMMA nonempty_list(terminated(typ,COMMA))
## LR(1) items:
nonempty_list(terminated(typ,COMMA)) -> typ COMMA nonempty_list(terminated(typ,COMMA)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production nonempty_list(terminated(typ,COMMA)) -> typ COMMA nonempty_list(terminated(typ,COMMA))

State 221:
## Known stack suffix:
## separated_nonempty_list(COMMA,typ)
## LR(1) items:
nonempty_separated_or_terminated_list(COMMA,typ) -> separated_nonempty_list(COMMA,typ) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production nonempty_separated_or_terminated_list(COMMA,typ) -> separated_nonempty_list(COMMA,typ)

State 222:
## Known stack suffix:
## LPAREN option(type_path_fn_inputs)
## LR(1) items:
type_path_fn -> LPAREN option(type_path_fn_inputs) . RPAREN option(rarrow_no_bounds) [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On RPAREN shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## LPAREN option(type_path_fn_inputs) RPAREN
## LR(1) items:
type_path_fn -> LPAREN option(type_path_fn_inputs) RPAREN . option(rarrow_no_bounds) [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On RARROW shift to state 224
-- On rarrow_no_bounds shift to state 226
-- On option(rarrow_no_bounds) shift to state 227
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production option(rarrow_no_bounds) ->

State 224:
## Known stack suffix:
## RARROW
## LR(1) items:
rarrow_no_bounds -> RARROW . type_no_bounds [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNDERSCORE shift to state 47
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LBRACK shift to state 72
-- On IMPL shift to state 119
-- On FOR shift to state 75
-- On DYN shift to state 122
-- On AND shift to state 116
-- On type_path shift to state 124
-- On type_no_bounds shift to state 225
-- On tuple_type shift to state 126
-- On trait_bound shift to state 127
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On impl_trait_type_one_bound shift to state 155
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 225:
## Known stack suffix:
## RARROW type_no_bounds
## LR(1) items:
rarrow_no_bounds -> RARROW type_no_bounds . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production rarrow_no_bounds -> RARROW type_no_bounds

State 226:
## Known stack suffix:
## rarrow_no_bounds
## LR(1) items:
option(rarrow_no_bounds) -> rarrow_no_bounds . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production option(rarrow_no_bounds) -> rarrow_no_bounds

State 227:
## Known stack suffix:
## LPAREN option(type_path_fn_inputs) RPAREN option(rarrow_no_bounds)
## LR(1) items:
type_path_fn -> LPAREN option(type_path_fn_inputs) RPAREN option(rarrow_no_bounds) . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_path_fn -> LPAREN option(type_path_fn_inputs) RPAREN option(rarrow_no_bounds)

State 228:
## Known stack suffix:
## nonempty_separated_or_terminated_list(COMMA,typ)
## LR(1) items:
type_path_fn_inputs -> nonempty_separated_or_terminated_list(COMMA,typ) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production type_path_fn_inputs -> nonempty_separated_or_terminated_list(COMMA,typ)

State 229:
## Known stack suffix:
## nonempty_list(terminated(typ,COMMA))
## LR(1) items:
nonempty_separated_or_terminated_list(COMMA,typ) -> nonempty_list(terminated(typ,COMMA)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production nonempty_separated_or_terminated_list(COMMA,typ) -> nonempty_list(terminated(typ,COMMA))

State 230:
## Known stack suffix:
## option(PATHSEP) type_path_fn
## LR(1) items:
path_gen_path_fn -> option(PATHSEP) type_path_fn . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production path_gen_path_fn -> option(PATHSEP) type_path_fn

State 231:
## Known stack suffix:
## option(PATHSEP) generic_args
## LR(1) items:
path_gen_path_fn -> option(PATHSEP) generic_args . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production path_gen_path_fn -> option(PATHSEP) generic_args

State 232:
## Known stack suffix:
## option(PATHSEP) separated_nonempty_list(PATHSEP,type_path_segment)
## LR(1) items:
type_path -> option(PATHSEP) separated_nonempty_list(PATHSEP,type_path_segment) . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_path -> option(PATHSEP) separated_nonempty_list(PATHSEP,type_path_segment)

State 233:
## Known stack suffix:
## type_param_bound PLUS nonempty_list(terminated(type_param_bound,PLUS))
## LR(1) items:
nonempty_list(terminated(type_param_bound,PLUS)) -> type_param_bound PLUS nonempty_list(terminated(type_param_bound,PLUS)) . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production nonempty_list(terminated(type_param_bound,PLUS)) -> type_param_bound PLUS nonempty_list(terminated(type_param_bound,PLUS))

State 234:
## Known stack suffix:
## DYN trait_bound
## LR(1) items:
type_no_bounds -> DYN trait_bound . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
type_param_bound -> trait_bound . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production type_no_bounds -> DYN trait_bound
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production type_param_bound -> trait_bound
** Conflict on TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS

State 235:
## Known stack suffix:
## CONST ident COLON typ
## LR(1) items:
const_param -> CONST ident COLON typ . option(const_param_body) [ GT COMMA ]
## Transitions:
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On RAW_STRING_LIT shift to state 35
-- On RAW_IDENT shift to state 18
-- On RAW_C_STRING shift to state 37
-- On RAW_BYTE_STRING shift to state 39
-- On INT_LIT shift to state 108
-- On IDENT shift to state 19
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On EQ shift to state 236
-- On C_STRING shift to state 111
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On option(const_param_body) shift to state 238
-- On literal_expression shift to state 239
-- On ident shift to state 240
-- On const_param_body shift to state 241
## Reductions:
-- On GT COMMA
--   reduce production option(const_param_body) ->

State 236:
## Known stack suffix:
## EQ
## LR(1) items:
const_param_body -> EQ . block_expression [ GT COMMA ]
## Transitions:
-- On LBRACE shift to state 8
-- On block_expression shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## EQ block_expression
## LR(1) items:
const_param_body -> EQ block_expression . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production const_param_body -> EQ block_expression

State 238:
## Known stack suffix:
## CONST ident COLON typ option(const_param_body)
## LR(1) items:
const_param -> CONST ident COLON typ option(const_param_body) . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production const_param -> CONST ident COLON typ option(const_param_body)

State 239:
## Known stack suffix:
## literal_expression
## LR(1) items:
const_param_body -> literal_expression . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production const_param_body -> literal_expression

State 240:
## Known stack suffix:
## ident
## LR(1) items:
const_param_body -> ident . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production const_param_body -> ident

State 241:
## Known stack suffix:
## const_param_body
## LR(1) items:
option(const_param_body) -> const_param_body . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production option(const_param_body) -> const_param_body

State 242:
## Known stack suffix:
## list(outer_attr) type_param
## LR(1) items:
generic_param -> list(outer_attr) type_param . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production generic_param -> list(outer_attr) type_param

State 243:
## Known stack suffix:
## list(outer_attr) lifetime_param
## LR(1) items:
generic_param -> list(outer_attr) lifetime_param . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production generic_param -> list(outer_attr) lifetime_param

State 244:
## Known stack suffix:
## lifetime
## LR(1) items:
lifetime_param -> lifetime . [ GT COMMA ]
lifetime_param -> lifetime . COLON option(lifetime_bounds) [ GT COMMA ]
## Transitions:
-- On COLON shift to state 245
## Reductions:
-- On GT COMMA
--   reduce production lifetime_param -> lifetime

State 245:
## Known stack suffix:
## lifetime COLON
## LR(1) items:
lifetime_param -> lifetime COLON . option(lifetime_bounds) [ GT COMMA ]
## Transitions:
-- On STATIC_LIFETIME shift to state 55
-- On LIFETIME_OR_LABEL shift to state 57
-- On ELIDED_LIFETIME shift to state 59
-- On separated_or_terminated_list(PLUS,lifetime) shift to state 246
-- On separated_nonempty_list(PLUS,lifetime) shift to state 247
-- On option(lifetime_bounds) shift to state 248
-- On loption(separated_nonempty_list(PLUS,lifetime)) shift to state 249
-- On list(terminated(lifetime,PLUS)) shift to state 250
-- On lifetime_bounds shift to state 251
-- On lifetime shift to state 252
## Reductions:
-- On GT COMMA
--   reduce production list(terminated(lifetime,PLUS)) ->
-- On GT COMMA
--   reduce production loption(separated_nonempty_list(PLUS,lifetime)) ->
-- On GT COMMA
--   reduce production option(lifetime_bounds) ->
** Conflict on GT COMMA

State 246:
## Known stack suffix:
## separated_or_terminated_list(PLUS,lifetime)
## LR(1) items:
lifetime_bounds -> separated_or_terminated_list(PLUS,lifetime) . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production lifetime_bounds -> separated_or_terminated_list(PLUS,lifetime)

State 247:
## Known stack suffix:
## separated_nonempty_list(PLUS,lifetime)
## LR(1) items:
loption(separated_nonempty_list(PLUS,lifetime)) -> separated_nonempty_list(PLUS,lifetime) . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production loption(separated_nonempty_list(PLUS,lifetime)) -> separated_nonempty_list(PLUS,lifetime)

State 248:
## Known stack suffix:
## lifetime COLON option(lifetime_bounds)
## LR(1) items:
lifetime_param -> lifetime COLON option(lifetime_bounds) . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production lifetime_param -> lifetime COLON option(lifetime_bounds)

State 249:
## Known stack suffix:
## loption(separated_nonempty_list(PLUS,lifetime))
## LR(1) items:
separated_or_terminated_list(PLUS,lifetime) -> loption(separated_nonempty_list(PLUS,lifetime)) . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production separated_or_terminated_list(PLUS,lifetime) -> loption(separated_nonempty_list(PLUS,lifetime))

State 250:
## Known stack suffix:
## list(terminated(lifetime,PLUS))
## LR(1) items:
separated_or_terminated_list(PLUS,lifetime) -> list(terminated(lifetime,PLUS)) . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production separated_or_terminated_list(PLUS,lifetime) -> list(terminated(lifetime,PLUS))

State 251:
## Known stack suffix:
## lifetime_bounds
## LR(1) items:
option(lifetime_bounds) -> lifetime_bounds . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production option(lifetime_bounds) -> lifetime_bounds

State 252:
## Known stack suffix:
## lifetime
## LR(1) items:
list(terminated(lifetime,PLUS)) -> lifetime . PLUS list(terminated(lifetime,PLUS)) [ GT COMMA ]
separated_nonempty_list(PLUS,lifetime) -> lifetime . [ GT COMMA ]
separated_nonempty_list(PLUS,lifetime) -> lifetime . PLUS separated_nonempty_list(PLUS,lifetime) [ GT COMMA ]
## Transitions:
-- On PLUS shift to state 253
## Reductions:
-- On GT COMMA
--   reduce production separated_nonempty_list(PLUS,lifetime) -> lifetime

State 253:
## Known stack suffix:
## lifetime PLUS
## LR(1) items:
list(terminated(lifetime,PLUS)) -> lifetime PLUS . list(terminated(lifetime,PLUS)) [ GT COMMA ]
separated_nonempty_list(PLUS,lifetime) -> lifetime PLUS . separated_nonempty_list(PLUS,lifetime) [ GT COMMA ]
## Transitions:
-- On STATIC_LIFETIME shift to state 55
-- On LIFETIME_OR_LABEL shift to state 57
-- On ELIDED_LIFETIME shift to state 59
-- On separated_nonempty_list(PLUS,lifetime) shift to state 254
-- On list(terminated(lifetime,PLUS)) shift to state 255
-- On lifetime shift to state 252
## Reductions:
-- On GT COMMA
--   reduce production list(terminated(lifetime,PLUS)) ->

State 254:
## Known stack suffix:
## lifetime PLUS separated_nonempty_list(PLUS,lifetime)
## LR(1) items:
separated_nonempty_list(PLUS,lifetime) -> lifetime PLUS separated_nonempty_list(PLUS,lifetime) . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production separated_nonempty_list(PLUS,lifetime) -> lifetime PLUS separated_nonempty_list(PLUS,lifetime)

State 255:
## Known stack suffix:
## lifetime PLUS list(terminated(lifetime,PLUS))
## LR(1) items:
list(terminated(lifetime,PLUS)) -> lifetime PLUS list(terminated(lifetime,PLUS)) . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production list(terminated(lifetime,PLUS)) -> lifetime PLUS list(terminated(lifetime,PLUS))

State 256:
## Known stack suffix:
## ident
## LR(1) items:
type_param -> ident . option(eq_typ) [ GT COMMA ]
type_param -> ident . option(type_param_bounds) option(eq_typ) [ GT COMMA ]
## Transitions:
-- On USE shift to state 53
-- On STATIC_LIFETIME shift to state 55
-- On QUESTION shift to state 50
-- On LPAREN shift to state 74
-- On LIFETIME_OR_LABEL shift to state 57
-- On FOR shift to state 75
-- On EQ shift to state 257
-- On ELIDED_LIFETIME shift to state 59
-- On use_bound shift to state 85
-- On type_param_bounds shift to state 259
-- On type_param_bound shift to state 87
-- On trait_bound shift to state 89
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On option(type_param_bounds) shift to state 260
-- On option(question_or_for) shift to state 91
-- On option(eq_typ) shift to state 263
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On lifetime shift to state 179
-- On for_lifetimes shift to state 121
-- On eq_typ shift to state 262
## Reductions:
-- On GT COMMA
--   reduce production option(eq_typ) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
-- On GT EQ COMMA
--   reduce production option(type_param_bounds) ->
** Conflict on GT EQ COMMA

State 257:
## Known stack suffix:
## EQ
## LR(1) items:
eq_typ -> EQ . typ [ GT COMMA ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On IMPL shift to state 73
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 258
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On lifetime shift to state 179
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 258:
## Known stack suffix:
## EQ typ
## LR(1) items:
eq_typ -> EQ typ . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production eq_typ -> EQ typ

State 259:
## Known stack suffix:
## type_param_bounds
## LR(1) items:
option(type_param_bounds) -> type_param_bounds . [ GT EQ COMMA ]
## Transitions:
## Reductions:
-- On GT EQ COMMA
--   reduce production option(type_param_bounds) -> type_param_bounds

State 260:
## Known stack suffix:
## ident option(type_param_bounds)
## LR(1) items:
type_param -> ident option(type_param_bounds) . option(eq_typ) [ GT COMMA ]
## Transitions:
-- On EQ shift to state 257
-- On option(eq_typ) shift to state 261
-- On eq_typ shift to state 262
## Reductions:
-- On GT COMMA
--   reduce production option(eq_typ) ->

State 261:
## Known stack suffix:
## ident option(type_param_bounds) option(eq_typ)
## LR(1) items:
type_param -> ident option(type_param_bounds) option(eq_typ) . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production type_param -> ident option(type_param_bounds) option(eq_typ)

State 262:
## Known stack suffix:
## eq_typ
## LR(1) items:
option(eq_typ) -> eq_typ . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production option(eq_typ) -> eq_typ

State 263:
## Known stack suffix:
## ident option(eq_typ)
## LR(1) items:
type_param -> ident option(eq_typ) . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production type_param -> ident option(eq_typ)

State 264:
## Known stack suffix:
## list(outer_attr) const_param
## LR(1) items:
generic_param -> list(outer_attr) const_param . [ GT COMMA ]
## Transitions:
## Reductions:
-- On GT COMMA
--   reduce production generic_param -> list(outer_attr) const_param

State 265:
## Known stack suffix:
## generic_param
## LR(1) items:
separated_nonempty_list(COMMA,generic_param) -> generic_param . [ GT ]
separated_nonempty_list(COMMA,generic_param) -> generic_param . COMMA separated_nonempty_list(COMMA,generic_param) [ GT ]
## Transitions:
-- On COMMA shift to state 266
## Reductions:
-- On GT
--   reduce production separated_nonempty_list(COMMA,generic_param) -> generic_param

State 266:
## Known stack suffix:
## generic_param COMMA
## LR(1) items:
separated_nonempty_list(COMMA,generic_param) -> generic_param COMMA . separated_nonempty_list(COMMA,generic_param) [ GT ]
## Transitions:
-- On POUND shift to state 1
-- On separated_nonempty_list(COMMA,generic_param) shift to state 267
-- On outer_attr shift to state 42
-- On list(outer_attr) shift to state 80
-- On generic_param shift to state 265
## Reductions:
-- On STATIC_LIFETIME RAW_IDENT LIFETIME_OR_LABEL IDENT ELIDED_LIFETIME CONST
--   reduce production list(outer_attr) ->

State 267:
## Known stack suffix:
## generic_param COMMA separated_nonempty_list(COMMA,generic_param)
## LR(1) items:
separated_nonempty_list(COMMA,generic_param) -> generic_param COMMA separated_nonempty_list(COMMA,generic_param) . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production separated_nonempty_list(COMMA,generic_param) -> generic_param COMMA separated_nonempty_list(COMMA,generic_param)

State 268:
## Known stack suffix:
## FOR generic_params
## LR(1) items:
for_lifetimes -> FOR generic_params . [ UNSAFE SUPER SELFVALUE SELFTYPE SAFE RAW_IDENT PATHSEP IDENT FN EXTERN DOLLAR_CRATE CRATE ]
## Transitions:
## Reductions:
-- On UNSAFE SUPER SELFVALUE SELFTYPE SAFE RAW_IDENT PATHSEP IDENT FN EXTERN DOLLAR_CRATE CRATE
--   reduce production for_lifetimes -> FOR generic_params

State 269:
## Known stack suffix:
## LPAREN option(question_or_for)
## LR(1) items:
trait_bound -> LPAREN option(question_or_for) . type_path RPAREN [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On PATHSEP shift to state 4
-- On type_path shift to state 270
-- On option(PATHSEP) shift to state 93
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->

State 270:
## Known stack suffix:
## LPAREN option(question_or_for) type_path
## LR(1) items:
trait_bound -> LPAREN option(question_or_for) type_path . RPAREN [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On RPAREN shift to state 271
## Reductions:

State 271:
## Known stack suffix:
## LPAREN option(question_or_for) type_path RPAREN
## LR(1) items:
trait_bound -> LPAREN option(question_or_for) type_path RPAREN . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production trait_bound -> LPAREN option(question_or_for) type_path RPAREN

State 272:
## Known stack suffix:
## IMPL type_param_bounds
## LR(1) items:
impl_trait_type -> IMPL type_param_bounds . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production impl_trait_type -> IMPL type_param_bounds

State 273:
## Known stack suffix:
## IMPL trait_bound
## LR(1) items:
impl_trait_type_one_bound -> IMPL trait_bound . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
type_param_bound -> trait_bound . [ TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ]
## Transitions:
## Reductions:
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production impl_trait_type_one_bound -> IMPL trait_bound
-- On TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PLUS OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS
--   reduce production type_param_bound -> trait_bound
** Conflict on TRUE STRING_LIT SEMI RPAREN RBRACK RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING OR INT_LIT IDENT GT FLOAT_LIT FALSE EQ C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS

State 274:
## Known stack suffix:
## LBRACK typ
## LR(1) items:
type_no_bounds -> LBRACK typ . SEMI expression RBRACK [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
type_no_bounds -> LBRACK typ . RBRACK [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On SEMI shift to state 275
-- On RBRACK shift to state 710
## Reductions:

State 275:
## Known stack suffix:
## LBRACK typ SEMI
## LR(1) items:
type_no_bounds -> LBRACK typ SEMI . expression RBRACK [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 708
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 276:
## Known stack suffix:
## NOT
## LR(1) items:
operator_expression -> NOT . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 707
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 277:
## Known stack suffix:
## MOVE
## LR(1) items:
closure_expression -> MOVE . OR option(closure_params) OR expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On OR shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## MOVE OR
## LR(1) items:
closure_expression -> MOVE OR . option(closure_params) OR expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On POUND shift to state 1
-- On separated_nonempty_list(COMMA,closure_param) shift to state 41
-- On outer_attr shift to state 42
-- On option(closure_params) shift to state 279
-- On nonempty_separated_or_terminated_list(COMMA,closure_param) shift to state 625
-- On nonempty_list(terminated(closure_param,COMMA)) shift to state 626
-- On list(outer_attr) shift to state 627
-- On closure_params shift to state 633
-- On closure_param shift to state 634
## Reductions:
-- On UNDERSCORE TRUE SUPER STRING_LIT SELFVALUE SELFTYPE REF RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PATHSEP MUT MINUS LT LPAREN LBRACK INT_LIT IDENT FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CHAR_LIT BYTE_STRING BYTE ANDAND AND
--   reduce production list(outer_attr) ->
-- On OR
--   reduce production option(closure_params) ->

State 279:
## Known stack suffix:
## MOVE OR option(closure_params)
## LR(1) items:
closure_expression -> MOVE OR option(closure_params) . OR expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On OR shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## MOVE OR option(closure_params) OR
## LR(1) items:
closure_expression -> MOVE OR option(closure_params) OR . expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On RARROW shift to state 46
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 623
-- On expr_or_typ_block shift to state 706
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 281:
## Known stack suffix:
## MINUS
## LR(1) items:
operator_expression -> MINUS . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 705
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 282:
## Known stack suffix:
## MATCH
## LR(1) items:
match_expression -> MATCH . scrutinee LBRACE list(inner_attr) option(match_arms) RBRACE [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On scrutinee shift to state 676
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 579
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 283:
## Known stack suffix:
## LPAREN
## LR(1) items:
grouped_expression -> LPAREN . expression RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_expression -> LPAREN . option(tuple_elements) RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On tuple_elements shift to state 670
-- On struct_expression shift to state 455
-- On separated_nonempty_list(COMMA,expression) shift to state 671
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(tuple_elements) shift to state 672
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 674
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
-- On RPAREN
--   reduce production option(tuple_elements) ->
** Conflict on LBRACE

State 284:
## Known stack suffix:
## LIFETIME_OR_LABEL
## LR(1) items:
loop_label -> LIFETIME_OR_LABEL . COLON [ WHILE LOOP LBRACE FOR ]
## Transitions:
-- On COLON shift to state 285
## Reductions:

State 285:
## Known stack suffix:
## LIFETIME_OR_LABEL COLON
## LR(1) items:
loop_label -> LIFETIME_OR_LABEL COLON . [ WHILE LOOP LBRACE FOR ]
## Transitions:
## Reductions:
-- On WHILE LOOP LBRACE FOR
--   reduce production loop_label -> LIFETIME_OR_LABEL COLON

State 286:
## Known stack suffix:
## LBRACK
## LR(1) items:
array_expression -> LBRACK . array_elements RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On separated_nonempty_list(COMMA,expression) shift to state 659
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_separated_or_terminated_list(COMMA,expression) shift to state 660
-- On nonempty_list(terminated(expression,COMMA)) shift to state 661
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 662
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
-- On array_elements shift to state 668
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 287:
## Known stack suffix:
## IF
## LR(1) items:
if_expression -> IF . expression block_expression else_opt [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
if_let_expression -> IF . LET pattern EQ expression block_expression else_opt [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LET shift to state 288
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 656
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 288:
## Known stack suffix:
## IF LET
## LR(1) items:
if_let_expression -> IF LET . pattern EQ expression block_expression else_opt [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On OR shift to state 289
-- On pattern shift to state 435
## Reductions:

State 289:
## Known stack suffix:
## OR
## LR(1) items:
pattern -> OR . separated_nonempty_list(OR,pattern_no_top_alt) [ RPAREN RBRACK IN IF FATARROW EQ COMMA ]
## Transitions:
-- On UNDERSCORE shift to state 290
-- On TRUE shift to state 291
-- On STRING_LIT shift to state 292
-- On REF shift to state 293
-- On RAW_STRING_LIT shift to state 297
-- On RAW_IDENT shift to state 18
-- On RAW_C_STRING shift to state 298
-- On RAW_BYTE_STRING shift to state 299
-- On PATHSEP shift to state 4
-- On MUT shift to state 300
-- On MINUS shift to state 304
-- On LT shift to state 52
-- On LPAREN shift to state 307
-- On LBRACK shift to state 319
-- On INT_LIT shift to state 324
-- On IDENT shift to state 19
-- On FLOAT_LIT shift to state 325
-- On FALSE shift to state 326
-- On DOTDOTEQ shift to state 327
-- On DOTDOT shift to state 347
-- On C_STRING shift to state 348
-- On CHAR_LIT shift to state 349
-- On BYTE_STRING shift to state 350
-- On BYTE shift to state 330
-- On ANDAND shift to state 351
-- On AND shift to state 355
-- On tuple_struct_pattern shift to state 357
-- On tuple_pattern shift to state 358
-- On struct_pattern shift to state 359
-- On separated_nonempty_list(OR,pattern_no_top_alt) shift to state 431
-- On range_to_inclusive_pattern shift to state 414
-- On range_pattern_bound shift to state 415
-- On range_pattern shift to state 421
-- On range_inclusive_pattern shift to state 422
-- On range_from_pattern shift to state 423
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On pattern_no_top_alt shift to state 432
-- On path_in_expression shift to state 360
-- On path_expression shift to state 425
-- On option(PATHSEP) shift to state 345
-- On obsolete_range_pattern shift to state 426
-- On no_range_pattern shift to state 427
-- On neg shift to state 402
-- On literal_pattern shift to state 405
-- On identifier_pattern shift to state 406
-- On ident shift to state 410
## Reductions:
-- On INT_LIT FLOAT_LIT
--   reduce production neg ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
** Conflict on RAW_IDENT INT_LIT IDENT FLOAT_LIT

State 290:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
no_range_pattern -> UNDERSCORE . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> UNDERSCORE

State 291:
## Known stack suffix:
## TRUE
## LR(1) items:
literal_pattern -> TRUE . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production literal_pattern -> TRUE

State 292:
## Known stack suffix:
## STRING_LIT
## LR(1) items:
literal_pattern -> STRING_LIT . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production literal_pattern -> STRING_LIT

State 293:
## Known stack suffix:
## REF
## LR(1) items:
identifier_pattern -> REF . MUT ident option(pat_at) [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
identifier_pattern -> REF . ident option(pat_at) [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On RAW_IDENT shift to state 18
-- On MUT shift to state 294
-- On IDENT shift to state 19
-- On ident shift to state 429
## Reductions:

State 294:
## Known stack suffix:
## REF MUT
## LR(1) items:
identifier_pattern -> REF MUT . ident option(pat_at) [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On ident shift to state 295
## Reductions:

State 295:
## Known stack suffix:
## REF MUT ident
## LR(1) items:
identifier_pattern -> REF MUT ident . option(pat_at) [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On AT shift to state 296
-- On pat_at shift to state 302
-- On option(pat_at) shift to state 428
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production option(pat_at) ->

State 296:
## Known stack suffix:
## AT
## LR(1) items:
pat_at -> AT . pattern_no_top_alt [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On UNDERSCORE shift to state 290
-- On TRUE shift to state 291
-- On STRING_LIT shift to state 292
-- On REF shift to state 293
-- On RAW_STRING_LIT shift to state 297
-- On RAW_IDENT shift to state 18
-- On RAW_C_STRING shift to state 298
-- On RAW_BYTE_STRING shift to state 299
-- On PATHSEP shift to state 4
-- On MUT shift to state 300
-- On MINUS shift to state 304
-- On LT shift to state 52
-- On LPAREN shift to state 307
-- On LBRACK shift to state 319
-- On INT_LIT shift to state 324
-- On IDENT shift to state 19
-- On FLOAT_LIT shift to state 325
-- On FALSE shift to state 326
-- On DOTDOTEQ shift to state 327
-- On DOTDOT shift to state 347
-- On C_STRING shift to state 348
-- On CHAR_LIT shift to state 349
-- On BYTE_STRING shift to state 350
-- On BYTE shift to state 330
-- On ANDAND shift to state 351
-- On AND shift to state 355
-- On tuple_struct_pattern shift to state 357
-- On tuple_pattern shift to state 358
-- On struct_pattern shift to state 359
-- On range_to_inclusive_pattern shift to state 414
-- On range_pattern_bound shift to state 415
-- On range_pattern shift to state 421
-- On range_inclusive_pattern shift to state 422
-- On range_from_pattern shift to state 423
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On pattern_no_top_alt shift to state 424
-- On path_in_expression shift to state 360
-- On path_expression shift to state 425
-- On option(PATHSEP) shift to state 345
-- On obsolete_range_pattern shift to state 426
-- On no_range_pattern shift to state 427
-- On neg shift to state 402
-- On literal_pattern shift to state 405
-- On identifier_pattern shift to state 406
-- On ident shift to state 410
## Reductions:
-- On INT_LIT FLOAT_LIT
--   reduce production neg ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
** Conflict on RAW_IDENT INT_LIT IDENT FLOAT_LIT

State 297:
## Known stack suffix:
## RAW_STRING_LIT
## LR(1) items:
literal_pattern -> RAW_STRING_LIT . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production literal_pattern -> RAW_STRING_LIT

State 298:
## Known stack suffix:
## RAW_C_STRING
## LR(1) items:
literal_pattern -> RAW_C_STRING . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production literal_pattern -> RAW_C_STRING

State 299:
## Known stack suffix:
## RAW_BYTE_STRING
## LR(1) items:
literal_pattern -> RAW_BYTE_STRING . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production literal_pattern -> RAW_BYTE_STRING

State 300:
## Known stack suffix:
## MUT
## LR(1) items:
identifier_pattern -> MUT . ident option(pat_at) [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On ident shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## MUT ident
## LR(1) items:
identifier_pattern -> MUT ident . option(pat_at) [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On AT shift to state 296
-- On pat_at shift to state 302
-- On option(pat_at) shift to state 303
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production option(pat_at) ->

State 302:
## Known stack suffix:
## pat_at
## LR(1) items:
option(pat_at) -> pat_at . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production option(pat_at) -> pat_at

State 303:
## Known stack suffix:
## MUT ident option(pat_at)
## LR(1) items:
identifier_pattern -> MUT ident option(pat_at) . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production identifier_pattern -> MUT ident option(pat_at)

State 304:
## Known stack suffix:
## MINUS
## LR(1) items:
neg -> MINUS . [ INT_LIT FLOAT_LIT ]
range_pattern_bound -> MINUS . INT_LIT [ DOTDOTEQ DOTDOTDOT DOTDOT ]
range_pattern_bound -> MINUS . FLOAT_LIT [ DOTDOTEQ DOTDOTDOT DOTDOT ]
## Transitions:
-- On INT_LIT shift to state 305
-- On FLOAT_LIT shift to state 306
## Reductions:
-- On INT_LIT FLOAT_LIT
--   reduce production neg -> MINUS
** Conflict on INT_LIT FLOAT_LIT

State 305:
## Known stack suffix:
## MINUS INT_LIT
## LR(1) items:
range_pattern_bound -> MINUS INT_LIT . [ RPAREN RBRACK OR IN IF FATARROW EQ DOTDOTEQ DOTDOTDOT DOTDOT COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ DOTDOTEQ DOTDOTDOT DOTDOT COMMA COLON
--   reduce production range_pattern_bound -> MINUS INT_LIT

State 306:
## Known stack suffix:
## MINUS FLOAT_LIT
## LR(1) items:
range_pattern_bound -> MINUS FLOAT_LIT . [ RPAREN RBRACK OR IN IF FATARROW EQ DOTDOTEQ DOTDOTDOT DOTDOT COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ DOTDOTEQ DOTDOTDOT DOTDOT COMMA COLON
--   reduce production range_pattern_bound -> MINUS FLOAT_LIT

State 307:
## Known stack suffix:
## LPAREN
## LR(1) items:
no_range_pattern -> LPAREN . pattern RPAREN [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
tuple_pattern -> LPAREN . option(tuple_pattern_items) RPAREN [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On OR shift to state 289
-- On DOTDOT shift to state 308
-- On tuple_pattern_items shift to state 309
-- On separated_nonempty_list(COMMA,pattern) shift to state 310
-- On pattern shift to state 311
-- On option(tuple_pattern_items) shift to state 317
## Reductions:
-- On RPAREN
--   reduce production option(tuple_pattern_items) ->

State 308:
## Known stack suffix:
## DOTDOT
## LR(1) items:
tuple_pattern_items -> DOTDOT . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production tuple_pattern_items -> DOTDOT

State 309:
## Known stack suffix:
## tuple_pattern_items
## LR(1) items:
option(tuple_pattern_items) -> tuple_pattern_items . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production option(tuple_pattern_items) -> tuple_pattern_items

State 310:
## Known stack suffix:
## separated_nonempty_list(COMMA,pattern)
## LR(1) items:
tuple_pattern_items -> separated_nonempty_list(COMMA,pattern) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production tuple_pattern_items -> separated_nonempty_list(COMMA,pattern)

State 311:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
no_range_pattern -> LPAREN pattern . RPAREN [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
separated_nonempty_list(COMMA,pattern) -> pattern . [ RPAREN ]
separated_nonempty_list(COMMA,pattern) -> pattern . COMMA separated_nonempty_list(COMMA,pattern) [ RPAREN ]
tuple_pattern_items -> pattern . COMMA [ RPAREN ]
## Transitions:
-- On RPAREN shift to state 312
-- On COMMA shift to state 313
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,pattern) -> pattern
** Conflict on RPAREN

State 312:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
no_range_pattern -> LPAREN pattern RPAREN . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> LPAREN pattern RPAREN

State 313:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
separated_nonempty_list(COMMA,pattern) -> pattern COMMA . separated_nonempty_list(COMMA,pattern) [ RPAREN ]
tuple_pattern_items -> pattern COMMA . [ RPAREN ]
## Transitions:
-- On OR shift to state 289
-- On separated_nonempty_list(COMMA,pattern) shift to state 314
-- On pattern shift to state 315
## Reductions:
-- On RPAREN
--   reduce production tuple_pattern_items -> pattern COMMA

State 314:
## Known stack suffix:
## pattern COMMA separated_nonempty_list(COMMA,pattern)
## LR(1) items:
separated_nonempty_list(COMMA,pattern) -> pattern COMMA separated_nonempty_list(COMMA,pattern) . [ RPAREN RBRACK ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK
--   reduce production separated_nonempty_list(COMMA,pattern) -> pattern COMMA separated_nonempty_list(COMMA,pattern)

State 315:
## Known stack suffix:
## pattern
## LR(1) items:
separated_nonempty_list(COMMA,pattern) -> pattern . [ RPAREN RBRACK ]
separated_nonempty_list(COMMA,pattern) -> pattern . COMMA separated_nonempty_list(COMMA,pattern) [ RPAREN RBRACK ]
## Transitions:
-- On COMMA shift to state 316
## Reductions:
-- On RPAREN RBRACK
--   reduce production separated_nonempty_list(COMMA,pattern) -> pattern

State 316:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
separated_nonempty_list(COMMA,pattern) -> pattern COMMA . separated_nonempty_list(COMMA,pattern) [ RPAREN RBRACK ]
## Transitions:
-- On OR shift to state 289
-- On separated_nonempty_list(COMMA,pattern) shift to state 314
-- On pattern shift to state 315
## Reductions:

State 317:
## Known stack suffix:
## LPAREN option(tuple_pattern_items)
## LR(1) items:
tuple_pattern -> LPAREN option(tuple_pattern_items) . RPAREN [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On RPAREN shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## LPAREN option(tuple_pattern_items) RPAREN
## LR(1) items:
tuple_pattern -> LPAREN option(tuple_pattern_items) RPAREN . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production tuple_pattern -> LPAREN option(tuple_pattern_items) RPAREN

State 319:
## Known stack suffix:
## LBRACK
## LR(1) items:
no_range_pattern -> LBRACK . slice_pattern_items RBRACK [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On OR shift to state 289
-- On slice_pattern_items shift to state 320
-- On separated_nonempty_list(COMMA,pattern) shift to state 322
-- On pattern shift to state 315
-- On loption(separated_nonempty_list(COMMA,pattern)) shift to state 323
## Reductions:
-- On RBRACK
--   reduce production loption(separated_nonempty_list(COMMA,pattern)) ->

State 320:
## Known stack suffix:
## LBRACK slice_pattern_items
## LR(1) items:
no_range_pattern -> LBRACK slice_pattern_items . RBRACK [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On RBRACK shift to state 321
## Reductions:

State 321:
## Known stack suffix:
## LBRACK slice_pattern_items RBRACK
## LR(1) items:
no_range_pattern -> LBRACK slice_pattern_items RBRACK . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> LBRACK slice_pattern_items RBRACK

State 322:
## Known stack suffix:
## separated_nonempty_list(COMMA,pattern)
## LR(1) items:
loption(separated_nonempty_list(COMMA,pattern)) -> separated_nonempty_list(COMMA,pattern) . [ RPAREN RBRACK ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK
--   reduce production loption(separated_nonempty_list(COMMA,pattern)) -> separated_nonempty_list(COMMA,pattern)

State 323:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,pattern))
## LR(1) items:
slice_pattern_items -> loption(separated_nonempty_list(COMMA,pattern)) . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production slice_pattern_items -> loption(separated_nonempty_list(COMMA,pattern))

State 324:
## Known stack suffix:
## INT_LIT
## LR(1) items:
range_pattern_bound -> INT_LIT . [ RPAREN RBRACK OR IN IF FATARROW EQ DOTDOTEQ DOTDOTDOT DOTDOT COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ DOTDOTEQ DOTDOTDOT DOTDOT COMMA COLON
--   reduce production range_pattern_bound -> INT_LIT

State 325:
## Known stack suffix:
## FLOAT_LIT
## LR(1) items:
range_pattern_bound -> FLOAT_LIT . [ RPAREN RBRACK OR IN IF FATARROW EQ DOTDOTEQ DOTDOTDOT DOTDOT COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ DOTDOTEQ DOTDOTDOT DOTDOT COMMA COLON
--   reduce production range_pattern_bound -> FLOAT_LIT

State 326:
## Known stack suffix:
## FALSE
## LR(1) items:
literal_pattern -> FALSE . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production literal_pattern -> FALSE

State 327:
## Known stack suffix:
## DOTDOTEQ
## LR(1) items:
range_to_inclusive_pattern -> DOTDOTEQ . range_pattern_bound [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On PATHSEP shift to state 4
-- On MINUS shift to state 328
-- On LT shift to state 52
-- On INT_LIT shift to state 324
-- On FLOAT_LIT shift to state 325
-- On CHAR_LIT shift to state 329
-- On BYTE shift to state 330
-- On range_pattern_bound shift to state 331
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 343
-- On path_expression shift to state 344
-- On option(PATHSEP) shift to state 345
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->

State 328:
## Known stack suffix:
## MINUS
## LR(1) items:
range_pattern_bound -> MINUS . INT_LIT [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
range_pattern_bound -> MINUS . FLOAT_LIT [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On INT_LIT shift to state 305
-- On FLOAT_LIT shift to state 306
## Reductions:

State 329:
## Known stack suffix:
## CHAR_LIT
## LR(1) items:
range_pattern_bound -> CHAR_LIT . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production range_pattern_bound -> CHAR_LIT

State 330:
## Known stack suffix:
## BYTE
## LR(1) items:
range_pattern_bound -> BYTE . [ RPAREN RBRACK OR IN IF FATARROW EQ DOTDOTEQ DOTDOTDOT DOTDOT COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ DOTDOTEQ DOTDOTDOT DOTDOT COMMA COLON
--   reduce production range_pattern_bound -> BYTE

State 331:
## Known stack suffix:
## DOTDOTEQ range_pattern_bound
## LR(1) items:
range_to_inclusive_pattern -> DOTDOTEQ range_pattern_bound . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production range_to_inclusive_pattern -> DOTDOTEQ range_pattern_bound

State 332:
## Known stack suffix:
## qualified_path_type
## LR(1) items:
qualified_path_in_expression -> qualified_path_type . separated_nonempty_list(PATHSEP,path_expr_segment) [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND ]
## Transitions:
-- On SUPER shift to state 94
-- On SELFVALUE shift to state 95
-- On SELFTYPE shift to state 96
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On DOLLAR_CRATE shift to state 97
-- On CRATE shift to state 98
-- On separated_nonempty_list(PATHSEP,path_expr_segment) shift to state 333
-- On path_ident_segment shift to state 334
-- On path_expr_segment shift to state 339
-- On ident shift to state 132
## Reductions:

State 333:
## Known stack suffix:
## qualified_path_type separated_nonempty_list(PATHSEP,path_expr_segment)
## LR(1) items:
qualified_path_in_expression -> qualified_path_type separated_nonempty_list(PATHSEP,path_expr_segment) . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND
--   reduce production qualified_path_in_expression -> qualified_path_type separated_nonempty_list(PATHSEP,path_expr_segment)

State 334:
## Known stack suffix:
## path_ident_segment
## LR(1) items:
path_expr_segment -> path_ident_segment . option(path_genarg) [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND ]
## Transitions:
-- On PATHSEP shift to state 335
-- On path_genarg shift to state 337
-- On option(path_genarg) shift to state 338
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND
--   reduce production option(path_genarg) ->
** Conflict on PATHSEP

State 335:
## Known stack suffix:
## PATHSEP
## LR(1) items:
path_genarg -> PATHSEP . generic_args [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND ]
## Transitions:
-- On LT shift to state 106
-- On generic_args shift to state 336
## Reductions:

State 336:
## Known stack suffix:
## PATHSEP generic_args
## LR(1) items:
path_genarg -> PATHSEP generic_args . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND
--   reduce production path_genarg -> PATHSEP generic_args

State 337:
## Known stack suffix:
## path_genarg
## LR(1) items:
option(path_genarg) -> path_genarg . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND
--   reduce production option(path_genarg) -> path_genarg

State 338:
## Known stack suffix:
## path_ident_segment option(path_genarg)
## LR(1) items:
path_expr_segment -> path_ident_segment option(path_genarg) . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND
--   reduce production path_expr_segment -> path_ident_segment option(path_genarg)

State 339:
## Known stack suffix:
## path_expr_segment
## LR(1) items:
separated_nonempty_list(PATHSEP,path_expr_segment) -> path_expr_segment . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND ]
separated_nonempty_list(PATHSEP,path_expr_segment) -> path_expr_segment . PATHSEP separated_nonempty_list(PATHSEP,path_expr_segment) [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND ]
## Transitions:
-- On PATHSEP shift to state 340
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND
--   reduce production separated_nonempty_list(PATHSEP,path_expr_segment) -> path_expr_segment

State 340:
## Known stack suffix:
## path_expr_segment PATHSEP
## LR(1) items:
separated_nonempty_list(PATHSEP,path_expr_segment) -> path_expr_segment PATHSEP . separated_nonempty_list(PATHSEP,path_expr_segment) [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND ]
## Transitions:
-- On SUPER shift to state 94
-- On SELFVALUE shift to state 95
-- On SELFTYPE shift to state 96
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On DOLLAR_CRATE shift to state 97
-- On CRATE shift to state 98
-- On separated_nonempty_list(PATHSEP,path_expr_segment) shift to state 341
-- On path_ident_segment shift to state 334
-- On path_expr_segment shift to state 339
-- On ident shift to state 132
## Reductions:

State 341:
## Known stack suffix:
## path_expr_segment PATHSEP separated_nonempty_list(PATHSEP,path_expr_segment)
## LR(1) items:
separated_nonempty_list(PATHSEP,path_expr_segment) -> path_expr_segment PATHSEP separated_nonempty_list(PATHSEP,path_expr_segment) . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND
--   reduce production separated_nonempty_list(PATHSEP,path_expr_segment) -> path_expr_segment PATHSEP separated_nonempty_list(PATHSEP,path_expr_segment)

State 342:
## Known stack suffix:
## qualified_path_in_expression
## LR(1) items:
path_expression -> qualified_path_in_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND
--   reduce production path_expression -> qualified_path_in_expression

State 343:
## Known stack suffix:
## path_in_expression
## LR(1) items:
path_expression -> path_in_expression . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production path_expression -> path_in_expression

State 344:
## Known stack suffix:
## path_expression
## LR(1) items:
range_pattern_bound -> path_expression . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production range_pattern_bound -> path_expression

State 345:
## Known stack suffix:
## option(PATHSEP)
## LR(1) items:
path_in_expression -> option(PATHSEP) . separated_nonempty_list(PATHSEP,path_expr_segment) [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND ]
## Transitions:
-- On SUPER shift to state 94
-- On SELFVALUE shift to state 95
-- On SELFTYPE shift to state 96
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On DOLLAR_CRATE shift to state 97
-- On CRATE shift to state 98
-- On separated_nonempty_list(PATHSEP,path_expr_segment) shift to state 346
-- On path_ident_segment shift to state 334
-- On path_expr_segment shift to state 339
-- On ident shift to state 132
## Reductions:

State 346:
## Known stack suffix:
## option(PATHSEP) separated_nonempty_list(PATHSEP,path_expr_segment)
## LR(1) items:
path_in_expression -> option(PATHSEP) separated_nonempty_list(PATHSEP,path_expr_segment) . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE IN IF GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOTDOT DOTDOT DOT COMMA COLON AS ANDEQ ANDAND AND
--   reduce production path_in_expression -> option(PATHSEP) separated_nonempty_list(PATHSEP,path_expr_segment)

State 347:
## Known stack suffix:
## DOTDOT
## LR(1) items:
no_range_pattern -> DOTDOT . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> DOTDOT

State 348:
## Known stack suffix:
## C_STRING
## LR(1) items:
literal_pattern -> C_STRING . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production literal_pattern -> C_STRING

State 349:
## Known stack suffix:
## CHAR_LIT
## LR(1) items:
literal_pattern -> CHAR_LIT . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
range_pattern_bound -> CHAR_LIT . [ DOTDOTEQ DOTDOTDOT DOTDOT ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production literal_pattern -> CHAR_LIT
-- On DOTDOTEQ DOTDOTDOT DOTDOT
--   reduce production range_pattern_bound -> CHAR_LIT

State 350:
## Known stack suffix:
## BYTE_STRING
## LR(1) items:
literal_pattern -> BYTE_STRING . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production literal_pattern -> BYTE_STRING

State 351:
## Known stack suffix:
## ANDAND
## LR(1) items:
no_range_pattern -> ANDAND . MUT no_range_pattern [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
no_range_pattern -> ANDAND . no_range_pattern [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On UNDERSCORE shift to state 290
-- On TRUE shift to state 291
-- On STRING_LIT shift to state 292
-- On REF shift to state 293
-- On RAW_STRING_LIT shift to state 297
-- On RAW_IDENT shift to state 18
-- On RAW_C_STRING shift to state 298
-- On RAW_BYTE_STRING shift to state 299
-- On PATHSEP shift to state 4
-- On MUT shift to state 352
-- On MINUS shift to state 353
-- On LT shift to state 52
-- On LPAREN shift to state 307
-- On LBRACK shift to state 319
-- On IDENT shift to state 19
-- On FALSE shift to state 326
-- On DOTDOT shift to state 347
-- On C_STRING shift to state 348
-- On CHAR_LIT shift to state 354
-- On BYTE_STRING shift to state 350
-- On ANDAND shift to state 351
-- On AND shift to state 355
-- On tuple_struct_pattern shift to state 357
-- On tuple_pattern shift to state 358
-- On struct_pattern shift to state 359
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 360
-- On path_expression shift to state 400
-- On option(PATHSEP) shift to state 345
-- On no_range_pattern shift to state 413
-- On neg shift to state 402
-- On literal_pattern shift to state 405
-- On identifier_pattern shift to state 406
-- On ident shift to state 410
## Reductions:
-- On INT_LIT FLOAT_LIT
--   reduce production neg ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
** Conflict on RAW_IDENT IDENT

State 352:
## Known stack suffix:
## ANDAND MUT
## LR(1) items:
identifier_pattern -> MUT . ident option(pat_at) [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
no_range_pattern -> ANDAND MUT . no_range_pattern [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On UNDERSCORE shift to state 290
-- On TRUE shift to state 291
-- On STRING_LIT shift to state 292
-- On REF shift to state 293
-- On RAW_STRING_LIT shift to state 297
-- On RAW_IDENT shift to state 18
-- On RAW_C_STRING shift to state 298
-- On RAW_BYTE_STRING shift to state 299
-- On PATHSEP shift to state 4
-- On MUT shift to state 300
-- On MINUS shift to state 353
-- On LT shift to state 52
-- On LPAREN shift to state 307
-- On LBRACK shift to state 319
-- On IDENT shift to state 19
-- On FALSE shift to state 326
-- On DOTDOT shift to state 347
-- On C_STRING shift to state 348
-- On CHAR_LIT shift to state 354
-- On BYTE_STRING shift to state 350
-- On ANDAND shift to state 351
-- On AND shift to state 355
-- On tuple_struct_pattern shift to state 357
-- On tuple_pattern shift to state 358
-- On struct_pattern shift to state 359
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 360
-- On path_expression shift to state 400
-- On option(PATHSEP) shift to state 345
-- On no_range_pattern shift to state 412
-- On neg shift to state 402
-- On literal_pattern shift to state 405
-- On identifier_pattern shift to state 406
-- On ident shift to state 407
## Reductions:
-- On INT_LIT FLOAT_LIT
--   reduce production neg ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
** Conflict on RAW_IDENT IDENT

State 353:
## Known stack suffix:
## MINUS
## LR(1) items:
neg -> MINUS . [ INT_LIT FLOAT_LIT ]
## Transitions:
## Reductions:
-- On INT_LIT FLOAT_LIT
--   reduce production neg -> MINUS

State 354:
## Known stack suffix:
## CHAR_LIT
## LR(1) items:
literal_pattern -> CHAR_LIT . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production literal_pattern -> CHAR_LIT

State 355:
## Known stack suffix:
## AND
## LR(1) items:
no_range_pattern -> AND . MUT no_range_pattern [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
no_range_pattern -> AND . no_range_pattern [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On UNDERSCORE shift to state 290
-- On TRUE shift to state 291
-- On STRING_LIT shift to state 292
-- On REF shift to state 293
-- On RAW_STRING_LIT shift to state 297
-- On RAW_IDENT shift to state 18
-- On RAW_C_STRING shift to state 298
-- On RAW_BYTE_STRING shift to state 299
-- On PATHSEP shift to state 4
-- On MUT shift to state 356
-- On MINUS shift to state 353
-- On LT shift to state 52
-- On LPAREN shift to state 307
-- On LBRACK shift to state 319
-- On IDENT shift to state 19
-- On FALSE shift to state 326
-- On DOTDOT shift to state 347
-- On C_STRING shift to state 348
-- On CHAR_LIT shift to state 354
-- On BYTE_STRING shift to state 350
-- On ANDAND shift to state 351
-- On AND shift to state 355
-- On tuple_struct_pattern shift to state 357
-- On tuple_pattern shift to state 358
-- On struct_pattern shift to state 359
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 360
-- On path_expression shift to state 400
-- On option(PATHSEP) shift to state 345
-- On no_range_pattern shift to state 409
-- On neg shift to state 402
-- On literal_pattern shift to state 405
-- On identifier_pattern shift to state 406
-- On ident shift to state 410
## Reductions:
-- On INT_LIT FLOAT_LIT
--   reduce production neg ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
** Conflict on RAW_IDENT IDENT

State 356:
## Known stack suffix:
## AND MUT
## LR(1) items:
identifier_pattern -> MUT . ident option(pat_at) [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
no_range_pattern -> AND MUT . no_range_pattern [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On UNDERSCORE shift to state 290
-- On TRUE shift to state 291
-- On STRING_LIT shift to state 292
-- On REF shift to state 293
-- On RAW_STRING_LIT shift to state 297
-- On RAW_IDENT shift to state 18
-- On RAW_C_STRING shift to state 298
-- On RAW_BYTE_STRING shift to state 299
-- On PATHSEP shift to state 4
-- On MUT shift to state 300
-- On MINUS shift to state 353
-- On LT shift to state 52
-- On LPAREN shift to state 307
-- On LBRACK shift to state 319
-- On IDENT shift to state 19
-- On FALSE shift to state 326
-- On DOTDOT shift to state 347
-- On C_STRING shift to state 348
-- On CHAR_LIT shift to state 354
-- On BYTE_STRING shift to state 350
-- On ANDAND shift to state 351
-- On AND shift to state 355
-- On tuple_struct_pattern shift to state 357
-- On tuple_pattern shift to state 358
-- On struct_pattern shift to state 359
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 360
-- On path_expression shift to state 400
-- On option(PATHSEP) shift to state 345
-- On no_range_pattern shift to state 401
-- On neg shift to state 402
-- On literal_pattern shift to state 405
-- On identifier_pattern shift to state 406
-- On ident shift to state 407
## Reductions:
-- On INT_LIT FLOAT_LIT
--   reduce production neg ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
** Conflict on RAW_IDENT IDENT

State 357:
## Known stack suffix:
## tuple_struct_pattern
## LR(1) items:
no_range_pattern -> tuple_struct_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> tuple_struct_pattern

State 358:
## Known stack suffix:
## tuple_pattern
## LR(1) items:
no_range_pattern -> tuple_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> tuple_pattern

State 359:
## Known stack suffix:
## struct_pattern
## LR(1) items:
no_range_pattern -> struct_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> struct_pattern

State 360:
## Known stack suffix:
## path_in_expression
## LR(1) items:
path_expression -> path_in_expression . [ RPAREN RBRACK OR IN IF FATARROW EQ DOTDOTEQ DOTDOTDOT DOTDOT COMMA COLON ]
struct_pattern -> path_in_expression . LBRACK option(struct_pattern_elements) RBRACK [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
tuple_struct_pattern -> path_in_expression . LPAREN tuple_struct_items RPAREN [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On LPAREN shift to state 361
-- On LBRACK shift to state 370
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ DOTDOTEQ DOTDOTDOT DOTDOT COMMA COLON
--   reduce production path_expression -> path_in_expression

State 361:
## Known stack suffix:
## path_in_expression LPAREN
## LR(1) items:
tuple_struct_pattern -> path_in_expression LPAREN . tuple_struct_items RPAREN [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On OR shift to state 289
-- On tuple_struct_items shift to state 362
-- On separated_or_terminated_list(COMMA,pattern) shift to state 364
-- On separated_nonempty_list(COMMA,pattern) shift to state 322
-- On pattern shift to state 365
-- On loption(separated_nonempty_list(COMMA,pattern)) shift to state 368
-- On list(terminated(pattern,COMMA)) shift to state 369
## Reductions:
-- On RPAREN
--   reduce production list(terminated(pattern,COMMA)) ->
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,pattern)) ->
** Conflict on RPAREN

State 362:
## Known stack suffix:
## path_in_expression LPAREN tuple_struct_items
## LR(1) items:
tuple_struct_pattern -> path_in_expression LPAREN tuple_struct_items . RPAREN [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On RPAREN shift to state 363
## Reductions:

State 363:
## Known stack suffix:
## path_in_expression LPAREN tuple_struct_items RPAREN
## LR(1) items:
tuple_struct_pattern -> path_in_expression LPAREN tuple_struct_items RPAREN . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production tuple_struct_pattern -> path_in_expression LPAREN tuple_struct_items RPAREN

State 364:
## Known stack suffix:
## separated_or_terminated_list(COMMA,pattern)
## LR(1) items:
tuple_struct_items -> separated_or_terminated_list(COMMA,pattern) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production tuple_struct_items -> separated_or_terminated_list(COMMA,pattern)

State 365:
## Known stack suffix:
## pattern
## LR(1) items:
list(terminated(pattern,COMMA)) -> pattern . COMMA list(terminated(pattern,COMMA)) [ RPAREN ]
separated_nonempty_list(COMMA,pattern) -> pattern . [ RPAREN ]
separated_nonempty_list(COMMA,pattern) -> pattern . COMMA separated_nonempty_list(COMMA,pattern) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 366
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,pattern) -> pattern

State 366:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
list(terminated(pattern,COMMA)) -> pattern COMMA . list(terminated(pattern,COMMA)) [ RPAREN ]
separated_nonempty_list(COMMA,pattern) -> pattern COMMA . separated_nonempty_list(COMMA,pattern) [ RPAREN ]
## Transitions:
-- On OR shift to state 289
-- On separated_nonempty_list(COMMA,pattern) shift to state 314
-- On pattern shift to state 365
-- On list(terminated(pattern,COMMA)) shift to state 367
## Reductions:
-- On RPAREN
--   reduce production list(terminated(pattern,COMMA)) ->

State 367:
## Known stack suffix:
## pattern COMMA list(terminated(pattern,COMMA))
## LR(1) items:
list(terminated(pattern,COMMA)) -> pattern COMMA list(terminated(pattern,COMMA)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production list(terminated(pattern,COMMA)) -> pattern COMMA list(terminated(pattern,COMMA))

State 368:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,pattern))
## LR(1) items:
separated_or_terminated_list(COMMA,pattern) -> loption(separated_nonempty_list(COMMA,pattern)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_or_terminated_list(COMMA,pattern) -> loption(separated_nonempty_list(COMMA,pattern))

State 369:
## Known stack suffix:
## list(terminated(pattern,COMMA))
## LR(1) items:
separated_or_terminated_list(COMMA,pattern) -> list(terminated(pattern,COMMA)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_or_terminated_list(COMMA,pattern) -> list(terminated(pattern,COMMA))

State 370:
## Known stack suffix:
## path_in_expression LBRACK
## LR(1) items:
struct_pattern -> path_in_expression LBRACK . option(struct_pattern_elements) RBRACK [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On POUND shift to state 1
-- On struct_pattern_fields shift to state 371
-- On struct_pattern_field shift to state 377
-- On struct_pattern_etcetara shift to state 394
-- On struct_pattern_elements shift to state 395
-- On separated_nonempty_list(COMMA,struct_pattern_field) shift to state 396
-- On outer_attr shift to state 42
-- On option(struct_pattern_elements) shift to state 397
-- On list(outer_attr) shift to state 399
## Reductions:
-- On REF RAW_IDENT MUT INT_LIT IDENT DOTDOT
--   reduce production list(outer_attr) ->
-- On RBRACK
--   reduce production option(struct_pattern_elements) ->

State 371:
## Known stack suffix:
## struct_pattern_fields
## LR(1) items:
struct_pattern_elements -> struct_pattern_fields . COMMA struct_pattern_etcetara [ RBRACK ]
struct_pattern_elements -> struct_pattern_fields . option(COMMA) [ RBRACK ]
## Transitions:
-- On COMMA shift to state 372
-- On option(COMMA) shift to state 376
## Reductions:
-- On RBRACK
--   reduce production option(COMMA) ->

State 372:
## Known stack suffix:
## struct_pattern_fields COMMA
## LR(1) items:
option(COMMA) -> COMMA . [ RBRACK ]
struct_pattern_elements -> struct_pattern_fields COMMA . struct_pattern_etcetara [ RBRACK ]
## Transitions:
-- On POUND shift to state 1
-- On struct_pattern_etcetara shift to state 373
-- On outer_attr shift to state 42
-- On list(outer_attr) shift to state 374
## Reductions:
-- On DOTDOT
--   reduce production list(outer_attr) ->
-- On RBRACK
--   reduce production option(COMMA) -> COMMA

State 373:
## Known stack suffix:
## struct_pattern_fields COMMA struct_pattern_etcetara
## LR(1) items:
struct_pattern_elements -> struct_pattern_fields COMMA struct_pattern_etcetara . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production struct_pattern_elements -> struct_pattern_fields COMMA struct_pattern_etcetara

State 374:
## Known stack suffix:
## list(outer_attr)
## LR(1) items:
struct_pattern_etcetara -> list(outer_attr) . DOTDOT [ RBRACK ]
## Transitions:
-- On DOTDOT shift to state 375
## Reductions:

State 375:
## Known stack suffix:
## list(outer_attr) DOTDOT
## LR(1) items:
struct_pattern_etcetara -> list(outer_attr) DOTDOT . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production struct_pattern_etcetara -> list(outer_attr) DOTDOT

State 376:
## Known stack suffix:
## struct_pattern_fields option(COMMA)
## LR(1) items:
struct_pattern_elements -> struct_pattern_fields option(COMMA) . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production struct_pattern_elements -> struct_pattern_fields option(COMMA)

State 377:
## Known stack suffix:
## struct_pattern_field
## LR(1) items:
separated_nonempty_list(COMMA,struct_pattern_field) -> struct_pattern_field . [ RBRACK COMMA ]
separated_nonempty_list(COMMA,struct_pattern_field) -> struct_pattern_field . COMMA separated_nonempty_list(COMMA,struct_pattern_field) [ RBRACK COMMA ]
## Transitions:
-- On COMMA shift to state 378
## Reductions:
-- On RBRACK COMMA
--   reduce production separated_nonempty_list(COMMA,struct_pattern_field) -> struct_pattern_field
** Conflict on COMMA

State 378:
## Known stack suffix:
## struct_pattern_field COMMA
## LR(1) items:
separated_nonempty_list(COMMA,struct_pattern_field) -> struct_pattern_field COMMA . separated_nonempty_list(COMMA,struct_pattern_field) [ RBRACK COMMA ]
## Transitions:
-- On POUND shift to state 1
-- On struct_pattern_field shift to state 377
-- On separated_nonempty_list(COMMA,struct_pattern_field) shift to state 379
-- On outer_attr shift to state 42
-- On list(outer_attr) shift to state 380
## Reductions:
-- On REF RAW_IDENT MUT INT_LIT IDENT
--   reduce production list(outer_attr) ->

State 379:
## Known stack suffix:
## struct_pattern_field COMMA separated_nonempty_list(COMMA,struct_pattern_field)
## LR(1) items:
separated_nonempty_list(COMMA,struct_pattern_field) -> struct_pattern_field COMMA separated_nonempty_list(COMMA,struct_pattern_field) . [ RBRACK COMMA ]
## Transitions:
## Reductions:
-- On RBRACK COMMA
--   reduce production separated_nonempty_list(COMMA,struct_pattern_field) -> struct_pattern_field COMMA separated_nonempty_list(COMMA,struct_pattern_field)

State 380:
## Known stack suffix:
## list(outer_attr)
## LR(1) items:
struct_pattern_field -> list(outer_attr) . struct_pattern_field_body [ RBRACK COMMA ]
## Transitions:
-- On REF shift to state 381
-- On RAW_IDENT shift to state 18
-- On MUT shift to state 385
-- On INT_LIT shift to state 387
-- On IDENT shift to state 19
-- On struct_pattern_field_body shift to state 390
-- On ident shift to state 391
## Reductions:

State 381:
## Known stack suffix:
## REF
## LR(1) items:
struct_pattern_field_body -> REF . MUT ident [ RBRACK COMMA ]
struct_pattern_field_body -> REF . ident [ RBRACK COMMA ]
## Transitions:
-- On RAW_IDENT shift to state 18
-- On MUT shift to state 382
-- On IDENT shift to state 19
-- On ident shift to state 384
## Reductions:

State 382:
## Known stack suffix:
## REF MUT
## LR(1) items:
struct_pattern_field_body -> REF MUT . ident [ RBRACK COMMA ]
## Transitions:
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On ident shift to state 383
## Reductions:

State 383:
## Known stack suffix:
## REF MUT ident
## LR(1) items:
struct_pattern_field_body -> REF MUT ident . [ RBRACK COMMA ]
## Transitions:
## Reductions:
-- On RBRACK COMMA
--   reduce production struct_pattern_field_body -> REF MUT ident

State 384:
## Known stack suffix:
## REF ident
## LR(1) items:
struct_pattern_field_body -> REF ident . [ RBRACK COMMA ]
## Transitions:
## Reductions:
-- On RBRACK COMMA
--   reduce production struct_pattern_field_body -> REF ident

State 385:
## Known stack suffix:
## MUT
## LR(1) items:
struct_pattern_field_body -> MUT . ident [ RBRACK COMMA ]
## Transitions:
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On ident shift to state 386
## Reductions:

State 386:
## Known stack suffix:
## MUT ident
## LR(1) items:
struct_pattern_field_body -> MUT ident . [ RBRACK COMMA ]
## Transitions:
## Reductions:
-- On RBRACK COMMA
--   reduce production struct_pattern_field_body -> MUT ident

State 387:
## Known stack suffix:
## INT_LIT
## LR(1) items:
struct_pattern_field_body -> INT_LIT . COLON pattern [ RBRACK COMMA ]
## Transitions:
-- On COLON shift to state 388
## Reductions:

State 388:
## Known stack suffix:
## INT_LIT COLON
## LR(1) items:
struct_pattern_field_body -> INT_LIT COLON . pattern [ RBRACK COMMA ]
## Transitions:
-- On OR shift to state 289
-- On pattern shift to state 389
## Reductions:

State 389:
## Known stack suffix:
## INT_LIT COLON pattern
## LR(1) items:
struct_pattern_field_body -> INT_LIT COLON pattern . [ RBRACK COMMA ]
## Transitions:
## Reductions:
-- On RBRACK COMMA
--   reduce production struct_pattern_field_body -> INT_LIT COLON pattern

State 390:
## Known stack suffix:
## list(outer_attr) struct_pattern_field_body
## LR(1) items:
struct_pattern_field -> list(outer_attr) struct_pattern_field_body . [ RBRACK COMMA ]
## Transitions:
## Reductions:
-- On RBRACK COMMA
--   reduce production struct_pattern_field -> list(outer_attr) struct_pattern_field_body

State 391:
## Known stack suffix:
## ident
## LR(1) items:
struct_pattern_field_body -> ident . COLON pattern [ RBRACK COMMA ]
struct_pattern_field_body -> ident . [ RBRACK COMMA ]
## Transitions:
-- On COLON shift to state 392
## Reductions:
-- On RBRACK COMMA
--   reduce production struct_pattern_field_body -> ident

State 392:
## Known stack suffix:
## ident COLON
## LR(1) items:
struct_pattern_field_body -> ident COLON . pattern [ RBRACK COMMA ]
## Transitions:
-- On OR shift to state 289
-- On pattern shift to state 393
## Reductions:

State 393:
## Known stack suffix:
## ident COLON pattern
## LR(1) items:
struct_pattern_field_body -> ident COLON pattern . [ RBRACK COMMA ]
## Transitions:
## Reductions:
-- On RBRACK COMMA
--   reduce production struct_pattern_field_body -> ident COLON pattern

State 394:
## Known stack suffix:
## struct_pattern_etcetara
## LR(1) items:
struct_pattern_elements -> struct_pattern_etcetara . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production struct_pattern_elements -> struct_pattern_etcetara

State 395:
## Known stack suffix:
## struct_pattern_elements
## LR(1) items:
option(struct_pattern_elements) -> struct_pattern_elements . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production option(struct_pattern_elements) -> struct_pattern_elements

State 396:
## Known stack suffix:
## separated_nonempty_list(COMMA,struct_pattern_field)
## LR(1) items:
struct_pattern_fields -> separated_nonempty_list(COMMA,struct_pattern_field) . [ RBRACK COMMA ]
## Transitions:
## Reductions:
-- On RBRACK COMMA
--   reduce production struct_pattern_fields -> separated_nonempty_list(COMMA,struct_pattern_field)

State 397:
## Known stack suffix:
## path_in_expression LBRACK option(struct_pattern_elements)
## LR(1) items:
struct_pattern -> path_in_expression LBRACK option(struct_pattern_elements) . RBRACK [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On RBRACK shift to state 398
## Reductions:

State 398:
## Known stack suffix:
## path_in_expression LBRACK option(struct_pattern_elements) RBRACK
## LR(1) items:
struct_pattern -> path_in_expression LBRACK option(struct_pattern_elements) RBRACK . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production struct_pattern -> path_in_expression LBRACK option(struct_pattern_elements) RBRACK

State 399:
## Known stack suffix:
## list(outer_attr)
## LR(1) items:
struct_pattern_etcetara -> list(outer_attr) . DOTDOT [ RBRACK ]
struct_pattern_field -> list(outer_attr) . struct_pattern_field_body [ RBRACK COMMA ]
## Transitions:
-- On REF shift to state 381
-- On RAW_IDENT shift to state 18
-- On MUT shift to state 385
-- On INT_LIT shift to state 387
-- On IDENT shift to state 19
-- On DOTDOT shift to state 375
-- On struct_pattern_field_body shift to state 390
-- On ident shift to state 391
## Reductions:

State 400:
## Known stack suffix:
## path_expression
## LR(1) items:
no_range_pattern -> path_expression . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> path_expression

State 401:
## Known stack suffix:
## AND MUT no_range_pattern
## LR(1) items:
no_range_pattern -> AND MUT no_range_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> AND MUT no_range_pattern

State 402:
## Known stack suffix:
## neg
## LR(1) items:
literal_pattern -> neg . INT_LIT [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
literal_pattern -> neg . FLOAT_LIT [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On INT_LIT shift to state 403
-- On FLOAT_LIT shift to state 404
## Reductions:

State 403:
## Known stack suffix:
## neg INT_LIT
## LR(1) items:
literal_pattern -> neg INT_LIT . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production literal_pattern -> neg INT_LIT

State 404:
## Known stack suffix:
## neg FLOAT_LIT
## LR(1) items:
literal_pattern -> neg FLOAT_LIT . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production literal_pattern -> neg FLOAT_LIT

State 405:
## Known stack suffix:
## literal_pattern
## LR(1) items:
no_range_pattern -> literal_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> literal_pattern

State 406:
## Known stack suffix:
## identifier_pattern
## LR(1) items:
no_range_pattern -> identifier_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> identifier_pattern

State 407:
## Known stack suffix:
## MUT ident
## LR(1) items:
identifier_pattern -> MUT ident . option(pat_at) [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
identifier_pattern -> ident . option(pat_at) [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On AT shift to state 296
-- On pat_at shift to state 302
-- On option(pat_at) shift to state 408
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production option(pat_at) ->

State 408:
## Known stack suffix:
## MUT ident option(pat_at)
## LR(1) items:
identifier_pattern -> MUT ident option(pat_at) . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
identifier_pattern -> ident option(pat_at) . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production identifier_pattern -> MUT ident option(pat_at)
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production identifier_pattern -> ident option(pat_at)
** Conflict on RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON

State 409:
## Known stack suffix:
## AND no_range_pattern
## LR(1) items:
no_range_pattern -> AND no_range_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> AND no_range_pattern

State 410:
## Known stack suffix:
## ident
## LR(1) items:
identifier_pattern -> ident . option(pat_at) [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On AT shift to state 296
-- On pat_at shift to state 302
-- On option(pat_at) shift to state 411
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production option(pat_at) ->

State 411:
## Known stack suffix:
## ident option(pat_at)
## LR(1) items:
identifier_pattern -> ident option(pat_at) . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production identifier_pattern -> ident option(pat_at)

State 412:
## Known stack suffix:
## ANDAND MUT no_range_pattern
## LR(1) items:
no_range_pattern -> ANDAND MUT no_range_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> ANDAND MUT no_range_pattern

State 413:
## Known stack suffix:
## ANDAND no_range_pattern
## LR(1) items:
no_range_pattern -> ANDAND no_range_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> ANDAND no_range_pattern

State 414:
## Known stack suffix:
## range_to_inclusive_pattern
## LR(1) items:
range_pattern -> range_to_inclusive_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production range_pattern -> range_to_inclusive_pattern

State 415:
## Known stack suffix:
## range_pattern_bound
## LR(1) items:
obsolete_range_pattern -> range_pattern_bound . DOTDOTDOT range_pattern_bound [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
range_from_pattern -> range_pattern_bound . DOTDOT [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
range_inclusive_pattern -> range_pattern_bound . DOTDOTEQ range_pattern_bound [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On DOTDOTEQ shift to state 416
-- On DOTDOTDOT shift to state 418
-- On DOTDOT shift to state 420
## Reductions:

State 416:
## Known stack suffix:
## range_pattern_bound DOTDOTEQ
## LR(1) items:
range_inclusive_pattern -> range_pattern_bound DOTDOTEQ . range_pattern_bound [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On PATHSEP shift to state 4
-- On MINUS shift to state 328
-- On LT shift to state 52
-- On INT_LIT shift to state 324
-- On FLOAT_LIT shift to state 325
-- On CHAR_LIT shift to state 329
-- On BYTE shift to state 330
-- On range_pattern_bound shift to state 417
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 343
-- On path_expression shift to state 344
-- On option(PATHSEP) shift to state 345
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->

State 417:
## Known stack suffix:
## range_pattern_bound DOTDOTEQ range_pattern_bound
## LR(1) items:
range_inclusive_pattern -> range_pattern_bound DOTDOTEQ range_pattern_bound . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production range_inclusive_pattern -> range_pattern_bound DOTDOTEQ range_pattern_bound

State 418:
## Known stack suffix:
## range_pattern_bound DOTDOTDOT
## LR(1) items:
obsolete_range_pattern -> range_pattern_bound DOTDOTDOT . range_pattern_bound [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On PATHSEP shift to state 4
-- On MINUS shift to state 328
-- On LT shift to state 52
-- On INT_LIT shift to state 324
-- On FLOAT_LIT shift to state 325
-- On CHAR_LIT shift to state 329
-- On BYTE shift to state 330
-- On range_pattern_bound shift to state 419
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 343
-- On path_expression shift to state 344
-- On option(PATHSEP) shift to state 345
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->

State 419:
## Known stack suffix:
## range_pattern_bound DOTDOTDOT range_pattern_bound
## LR(1) items:
obsolete_range_pattern -> range_pattern_bound DOTDOTDOT range_pattern_bound . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production obsolete_range_pattern -> range_pattern_bound DOTDOTDOT range_pattern_bound

State 420:
## Known stack suffix:
## range_pattern_bound DOTDOT
## LR(1) items:
range_from_pattern -> range_pattern_bound DOTDOT . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production range_from_pattern -> range_pattern_bound DOTDOT

State 421:
## Known stack suffix:
## range_pattern
## LR(1) items:
pattern_no_top_alt -> range_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production pattern_no_top_alt -> range_pattern

State 422:
## Known stack suffix:
## range_inclusive_pattern
## LR(1) items:
range_pattern -> range_inclusive_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production range_pattern -> range_inclusive_pattern

State 423:
## Known stack suffix:
## range_from_pattern
## LR(1) items:
range_pattern -> range_from_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production range_pattern -> range_from_pattern

State 424:
## Known stack suffix:
## AT pattern_no_top_alt
## LR(1) items:
pat_at -> AT pattern_no_top_alt . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production pat_at -> AT pattern_no_top_alt

State 425:
## Known stack suffix:
## path_expression
## LR(1) items:
no_range_pattern -> path_expression . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
range_pattern_bound -> path_expression . [ DOTDOTEQ DOTDOTDOT DOTDOT ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production no_range_pattern -> path_expression
-- On DOTDOTEQ DOTDOTDOT DOTDOT
--   reduce production range_pattern_bound -> path_expression

State 426:
## Known stack suffix:
## obsolete_range_pattern
## LR(1) items:
range_pattern -> obsolete_range_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production range_pattern -> obsolete_range_pattern

State 427:
## Known stack suffix:
## no_range_pattern
## LR(1) items:
pattern_no_top_alt -> no_range_pattern . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production pattern_no_top_alt -> no_range_pattern

State 428:
## Known stack suffix:
## REF MUT ident option(pat_at)
## LR(1) items:
identifier_pattern -> REF MUT ident option(pat_at) . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production identifier_pattern -> REF MUT ident option(pat_at)

State 429:
## Known stack suffix:
## REF ident
## LR(1) items:
identifier_pattern -> REF ident . option(pat_at) [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
-- On AT shift to state 296
-- On pat_at shift to state 302
-- On option(pat_at) shift to state 430
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production option(pat_at) ->

State 430:
## Known stack suffix:
## REF ident option(pat_at)
## LR(1) items:
identifier_pattern -> REF ident option(pat_at) . [ RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK OR IN IF FATARROW EQ COMMA COLON
--   reduce production identifier_pattern -> REF ident option(pat_at)

State 431:
## Known stack suffix:
## OR separated_nonempty_list(OR,pattern_no_top_alt)
## LR(1) items:
pattern -> OR separated_nonempty_list(OR,pattern_no_top_alt) . [ RPAREN RBRACK IN IF FATARROW EQ COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK IN IF FATARROW EQ COMMA
--   reduce production pattern -> OR separated_nonempty_list(OR,pattern_no_top_alt)

State 432:
## Known stack suffix:
## pattern_no_top_alt
## LR(1) items:
separated_nonempty_list(OR,pattern_no_top_alt) -> pattern_no_top_alt . [ RPAREN RBRACK IN IF FATARROW EQ COMMA ]
separated_nonempty_list(OR,pattern_no_top_alt) -> pattern_no_top_alt . OR separated_nonempty_list(OR,pattern_no_top_alt) [ RPAREN RBRACK IN IF FATARROW EQ COMMA ]
## Transitions:
-- On OR shift to state 433
## Reductions:
-- On RPAREN RBRACK IN IF FATARROW EQ COMMA
--   reduce production separated_nonempty_list(OR,pattern_no_top_alt) -> pattern_no_top_alt

State 433:
## Known stack suffix:
## pattern_no_top_alt OR
## LR(1) items:
separated_nonempty_list(OR,pattern_no_top_alt) -> pattern_no_top_alt OR . separated_nonempty_list(OR,pattern_no_top_alt) [ RPAREN RBRACK IN IF FATARROW EQ COMMA ]
## Transitions:
-- On UNDERSCORE shift to state 290
-- On TRUE shift to state 291
-- On STRING_LIT shift to state 292
-- On REF shift to state 293
-- On RAW_STRING_LIT shift to state 297
-- On RAW_IDENT shift to state 18
-- On RAW_C_STRING shift to state 298
-- On RAW_BYTE_STRING shift to state 299
-- On PATHSEP shift to state 4
-- On MUT shift to state 300
-- On MINUS shift to state 304
-- On LT shift to state 52
-- On LPAREN shift to state 307
-- On LBRACK shift to state 319
-- On INT_LIT shift to state 324
-- On IDENT shift to state 19
-- On FLOAT_LIT shift to state 325
-- On FALSE shift to state 326
-- On DOTDOTEQ shift to state 327
-- On DOTDOT shift to state 347
-- On C_STRING shift to state 348
-- On CHAR_LIT shift to state 349
-- On BYTE_STRING shift to state 350
-- On BYTE shift to state 330
-- On ANDAND shift to state 351
-- On AND shift to state 355
-- On tuple_struct_pattern shift to state 357
-- On tuple_pattern shift to state 358
-- On struct_pattern shift to state 359
-- On separated_nonempty_list(OR,pattern_no_top_alt) shift to state 434
-- On range_to_inclusive_pattern shift to state 414
-- On range_pattern_bound shift to state 415
-- On range_pattern shift to state 421
-- On range_inclusive_pattern shift to state 422
-- On range_from_pattern shift to state 423
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On pattern_no_top_alt shift to state 432
-- On path_in_expression shift to state 360
-- On path_expression shift to state 425
-- On option(PATHSEP) shift to state 345
-- On obsolete_range_pattern shift to state 426
-- On no_range_pattern shift to state 427
-- On neg shift to state 402
-- On literal_pattern shift to state 405
-- On identifier_pattern shift to state 406
-- On ident shift to state 410
## Reductions:
-- On INT_LIT FLOAT_LIT
--   reduce production neg ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
** Conflict on RAW_IDENT INT_LIT IDENT FLOAT_LIT

State 434:
## Known stack suffix:
## pattern_no_top_alt OR separated_nonempty_list(OR,pattern_no_top_alt)
## LR(1) items:
separated_nonempty_list(OR,pattern_no_top_alt) -> pattern_no_top_alt OR separated_nonempty_list(OR,pattern_no_top_alt) . [ RPAREN RBRACK IN IF FATARROW EQ COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK IN IF FATARROW EQ COMMA
--   reduce production separated_nonempty_list(OR,pattern_no_top_alt) -> pattern_no_top_alt OR separated_nonempty_list(OR,pattern_no_top_alt)

State 435:
## Known stack suffix:
## IF LET pattern
## LR(1) items:
if_let_expression -> IF LET pattern . EQ expression block_expression else_opt [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On EQ shift to state 436
## Reductions:

State 436:
## Known stack suffix:
## IF LET pattern EQ
## LR(1) items:
if_let_expression -> IF LET pattern EQ . expression block_expression else_opt [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 649
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 437:
## Known stack suffix:
## DOTDOTEQ
## LR(1) items:
range_expression -> DOTDOTEQ . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 648
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 438:
## Known stack suffix:
## DOTDOT
## LR(1) items:
range_expression -> DOTDOT . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> DOTDOT . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 647
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production range_expression -> DOTDOT
** Conflict on STAR OR MINUS LT LPAREN LBRACK LBRACE DOTDOTEQ DOTDOT AND

State 439:
## Known stack suffix:
## CONTINUE
## LR(1) items:
continue_expression -> CONTINUE . option(LIFETIME_OR_LABEL) [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On LIFETIME_OR_LABEL shift to state 440
-- On option(LIFETIME_OR_LABEL) shift to state 441
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production option(LIFETIME_OR_LABEL) ->

State 440:
## Known stack suffix:
## LIFETIME_OR_LABEL
## LR(1) items:
option(LIFETIME_OR_LABEL) -> LIFETIME_OR_LABEL . [ XOREQ XOR WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production option(LIFETIME_OR_LABEL) -> LIFETIME_OR_LABEL

State 441:
## Known stack suffix:
## CONTINUE option(LIFETIME_OR_LABEL)
## LR(1) items:
continue_expression -> CONTINUE option(LIFETIME_OR_LABEL) . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production continue_expression -> CONTINUE option(LIFETIME_OR_LABEL)

State 442:
## Known stack suffix:
## CONST
## LR(1) items:
const_block_expression -> CONST . block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On LBRACE shift to state 8
-- On block_expression shift to state 443
## Reductions:

State 443:
## Known stack suffix:
## CONST block_expression
## LR(1) items:
const_block_expression -> CONST block_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production const_block_expression -> CONST block_expression

State 444:
## Known stack suffix:
## BREAK
## LR(1) items:
break_expression -> BREAK . option(LIFETIME_OR_LABEL) option(expression) [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On LIFETIME_OR_LABEL shift to state 440
-- On option(LIFETIME_OR_LABEL) shift to state 445
## Reductions:
-- On XOREQ XOR WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production option(LIFETIME_OR_LABEL) ->
** Conflict on LIFETIME_OR_LABEL

State 445:
## Known stack suffix:
## BREAK option(LIFETIME_OR_LABEL)
## LR(1) items:
break_expression -> BREAK option(LIFETIME_OR_LABEL) . option(expression) [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(expression) shift to state 645
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 646
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production option(expression) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on STAR OR MINUS LT LPAREN LBRACK LBRACE DOTDOTEQ DOTDOT AND

State 446:
## Known stack suffix:
## ASYNC
## LR(1) items:
async_block_expression -> ASYNC . block_expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
async_block_expression -> ASYNC . MOVE block_expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
closure_expression -> ASYNC . MOVE OR option(closure_params) OR expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
closure_expression -> ASYNC . OR option(closure_params) OR expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On OR shift to state 447
-- On MOVE shift to state 638
-- On LBRACE shift to state 8
-- On block_expression shift to state 644
## Reductions:

State 447:
## Known stack suffix:
## ASYNC OR
## LR(1) items:
closure_expression -> ASYNC OR . option(closure_params) OR expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On POUND shift to state 1
-- On separated_nonempty_list(COMMA,closure_param) shift to state 41
-- On outer_attr shift to state 42
-- On option(closure_params) shift to state 448
-- On nonempty_separated_or_terminated_list(COMMA,closure_param) shift to state 625
-- On nonempty_list(terminated(closure_param,COMMA)) shift to state 626
-- On list(outer_attr) shift to state 627
-- On closure_params shift to state 633
-- On closure_param shift to state 634
## Reductions:
-- On UNDERSCORE TRUE SUPER STRING_LIT SELFVALUE SELFTYPE REF RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PATHSEP MUT MINUS LT LPAREN LBRACK INT_LIT IDENT FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CHAR_LIT BYTE_STRING BYTE ANDAND AND
--   reduce production list(outer_attr) ->
-- On OR
--   reduce production option(closure_params) ->

State 448:
## Known stack suffix:
## ASYNC OR option(closure_params)
## LR(1) items:
closure_expression -> ASYNC OR option(closure_params) . OR expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On OR shift to state 449
## Reductions:

State 449:
## Known stack suffix:
## ASYNC OR option(closure_params) OR
## LR(1) items:
closure_expression -> ASYNC OR option(closure_params) OR . expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On RARROW shift to state 46
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 623
-- On expr_or_typ_block shift to state 624
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 450:
## Known stack suffix:
## AND
## LR(1) items:
operator_expression -> AND . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 622
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 451:
## Known stack suffix:
## AMPMUT
## LR(1) items:
operator_expression -> AMPMUT . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 621
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 452:
## Known stack suffix:
## unsafe_block_expression
## LR(1) items:
exprs_with_block -> unsafe_block_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production exprs_with_block -> unsafe_block_expression

State 453:
## Known stack suffix:
## tuple_indexing_expression
## LR(1) items:
exprs_without_block -> tuple_indexing_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> tuple_indexing_expression

State 454:
## Known stack suffix:
## tuple_expression
## LR(1) items:
exprs_without_block -> tuple_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> tuple_expression

State 455:
## Known stack suffix:
## struct_expression
## LR(1) items:
exprs_without_block -> struct_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> struct_expression

State 456:
## Known stack suffix:
## return_expression
## LR(1) items:
exprs_without_block -> return_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> return_expression

State 457:
## Known stack suffix:
## range_expression
## LR(1) items:
exprs_without_block -> range_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> range_expression

State 458:
## Known stack suffix:
## path_in_expression
## LR(1) items:
path_expression -> path_in_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
struct_expression -> path_in_expression . LBRACE struct_expr_field_or_struct_base_opt RBRACE [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
struct_expression -> path_in_expression . LPAREN option(expr_list) RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
struct_expression -> path_in_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On LPAREN shift to state 459
-- On LBRACE shift to state 599
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production path_expression -> path_in_expression
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production struct_expression -> path_in_expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND

State 459:
## Known stack suffix:
## path_in_expression LPAREN
## LR(1) items:
struct_expression -> path_in_expression LPAREN . option(expr_list) RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On separated_nonempty_list(COMMA,expression) shift to state 460
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(expr_list) shift to state 596
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 532
-- On expr_list shift to state 598
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On RPAREN
--   reduce production option(expr_list) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 460:
## Known stack suffix:
## separated_nonempty_list(COMMA,expression)
## LR(1) items:
expr_list -> separated_nonempty_list(COMMA,expression) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production expr_list -> separated_nonempty_list(COMMA,expression)

State 461:
## Known stack suffix:
## path_expression
## LR(1) items:
exprs_without_block -> path_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> path_expression

State 462:
## Known stack suffix:
## outer_attr
## LR(1) items:
nonempty_list(outer_attr) -> outer_attr . [ WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
nonempty_list(outer_attr) -> outer_attr . nonempty_list(outer_attr) [ WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On POUND shift to state 1
-- On outer_attr shift to state 462
-- On nonempty_list(outer_attr) shift to state 463
## Reductions:
-- On WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production nonempty_list(outer_attr) -> outer_attr
** Conflict on POUND

State 463:
## Known stack suffix:
## outer_attr nonempty_list(outer_attr)
## LR(1) items:
nonempty_list(outer_attr) -> outer_attr nonempty_list(outer_attr) . [ WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production nonempty_list(outer_attr) -> outer_attr nonempty_list(outer_attr)

State 464:
## Known stack suffix:
## option(loop_label)
## LR(1) items:
loop_expression -> option(loop_label) . loop_switch [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On WHILE shift to state 465
-- On LOOP shift to state 582
-- On LBRACE shift to state 8
-- On FOR shift to state 584
-- On predicate_pattern_loop_expression shift to state 589
-- On predicate_loop_expression shift to state 590
-- On loop_switch shift to state 591
-- On label_block_expression shift to state 592
-- On iterator_loop_expression shift to state 593
-- On infinite_loop_expression shift to state 594
-- On block_expression shift to state 595
## Reductions:

State 465:
## Known stack suffix:
## WHILE
## LR(1) items:
predicate_loop_expression -> WHILE . expression block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
predicate_pattern_loop_expression -> WHILE . LET pattern EQ scrutinee block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LET shift to state 466
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 580
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 466:
## Known stack suffix:
## WHILE LET
## LR(1) items:
predicate_pattern_loop_expression -> WHILE LET . pattern EQ scrutinee block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On OR shift to state 289
-- On pattern shift to state 467
## Reductions:

State 467:
## Known stack suffix:
## WHILE LET pattern
## LR(1) items:
predicate_pattern_loop_expression -> WHILE LET pattern . EQ scrutinee block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On EQ shift to state 468
## Reductions:

State 468:
## Known stack suffix:
## WHILE LET pattern EQ
## LR(1) items:
predicate_pattern_loop_expression -> WHILE LET pattern EQ . scrutinee block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On scrutinee shift to state 469
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 579
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 469:
## Known stack suffix:
## WHILE LET pattern EQ scrutinee
## LR(1) items:
predicate_pattern_loop_expression -> WHILE LET pattern EQ scrutinee . block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On LBRACE shift to state 8
-- On block_expression shift to state 470
## Reductions:

State 470:
## Known stack suffix:
## WHILE LET pattern EQ scrutinee block_expression
## LR(1) items:
predicate_pattern_loop_expression -> WHILE LET pattern EQ scrutinee block_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production predicate_pattern_loop_expression -> WHILE LET pattern EQ scrutinee block_expression

State 471:
## Known stack suffix:
## operator_expression
## LR(1) items:
exprs_without_block -> operator_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> operator_expression

State 472:
## Known stack suffix:
## nonempty_list(outer_attr)
## LR(1) items:
expression -> nonempty_list(outer_attr) . exprs_without_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
expression -> nonempty_list(outer_attr) . exprs_with_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 483
-- On exprs_with_block shift to state 484
-- On expression shift to state 485
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 473:
## Known stack suffix:
## method_call_expression
## LR(1) items:
exprs_without_block -> method_call_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> method_call_expression

State 474:
## Known stack suffix:
## match_expression
## LR(1) items:
exprs_with_block -> match_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production exprs_with_block -> match_expression

State 475:
## Known stack suffix:
## loop_label
## LR(1) items:
option(loop_label) -> loop_label . [ WHILE LOOP LBRACE FOR ]
## Transitions:
## Reductions:
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) -> loop_label

State 476:
## Known stack suffix:
## loop_expression
## LR(1) items:
exprs_with_block -> loop_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production exprs_with_block -> loop_expression

State 477:
## Known stack suffix:
## literal_expression
## LR(1) items:
exprs_without_block -> literal_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> literal_expression

State 478:
## Known stack suffix:
## index_expression
## LR(1) items:
exprs_without_block -> index_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> index_expression

State 479:
## Known stack suffix:
## if_let_expression
## LR(1) items:
exprs_with_block -> if_let_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production exprs_with_block -> if_let_expression

State 480:
## Known stack suffix:
## if_expression
## LR(1) items:
exprs_with_block -> if_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production exprs_with_block -> if_expression

State 481:
## Known stack suffix:
## grouped_expression
## LR(1) items:
exprs_without_block -> grouped_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> grouped_expression

State 482:
## Known stack suffix:
## field_expression
## LR(1) items:
exprs_without_block -> field_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> field_expression

State 483:
## Known stack suffix:
## nonempty_list(outer_attr) exprs_without_block
## LR(1) items:
expression -> nonempty_list(outer_attr) exprs_without_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
expression -> exprs_without_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production expression -> nonempty_list(outer_attr) exprs_without_block
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND
--   reduce production expression -> exprs_without_block
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 484:
## Known stack suffix:
## nonempty_list(outer_attr) exprs_with_block
## LR(1) items:
expression -> nonempty_list(outer_attr) exprs_with_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
expression -> exprs_with_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production expression -> nonempty_list(outer_attr) exprs_with_block
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND
--   reduce production expression -> exprs_with_block
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 485:
## Known stack suffix:
## expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:

State 486:
## Known stack suffix:
## expression XOREQ
## LR(1) items:
operator_expression -> expression XOREQ . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 489
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 487:
## Known stack suffix:
## exprs_without_block
## LR(1) items:
expression -> exprs_without_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production expression -> exprs_without_block

State 488:
## Known stack suffix:
## exprs_with_block
## LR(1) items:
expression -> exprs_with_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production expression -> exprs_with_block

State 489:
## Known stack suffix:
## expression XOREQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression XOREQ expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression XOREQ expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 490:
## Known stack suffix:
## expression XOR
## LR(1) items:
operator_expression -> expression XOR . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 491
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 491:
## Known stack suffix:
## expression XOR expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression XOR expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression XOR expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 492:
## Known stack suffix:
## expression STAREQ
## LR(1) items:
operator_expression -> expression STAREQ . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 493
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 493:
## Known stack suffix:
## expression STAREQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression STAREQ expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression STAREQ expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 494:
## Known stack suffix:
## expression STAR
## LR(1) items:
operator_expression -> expression STAR . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 495
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 495:
## Known stack suffix:
## expression STAR expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression STAR expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression STAR expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 496:
## Known stack suffix:
## expression SLASHEQ
## LR(1) items:
operator_expression -> expression SLASHEQ . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 497
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 497:
## Known stack suffix:
## expression SLASHEQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression SLASHEQ expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression SLASHEQ expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 498:
## Known stack suffix:
## expression SLASH
## LR(1) items:
operator_expression -> expression SLASH . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 499
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 499:
## Known stack suffix:
## expression SLASH expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression SLASH expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression SLASH expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 500:
## Known stack suffix:
## expression SHREQ
## LR(1) items:
operator_expression -> expression SHREQ . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 501
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 501:
## Known stack suffix:
## expression SHREQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression SHREQ expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression SHREQ expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 502:
## Known stack suffix:
## expression SHR
## LR(1) items:
operator_expression -> expression SHR . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 503
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 503:
## Known stack suffix:
## expression SHR expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression SHR expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression SHR expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 504:
## Known stack suffix:
## expression SHLEQ
## LR(1) items:
operator_expression -> expression SHLEQ . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 505
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 505:
## Known stack suffix:
## expression SHLEQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression SHLEQ expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression SHLEQ expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 506:
## Known stack suffix:
## expression SHL
## LR(1) items:
operator_expression -> expression SHL . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 507
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 507:
## Known stack suffix:
## expression SHL expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression SHL expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression SHL expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 508:
## Known stack suffix:
## expression QUESTION
## LR(1) items:
operator_expression -> expression QUESTION . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression QUESTION

State 509:
## Known stack suffix:
## expression PLUSEQ
## LR(1) items:
operator_expression -> expression PLUSEQ . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 510
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 510:
## Known stack suffix:
## expression PLUSEQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression PLUSEQ expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression PLUSEQ expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 511:
## Known stack suffix:
## expression PLUS
## LR(1) items:
operator_expression -> expression PLUS . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 512
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 512:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression PLUS expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression PLUS expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 513:
## Known stack suffix:
## expression PERCENT
## LR(1) items:
operator_expression -> expression PERCENT . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 514
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 514:
## Known stack suffix:
## expression PERCENT expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression PERCENT expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression PERCENT expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 515:
## Known stack suffix:
## expression OROR
## LR(1) items:
operator_expression -> expression OROR . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 516
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 516:
## Known stack suffix:
## expression OROR expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression OROR expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression OROR expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 517:
## Known stack suffix:
## expression OREQ
## LR(1) items:
operator_expression -> expression OREQ . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 518
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 518:
## Known stack suffix:
## expression OREQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression OREQ expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression OREQ expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 519:
## Known stack suffix:
## expression OR
## LR(1) items:
operator_expression -> expression OR . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 520
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 520:
## Known stack suffix:
## expression OR expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression OR expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression OR expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 521:
## Known stack suffix:
## expression NE
## LR(1) items:
operator_expression -> expression NE . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 522
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 522:
## Known stack suffix:
## expression NE expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression NE expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression NE expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 523:
## Known stack suffix:
## expression MINUSEQ
## LR(1) items:
operator_expression -> expression MINUSEQ . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 524
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 524:
## Known stack suffix:
## expression MINUSEQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression MINUSEQ expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression MINUSEQ expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 525:
## Known stack suffix:
## expression MINUS
## LR(1) items:
operator_expression -> expression MINUS . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 526
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 526:
## Known stack suffix:
## expression MINUS expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression MINUS expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression MINUS expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 527:
## Known stack suffix:
## expression LT
## LR(1) items:
operator_expression -> expression LT . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 528
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 528:
## Known stack suffix:
## expression LT expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression LT expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression LT expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 529:
## Known stack suffix:
## expression LPAREN
## LR(1) items:
call_expression -> expression LPAREN . call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On separated_nonempty_list(COMMA,expression) shift to state 530
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 531
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 532
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_params shift to state 577
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expression)) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 530:
## Known stack suffix:
## separated_nonempty_list(COMMA,expression)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression)

State 531:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,expression))
## LR(1) items:
call_params -> loption(separated_nonempty_list(COMMA,expression)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production call_params -> loption(separated_nonempty_list(COMMA,expression))

State 532:
## Known stack suffix:
## expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
separated_nonempty_list(COMMA,expression) -> expression . [ RPAREN ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAREN ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On COMMA shift to state 575
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,expression) -> expression

State 533:
## Known stack suffix:
## expression LE
## LR(1) items:
operator_expression -> expression LE . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 534
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 534:
## Known stack suffix:
## expression LE expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression LE expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression LE expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 535:
## Known stack suffix:
## expression LBRACK
## LR(1) items:
index_expression -> expression LBRACK . expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 536
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 536:
## Known stack suffix:
## expression LBRACK expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
index_expression -> expression LBRACK expression . RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On RBRACK shift to state 537
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:

State 537:
## Known stack suffix:
## expression LBRACK expression RBRACK
## LR(1) items:
index_expression -> expression LBRACK expression RBRACK . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production index_expression -> expression LBRACK expression RBRACK

State 538:
## Known stack suffix:
## expression GT
## LR(1) items:
operator_expression -> expression GT . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 539
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 539:
## Known stack suffix:
## expression GT expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression GT expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression GT expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 540:
## Known stack suffix:
## expression GE
## LR(1) items:
operator_expression -> expression GE . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 541
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 541:
## Known stack suffix:
## expression GE expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression GE expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression GE expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 542:
## Known stack suffix:
## expression EQEQ
## LR(1) items:
operator_expression -> expression EQEQ . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 543
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 543:
## Known stack suffix:
## expression EQEQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression EQEQ expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression EQEQ expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 544:
## Known stack suffix:
## expression EQ
## LR(1) items:
operator_expression -> expression EQ . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 545
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 545:
## Known stack suffix:
## expression EQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression EQ expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression EQ expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 546:
## Known stack suffix:
## expression DOTDOTEQ
## LR(1) items:
range_expression -> expression DOTDOTEQ . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 547
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 547:
## Known stack suffix:
## expression DOTDOTEQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression DOTDOTEQ expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production range_expression -> expression DOTDOTEQ expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 548:
## Known stack suffix:
## expression DOTDOT
## LR(1) items:
range_expression -> expression DOTDOT . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression DOTDOT . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 549
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production range_expression -> expression DOTDOT
** Conflict on STAR OR MINUS LT LPAREN LBRACK LBRACE DOTDOTEQ DOTDOT AND

State 549:
## Known stack suffix:
## expression DOTDOT expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression DOTDOT expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production range_expression -> expression DOTDOT expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 550:
## Known stack suffix:
## expression DOT
## LR(1) items:
await_expression -> expression DOT . AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression DOT . ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression DOT . path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression DOT . INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On SUPER shift to state 94
-- On SELFVALUE shift to state 95
-- On SELFTYPE shift to state 96
-- On RAW_IDENT shift to state 18
-- On INT_LIT shift to state 551
-- On IDENT shift to state 19
-- On DOLLAR_CRATE shift to state 97
-- On CRATE shift to state 98
-- On AWAIT shift to state 552
-- On path_ident_segment shift to state 334
-- On path_expr_segment shift to state 553
-- On ident shift to state 566
## Reductions:

State 551:
## Known stack suffix:
## expression DOT INT_LIT
## LR(1) items:
tuple_indexing_expression -> expression DOT INT_LIT . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production tuple_indexing_expression -> expression DOT INT_LIT

State 552:
## Known stack suffix:
## expression DOT AWAIT
## LR(1) items:
await_expression -> expression DOT AWAIT . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production await_expression -> expression DOT AWAIT

State 553:
## Known stack suffix:
## expression DOT path_expr_segment
## LR(1) items:
method_call_expression -> expression DOT path_expr_segment . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On LPAREN shift to state 554
## Reductions:

State 554:
## Known stack suffix:
## expression DOT path_expr_segment LPAREN
## LR(1) items:
method_call_expression -> expression DOT path_expr_segment LPAREN . call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On separated_nonempty_list(COMMA,expression) shift to state 530
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 531
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 532
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_params shift to state 558
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expression)) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 555:
## Known stack suffix:
## continue_expression
## LR(1) items:
exprs_without_block -> continue_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> continue_expression

State 556:
## Known stack suffix:
## const_block_expression
## LR(1) items:
exprs_with_block -> const_block_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production exprs_with_block -> const_block_expression

State 557:
## Known stack suffix:
## closure_expression
## LR(1) items:
exprs_without_block -> closure_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> closure_expression

State 558:
## Known stack suffix:
## expression DOT path_expr_segment LPAREN call_params
## LR(1) items:
method_call_expression -> expression DOT path_expr_segment LPAREN call_params . RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On RPAREN shift to state 559
## Reductions:

State 559:
## Known stack suffix:
## expression DOT path_expr_segment LPAREN call_params RPAREN
## LR(1) items:
method_call_expression -> expression DOT path_expr_segment LPAREN call_params RPAREN . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production method_call_expression -> expression DOT path_expr_segment LPAREN call_params RPAREN

State 560:
## Known stack suffix:
## call_expression
## LR(1) items:
exprs_without_block -> call_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> call_expression

State 561:
## Known stack suffix:
## break_expression
## LR(1) items:
exprs_without_block -> break_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> break_expression

State 562:
## Known stack suffix:
## block_expression
## LR(1) items:
exprs_with_block -> block_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production exprs_with_block -> block_expression

State 563:
## Known stack suffix:
## await_expression
## LR(1) items:
exprs_without_block -> await_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> await_expression

State 564:
## Known stack suffix:
## async_block_expression
## LR(1) items:
exprs_without_block -> async_block_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> async_block_expression

State 565:
## Known stack suffix:
## array_expression
## LR(1) items:
exprs_without_block -> array_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production exprs_without_block -> array_expression

State 566:
## Known stack suffix:
## expression DOT ident
## LR(1) items:
field_expression -> expression DOT ident . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
path_ident_segment -> ident . [ PATHSEP LPAREN ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production field_expression -> expression DOT ident
-- On PATHSEP LPAREN
--   reduce production path_ident_segment -> ident
** Conflict on LPAREN

State 567:
## Known stack suffix:
## expression AS
## LR(1) items:
operator_expression -> expression AS . type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNDERSCORE shift to state 47
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LBRACK shift to state 72
-- On IMPL shift to state 119
-- On FOR shift to state 75
-- On DYN shift to state 122
-- On AND shift to state 116
-- On type_path shift to state 124
-- On type_no_bounds shift to state 568
-- On tuple_type shift to state 126
-- On trait_bound shift to state 127
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On impl_trait_type_one_bound shift to state 155
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 568:
## Known stack suffix:
## expression AS type_no_bounds
## LR(1) items:
operator_expression -> expression AS type_no_bounds . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression AS type_no_bounds

State 569:
## Known stack suffix:
## expression ANDEQ
## LR(1) items:
operator_expression -> expression ANDEQ . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 570
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 570:
## Known stack suffix:
## expression ANDEQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression ANDEQ expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression ANDEQ expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 571:
## Known stack suffix:
## expression ANDAND
## LR(1) items:
operator_expression -> expression ANDAND . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 572
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 572:
## Known stack suffix:
## expression ANDAND expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression ANDAND expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression ANDAND expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 573:
## Known stack suffix:
## expression AND
## LR(1) items:
operator_expression -> expression AND . expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 574
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 574:
## Known stack suffix:
## expression AND expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression AND expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> expression AND expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 575:
## Known stack suffix:
## expression COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAREN ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On separated_nonempty_list(COMMA,expression) shift to state 576
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 532
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 576:
## Known stack suffix:
## expression COMMA separated_nonempty_list(COMMA,expression)
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression) . [ RPAREN RBRACK ]
## Transitions:
## Reductions:
-- On RPAREN RBRACK
--   reduce production separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression)

State 577:
## Known stack suffix:
## expression LPAREN call_params
## LR(1) items:
call_expression -> expression LPAREN call_params . RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On RPAREN shift to state 578
## Reductions:

State 578:
## Known stack suffix:
## expression LPAREN call_params RPAREN
## LR(1) items:
call_expression -> expression LPAREN call_params RPAREN . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production call_expression -> expression LPAREN call_params RPAREN

State 579:
## Known stack suffix:
## expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
scrutinee -> expression . [ LBRACE ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On LBRACE
--   reduce production scrutinee -> expression

State 580:
## Known stack suffix:
## WHILE expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
predicate_loop_expression -> WHILE expression . block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On LBRACE shift to state 8
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
-- On block_expression shift to state 581
## Reductions:

State 581:
## Known stack suffix:
## WHILE expression block_expression
## LR(1) items:
predicate_loop_expression -> WHILE expression block_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production predicate_loop_expression -> WHILE expression block_expression

State 582:
## Known stack suffix:
## LOOP
## LR(1) items:
infinite_loop_expression -> LOOP . block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On LBRACE shift to state 8
-- On block_expression shift to state 583
## Reductions:

State 583:
## Known stack suffix:
## LOOP block_expression
## LR(1) items:
infinite_loop_expression -> LOOP block_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production infinite_loop_expression -> LOOP block_expression

State 584:
## Known stack suffix:
## FOR
## LR(1) items:
iterator_loop_expression -> FOR . pattern IN expression block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On OR shift to state 289
-- On pattern shift to state 585
## Reductions:

State 585:
## Known stack suffix:
## FOR pattern
## LR(1) items:
iterator_loop_expression -> FOR pattern . IN expression block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On IN shift to state 586
## Reductions:

State 586:
## Known stack suffix:
## FOR pattern IN
## LR(1) items:
iterator_loop_expression -> FOR pattern IN . expression block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 587
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 587:
## Known stack suffix:
## FOR pattern IN expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
iterator_loop_expression -> FOR pattern IN expression . block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On LBRACE shift to state 8
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
-- On block_expression shift to state 588
## Reductions:

State 588:
## Known stack suffix:
## FOR pattern IN expression block_expression
## LR(1) items:
iterator_loop_expression -> FOR pattern IN expression block_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production iterator_loop_expression -> FOR pattern IN expression block_expression

State 589:
## Known stack suffix:
## predicate_pattern_loop_expression
## LR(1) items:
loop_switch -> predicate_pattern_loop_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production loop_switch -> predicate_pattern_loop_expression

State 590:
## Known stack suffix:
## predicate_loop_expression
## LR(1) items:
loop_switch -> predicate_loop_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production loop_switch -> predicate_loop_expression

State 591:
## Known stack suffix:
## option(loop_label) loop_switch
## LR(1) items:
loop_expression -> option(loop_label) loop_switch . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production loop_expression -> option(loop_label) loop_switch

State 592:
## Known stack suffix:
## label_block_expression
## LR(1) items:
loop_switch -> label_block_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production loop_switch -> label_block_expression

State 593:
## Known stack suffix:
## iterator_loop_expression
## LR(1) items:
loop_switch -> iterator_loop_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production loop_switch -> iterator_loop_expression

State 594:
## Known stack suffix:
## infinite_loop_expression
## LR(1) items:
loop_switch -> infinite_loop_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production loop_switch -> infinite_loop_expression

State 595:
## Known stack suffix:
## block_expression
## LR(1) items:
label_block_expression -> block_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production label_block_expression -> block_expression

State 596:
## Known stack suffix:
## path_in_expression LPAREN option(expr_list)
## LR(1) items:
struct_expression -> path_in_expression LPAREN option(expr_list) . RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On RPAREN shift to state 597
## Reductions:

State 597:
## Known stack suffix:
## path_in_expression LPAREN option(expr_list) RPAREN
## LR(1) items:
struct_expression -> path_in_expression LPAREN option(expr_list) RPAREN . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production struct_expression -> path_in_expression LPAREN option(expr_list) RPAREN

State 598:
## Known stack suffix:
## expr_list
## LR(1) items:
option(expr_list) -> expr_list . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production option(expr_list) -> expr_list

State 599:
## Known stack suffix:
## path_in_expression LBRACE
## LR(1) items:
struct_expression -> path_in_expression LBRACE . struct_expr_field_or_struct_base_opt RBRACE [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On POUND shift to state 1
-- On DOTDOT shift to state 600
-- On struct_expr_fields shift to state 602
-- On struct_expr_field_or_struct_base_opt shift to state 603
-- On struct_expr_field shift to state 605
-- On separated_or_terminated_list(COMMA,struct_expr_field) shift to state 613
-- On separated_nonempty_list(COMMA,struct_expr_field) shift to state 614
-- On outer_attr shift to state 42
-- On loption(separated_nonempty_list(COMMA,struct_expr_field)) shift to state 615
-- On list(terminated(struct_expr_field,COMMA)) shift to state 620
-- On list(outer_attr) shift to state 609
## Reductions:
-- On RAW_IDENT IDENT
--   reduce production list(outer_attr) ->
-- On RBRACE
--   reduce production list(terminated(struct_expr_field,COMMA)) ->
-- On RBRACE COMMA
--   reduce production loption(separated_nonempty_list(COMMA,struct_expr_field)) ->
-- On RBRACE
--   reduce production struct_expr_field_or_struct_base_opt ->
** Conflict on RBRACE

State 600:
## Known stack suffix:
## DOTDOT
## LR(1) items:
struct_expr_field_or_struct_base_opt -> DOTDOT . expression [ RBRACE ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 601
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 601:
## Known stack suffix:
## DOTDOT expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
struct_expr_field_or_struct_base_opt -> DOTDOT expression . [ RBRACE ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On RBRACE
--   reduce production struct_expr_field_or_struct_base_opt -> DOTDOT expression

State 602:
## Known stack suffix:
## struct_expr_fields
## LR(1) items:
struct_expr_field_or_struct_base_opt -> struct_expr_fields . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production struct_expr_field_or_struct_base_opt -> struct_expr_fields

State 603:
## Known stack suffix:
## path_in_expression LBRACE struct_expr_field_or_struct_base_opt
## LR(1) items:
struct_expression -> path_in_expression LBRACE struct_expr_field_or_struct_base_opt . RBRACE [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On RBRACE shift to state 604
## Reductions:

State 604:
## Known stack suffix:
## path_in_expression LBRACE struct_expr_field_or_struct_base_opt RBRACE
## LR(1) items:
struct_expression -> path_in_expression LBRACE struct_expr_field_or_struct_base_opt RBRACE . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production struct_expression -> path_in_expression LBRACE struct_expr_field_or_struct_base_opt RBRACE

State 605:
## Known stack suffix:
## struct_expr_field
## LR(1) items:
list(terminated(struct_expr_field,COMMA)) -> struct_expr_field . COMMA list(terminated(struct_expr_field,COMMA)) [ RBRACE ]
separated_nonempty_list(COMMA,struct_expr_field) -> struct_expr_field . [ RBRACE COMMA ]
separated_nonempty_list(COMMA,struct_expr_field) -> struct_expr_field . COMMA separated_nonempty_list(COMMA,struct_expr_field) [ RBRACE COMMA ]
## Transitions:
-- On COMMA shift to state 606
## Reductions:
-- On RBRACE COMMA
--   reduce production separated_nonempty_list(COMMA,struct_expr_field) -> struct_expr_field
** Conflict on COMMA

State 606:
## Known stack suffix:
## struct_expr_field COMMA
## LR(1) items:
list(terminated(struct_expr_field,COMMA)) -> struct_expr_field COMMA . list(terminated(struct_expr_field,COMMA)) [ RBRACE ]
separated_nonempty_list(COMMA,struct_expr_field) -> struct_expr_field COMMA . separated_nonempty_list(COMMA,struct_expr_field) [ RBRACE COMMA ]
## Transitions:
-- On POUND shift to state 1
-- On struct_expr_field shift to state 605
-- On separated_nonempty_list(COMMA,struct_expr_field) shift to state 607
-- On outer_attr shift to state 42
-- On list(terminated(struct_expr_field,COMMA)) shift to state 608
-- On list(outer_attr) shift to state 609
## Reductions:
-- On RAW_IDENT IDENT
--   reduce production list(outer_attr) ->
-- On RBRACE
--   reduce production list(terminated(struct_expr_field,COMMA)) ->

State 607:
## Known stack suffix:
## struct_expr_field COMMA separated_nonempty_list(COMMA,struct_expr_field)
## LR(1) items:
separated_nonempty_list(COMMA,struct_expr_field) -> struct_expr_field COMMA separated_nonempty_list(COMMA,struct_expr_field) . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE COMMA
--   reduce production separated_nonempty_list(COMMA,struct_expr_field) -> struct_expr_field COMMA separated_nonempty_list(COMMA,struct_expr_field)

State 608:
## Known stack suffix:
## struct_expr_field COMMA list(terminated(struct_expr_field,COMMA))
## LR(1) items:
list(terminated(struct_expr_field,COMMA)) -> struct_expr_field COMMA list(terminated(struct_expr_field,COMMA)) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production list(terminated(struct_expr_field,COMMA)) -> struct_expr_field COMMA list(terminated(struct_expr_field,COMMA))

State 609:
## Known stack suffix:
## list(outer_attr)
## LR(1) items:
struct_expr_field -> list(outer_attr) . ident COLON expression [ RBRACE COMMA ]
## Transitions:
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On ident shift to state 610
## Reductions:

State 610:
## Known stack suffix:
## list(outer_attr) ident
## LR(1) items:
struct_expr_field -> list(outer_attr) ident . COLON expression [ RBRACE COMMA ]
## Transitions:
-- On COLON shift to state 611
## Reductions:

State 611:
## Known stack suffix:
## list(outer_attr) ident COLON
## LR(1) items:
struct_expr_field -> list(outer_attr) ident COLON . expression [ RBRACE COMMA ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 612
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 612:
## Known stack suffix:
## list(outer_attr) ident COLON expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
struct_expr_field -> list(outer_attr) ident COLON expression . [ RBRACE COMMA ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On RBRACE COMMA
--   reduce production struct_expr_field -> list(outer_attr) ident COLON expression

State 613:
## Known stack suffix:
## separated_or_terminated_list(COMMA,struct_expr_field)
## LR(1) items:
struct_expr_fields -> separated_or_terminated_list(COMMA,struct_expr_field) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production struct_expr_fields -> separated_or_terminated_list(COMMA,struct_expr_field)

State 614:
## Known stack suffix:
## separated_nonempty_list(COMMA,struct_expr_field)
## LR(1) items:
loption(separated_nonempty_list(COMMA,struct_expr_field)) -> separated_nonempty_list(COMMA,struct_expr_field) . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE COMMA
--   reduce production loption(separated_nonempty_list(COMMA,struct_expr_field)) -> separated_nonempty_list(COMMA,struct_expr_field)

State 615:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,struct_expr_field))
## LR(1) items:
separated_or_terminated_list(COMMA,struct_expr_field) -> loption(separated_nonempty_list(COMMA,struct_expr_field)) . [ RBRACE ]
struct_expr_fields -> loption(separated_nonempty_list(COMMA,struct_expr_field)) . COMMA struct_base [ RBRACE ]
## Transitions:
-- On COMMA shift to state 616
## Reductions:
-- On RBRACE
--   reduce production separated_or_terminated_list(COMMA,struct_expr_field) -> loption(separated_nonempty_list(COMMA,struct_expr_field))

State 616:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,struct_expr_field)) COMMA
## LR(1) items:
struct_expr_fields -> loption(separated_nonempty_list(COMMA,struct_expr_field)) COMMA . struct_base [ RBRACE ]
## Transitions:
-- On DOTDOT shift to state 617
-- On struct_base shift to state 619
## Reductions:

State 617:
## Known stack suffix:
## DOTDOT
## LR(1) items:
struct_base -> DOTDOT . expression [ RBRACE ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 618
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 618:
## Known stack suffix:
## DOTDOT expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
struct_base -> DOTDOT expression . [ RBRACE ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On RBRACE
--   reduce production struct_base -> DOTDOT expression

State 619:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,struct_expr_field)) COMMA struct_base
## LR(1) items:
struct_expr_fields -> loption(separated_nonempty_list(COMMA,struct_expr_field)) COMMA struct_base . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production struct_expr_fields -> loption(separated_nonempty_list(COMMA,struct_expr_field)) COMMA struct_base

State 620:
## Known stack suffix:
## list(terminated(struct_expr_field,COMMA))
## LR(1) items:
separated_or_terminated_list(COMMA,struct_expr_field) -> list(terminated(struct_expr_field,COMMA)) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production separated_or_terminated_list(COMMA,struct_expr_field) -> list(terminated(struct_expr_field,COMMA))

State 621:
## Known stack suffix:
## AMPMUT expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> AMPMUT expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> AMPMUT expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 622:
## Known stack suffix:
## AND expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> AND expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> AND expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 623:
## Known stack suffix:
## expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
expr_or_typ_block -> expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production expr_or_typ_block -> expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 624:
## Known stack suffix:
## ASYNC OR option(closure_params) OR expr_or_typ_block
## LR(1) items:
closure_expression -> ASYNC OR option(closure_params) OR expr_or_typ_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production closure_expression -> ASYNC OR option(closure_params) OR expr_or_typ_block

State 625:
## Known stack suffix:
## nonempty_separated_or_terminated_list(COMMA,closure_param)
## LR(1) items:
closure_params -> nonempty_separated_or_terminated_list(COMMA,closure_param) . [ OR ]
## Transitions:
## Reductions:
-- On OR
--   reduce production closure_params -> nonempty_separated_or_terminated_list(COMMA,closure_param)

State 626:
## Known stack suffix:
## nonempty_list(terminated(closure_param,COMMA))
## LR(1) items:
nonempty_separated_or_terminated_list(COMMA,closure_param) -> nonempty_list(terminated(closure_param,COMMA)) . [ OR ]
## Transitions:
## Reductions:
-- On OR
--   reduce production nonempty_separated_or_terminated_list(COMMA,closure_param) -> nonempty_list(terminated(closure_param,COMMA))

State 627:
## Known stack suffix:
## list(outer_attr)
## LR(1) items:
closure_param -> list(outer_attr) . pattern_no_top_alt option(typ_opt) [ OR COMMA ]
## Transitions:
-- On UNDERSCORE shift to state 290
-- On TRUE shift to state 291
-- On STRING_LIT shift to state 292
-- On REF shift to state 293
-- On RAW_STRING_LIT shift to state 297
-- On RAW_IDENT shift to state 18
-- On RAW_C_STRING shift to state 298
-- On RAW_BYTE_STRING shift to state 299
-- On PATHSEP shift to state 4
-- On MUT shift to state 300
-- On MINUS shift to state 304
-- On LT shift to state 52
-- On LPAREN shift to state 307
-- On LBRACK shift to state 319
-- On INT_LIT shift to state 324
-- On IDENT shift to state 19
-- On FLOAT_LIT shift to state 325
-- On FALSE shift to state 326
-- On DOTDOTEQ shift to state 327
-- On DOTDOT shift to state 347
-- On C_STRING shift to state 348
-- On CHAR_LIT shift to state 349
-- On BYTE_STRING shift to state 350
-- On BYTE shift to state 330
-- On ANDAND shift to state 351
-- On AND shift to state 355
-- On tuple_struct_pattern shift to state 357
-- On tuple_pattern shift to state 358
-- On struct_pattern shift to state 359
-- On range_to_inclusive_pattern shift to state 414
-- On range_pattern_bound shift to state 415
-- On range_pattern shift to state 421
-- On range_inclusive_pattern shift to state 422
-- On range_from_pattern shift to state 423
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On pattern_no_top_alt shift to state 628
-- On path_in_expression shift to state 360
-- On path_expression shift to state 425
-- On option(PATHSEP) shift to state 345
-- On obsolete_range_pattern shift to state 426
-- On no_range_pattern shift to state 427
-- On neg shift to state 402
-- On literal_pattern shift to state 405
-- On identifier_pattern shift to state 406
-- On ident shift to state 410
## Reductions:
-- On INT_LIT FLOAT_LIT
--   reduce production neg ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
** Conflict on RAW_IDENT INT_LIT IDENT FLOAT_LIT

State 628:
## Known stack suffix:
## list(outer_attr) pattern_no_top_alt
## LR(1) items:
closure_param -> list(outer_attr) pattern_no_top_alt . option(typ_opt) [ OR COMMA ]
## Transitions:
-- On COLON shift to state 629
-- On typ_opt shift to state 631
-- On option(typ_opt) shift to state 632
## Reductions:
-- On OR COMMA
--   reduce production option(typ_opt) ->

State 629:
## Known stack suffix:
## COLON
## LR(1) items:
typ_opt -> COLON . typ [ OR COMMA ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On IMPL shift to state 73
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 630
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On lifetime shift to state 179
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 630:
## Known stack suffix:
## COLON typ
## LR(1) items:
typ_opt -> COLON typ . [ OR COMMA ]
## Transitions:
## Reductions:
-- On OR COMMA
--   reduce production typ_opt -> COLON typ

State 631:
## Known stack suffix:
## typ_opt
## LR(1) items:
option(typ_opt) -> typ_opt . [ OR COMMA ]
## Transitions:
## Reductions:
-- On OR COMMA
--   reduce production option(typ_opt) -> typ_opt

State 632:
## Known stack suffix:
## list(outer_attr) pattern_no_top_alt option(typ_opt)
## LR(1) items:
closure_param -> list(outer_attr) pattern_no_top_alt option(typ_opt) . [ OR COMMA ]
## Transitions:
## Reductions:
-- On OR COMMA
--   reduce production closure_param -> list(outer_attr) pattern_no_top_alt option(typ_opt)

State 633:
## Known stack suffix:
## closure_params
## LR(1) items:
option(closure_params) -> closure_params . [ OR ]
## Transitions:
## Reductions:
-- On OR
--   reduce production option(closure_params) -> closure_params

State 634:
## Known stack suffix:
## closure_param
## LR(1) items:
nonempty_list(terminated(closure_param,COMMA)) -> closure_param . COMMA [ OR ]
nonempty_list(terminated(closure_param,COMMA)) -> closure_param . COMMA nonempty_list(terminated(closure_param,COMMA)) [ OR ]
separated_nonempty_list(COMMA,closure_param) -> closure_param . [ OR ]
separated_nonempty_list(COMMA,closure_param) -> closure_param . COMMA separated_nonempty_list(COMMA,closure_param) [ OR ]
## Transitions:
-- On COMMA shift to state 635
## Reductions:
-- On OR
--   reduce production separated_nonempty_list(COMMA,closure_param) -> closure_param

State 635:
## Known stack suffix:
## closure_param COMMA
## LR(1) items:
nonempty_list(terminated(closure_param,COMMA)) -> closure_param COMMA . [ OR ]
nonempty_list(terminated(closure_param,COMMA)) -> closure_param COMMA . nonempty_list(terminated(closure_param,COMMA)) [ OR ]
separated_nonempty_list(COMMA,closure_param) -> closure_param COMMA . separated_nonempty_list(COMMA,closure_param) [ OR ]
## Transitions:
-- On POUND shift to state 1
-- On separated_nonempty_list(COMMA,closure_param) shift to state 636
-- On outer_attr shift to state 42
-- On nonempty_list(terminated(closure_param,COMMA)) shift to state 637
-- On list(outer_attr) shift to state 627
-- On closure_param shift to state 634
## Reductions:
-- On UNDERSCORE TRUE SUPER STRING_LIT SELFVALUE SELFTYPE REF RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PATHSEP MUT MINUS LT LPAREN LBRACK INT_LIT IDENT FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CHAR_LIT BYTE_STRING BYTE ANDAND AND
--   reduce production list(outer_attr) ->
-- On OR
--   reduce production nonempty_list(terminated(closure_param,COMMA)) -> closure_param COMMA

State 636:
## Known stack suffix:
## closure_param COMMA separated_nonempty_list(COMMA,closure_param)
## LR(1) items:
separated_nonempty_list(COMMA,closure_param) -> closure_param COMMA separated_nonempty_list(COMMA,closure_param) . [ OR ]
## Transitions:
## Reductions:
-- On OR
--   reduce production separated_nonempty_list(COMMA,closure_param) -> closure_param COMMA separated_nonempty_list(COMMA,closure_param)

State 637:
## Known stack suffix:
## closure_param COMMA nonempty_list(terminated(closure_param,COMMA))
## LR(1) items:
nonempty_list(terminated(closure_param,COMMA)) -> closure_param COMMA nonempty_list(terminated(closure_param,COMMA)) . [ OR ]
## Transitions:
## Reductions:
-- On OR
--   reduce production nonempty_list(terminated(closure_param,COMMA)) -> closure_param COMMA nonempty_list(terminated(closure_param,COMMA))

State 638:
## Known stack suffix:
## ASYNC MOVE
## LR(1) items:
async_block_expression -> ASYNC MOVE . block_expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
closure_expression -> ASYNC MOVE . OR option(closure_params) OR expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On OR shift to state 639
-- On LBRACE shift to state 8
-- On block_expression shift to state 643
## Reductions:

State 639:
## Known stack suffix:
## ASYNC MOVE OR
## LR(1) items:
closure_expression -> ASYNC MOVE OR . option(closure_params) OR expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On POUND shift to state 1
-- On separated_nonempty_list(COMMA,closure_param) shift to state 41
-- On outer_attr shift to state 42
-- On option(closure_params) shift to state 640
-- On nonempty_separated_or_terminated_list(COMMA,closure_param) shift to state 625
-- On nonempty_list(terminated(closure_param,COMMA)) shift to state 626
-- On list(outer_attr) shift to state 627
-- On closure_params shift to state 633
-- On closure_param shift to state 634
## Reductions:
-- On UNDERSCORE TRUE SUPER STRING_LIT SELFVALUE SELFTYPE REF RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING PATHSEP MUT MINUS LT LPAREN LBRACK INT_LIT IDENT FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CHAR_LIT BYTE_STRING BYTE ANDAND AND
--   reduce production list(outer_attr) ->
-- On OR
--   reduce production option(closure_params) ->

State 640:
## Known stack suffix:
## ASYNC MOVE OR option(closure_params)
## LR(1) items:
closure_expression -> ASYNC MOVE OR option(closure_params) . OR expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On OR shift to state 641
## Reductions:

State 641:
## Known stack suffix:
## ASYNC MOVE OR option(closure_params) OR
## LR(1) items:
closure_expression -> ASYNC MOVE OR option(closure_params) OR . expr_or_typ_block [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On RARROW shift to state 46
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 623
-- On expr_or_typ_block shift to state 642
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 642:
## Known stack suffix:
## ASYNC MOVE OR option(closure_params) OR expr_or_typ_block
## LR(1) items:
closure_expression -> ASYNC MOVE OR option(closure_params) OR expr_or_typ_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production closure_expression -> ASYNC MOVE OR option(closure_params) OR expr_or_typ_block

State 643:
## Known stack suffix:
## ASYNC MOVE block_expression
## LR(1) items:
async_block_expression -> ASYNC MOVE block_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production async_block_expression -> ASYNC MOVE block_expression

State 644:
## Known stack suffix:
## ASYNC block_expression
## LR(1) items:
async_block_expression -> ASYNC block_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production async_block_expression -> ASYNC block_expression

State 645:
## Known stack suffix:
## BREAK option(LIFETIME_OR_LABEL) option(expression)
## LR(1) items:
break_expression -> BREAK option(LIFETIME_OR_LABEL) option(expression) . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production break_expression -> BREAK option(LIFETIME_OR_LABEL) option(expression)

State 646:
## Known stack suffix:
## expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
option(expression) -> expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production option(expression) -> expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 647:
## Known stack suffix:
## DOTDOT expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> DOTDOT expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production range_expression -> DOTDOT expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 648:
## Known stack suffix:
## DOTDOTEQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> DOTDOTEQ expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production range_expression -> DOTDOTEQ expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 649:
## Known stack suffix:
## IF LET pattern EQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
if_let_expression -> IF LET pattern EQ expression . block_expression else_opt [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On LBRACE shift to state 8
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
-- On block_expression shift to state 650
## Reductions:

State 650:
## Known stack suffix:
## IF LET pattern EQ expression block_expression
## LR(1) items:
if_let_expression -> IF LET pattern EQ expression block_expression . else_opt [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On ELSE shift to state 651
-- On else_opt shift to state 655
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production else_opt ->
** Conflict on ELSE

State 651:
## Known stack suffix:
## ELSE
## LR(1) items:
else_opt -> ELSE . block_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
else_opt -> ELSE . if_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
else_opt -> ELSE . if_let_expression [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On LBRACE shift to state 8
-- On IF shift to state 287
-- On if_let_expression shift to state 652
-- On if_expression shift to state 653
-- On block_expression shift to state 654
## Reductions:

State 652:
## Known stack suffix:
## ELSE if_let_expression
## LR(1) items:
else_opt -> ELSE if_let_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production else_opt -> ELSE if_let_expression

State 653:
## Known stack suffix:
## ELSE if_expression
## LR(1) items:
else_opt -> ELSE if_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production else_opt -> ELSE if_expression

State 654:
## Known stack suffix:
## ELSE block_expression
## LR(1) items:
else_opt -> ELSE block_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production else_opt -> ELSE block_expression

State 655:
## Known stack suffix:
## IF LET pattern EQ expression block_expression else_opt
## LR(1) items:
if_let_expression -> IF LET pattern EQ expression block_expression else_opt . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production if_let_expression -> IF LET pattern EQ expression block_expression else_opt

State 656:
## Known stack suffix:
## IF expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
if_expression -> IF expression . block_expression else_opt [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On LBRACE shift to state 8
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
-- On block_expression shift to state 657
## Reductions:

State 657:
## Known stack suffix:
## IF expression block_expression
## LR(1) items:
if_expression -> IF expression block_expression . else_opt [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On ELSE shift to state 651
-- On else_opt shift to state 658
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production else_opt ->
** Conflict on ELSE

State 658:
## Known stack suffix:
## IF expression block_expression else_opt
## LR(1) items:
if_expression -> IF expression block_expression else_opt . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production if_expression -> IF expression block_expression else_opt

State 659:
## Known stack suffix:
## separated_nonempty_list(COMMA,expression)
## LR(1) items:
nonempty_separated_or_terminated_list(COMMA,expression) -> separated_nonempty_list(COMMA,expression) . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production nonempty_separated_or_terminated_list(COMMA,expression) -> separated_nonempty_list(COMMA,expression)

State 660:
## Known stack suffix:
## nonempty_separated_or_terminated_list(COMMA,expression)
## LR(1) items:
array_elements -> nonempty_separated_or_terminated_list(COMMA,expression) . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production array_elements -> nonempty_separated_or_terminated_list(COMMA,expression)

State 661:
## Known stack suffix:
## nonempty_list(terminated(expression,COMMA))
## LR(1) items:
nonempty_separated_or_terminated_list(COMMA,expression) -> nonempty_list(terminated(expression,COMMA)) . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production nonempty_separated_or_terminated_list(COMMA,expression) -> nonempty_list(terminated(expression,COMMA))

State 662:
## Known stack suffix:
## expression
## LR(1) items:
array_elements -> expression . SEMI expression [ RBRACK ]
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
nonempty_list(terminated(expression,COMMA)) -> expression . COMMA [ RBRACK ]
nonempty_list(terminated(expression,COMMA)) -> expression . COMMA nonempty_list(terminated(expression,COMMA)) [ RBRACK ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
separated_nonempty_list(COMMA,expression) -> expression . [ RBRACK ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RBRACK ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On SEMI shift to state 663
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On COMMA shift to state 665
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On RBRACK
--   reduce production separated_nonempty_list(COMMA,expression) -> expression

State 663:
## Known stack suffix:
## expression SEMI
## LR(1) items:
array_elements -> expression SEMI . expression [ RBRACK ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 664
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 664:
## Known stack suffix:
## expression SEMI expression
## LR(1) items:
array_elements -> expression SEMI expression . [ RBRACK ]
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On RBRACK
--   reduce production array_elements -> expression SEMI expression

State 665:
## Known stack suffix:
## expression COMMA
## LR(1) items:
nonempty_list(terminated(expression,COMMA)) -> expression COMMA . [ RBRACK ]
nonempty_list(terminated(expression,COMMA)) -> expression COMMA . nonempty_list(terminated(expression,COMMA)) [ RBRACK ]
separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RBRACK ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On separated_nonempty_list(COMMA,expression) shift to state 576
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(terminated(expression,COMMA)) shift to state 666
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 667
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On RBRACK
--   reduce production nonempty_list(terminated(expression,COMMA)) -> expression COMMA
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 666:
## Known stack suffix:
## expression COMMA nonempty_list(terminated(expression,COMMA))
## LR(1) items:
nonempty_list(terminated(expression,COMMA)) -> expression COMMA nonempty_list(terminated(expression,COMMA)) . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production nonempty_list(terminated(expression,COMMA)) -> expression COMMA nonempty_list(terminated(expression,COMMA))

State 667:
## Known stack suffix:
## expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
nonempty_list(terminated(expression,COMMA)) -> expression . COMMA [ RBRACK ]
nonempty_list(terminated(expression,COMMA)) -> expression . COMMA nonempty_list(terminated(expression,COMMA)) [ RBRACK ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
separated_nonempty_list(COMMA,expression) -> expression . [ RBRACK ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RBRACK ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On COMMA shift to state 665
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On RBRACK
--   reduce production separated_nonempty_list(COMMA,expression) -> expression

State 668:
## Known stack suffix:
## LBRACK array_elements
## LR(1) items:
array_expression -> LBRACK array_elements . RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On RBRACK shift to state 669
## Reductions:

State 669:
## Known stack suffix:
## LBRACK array_elements RBRACK
## LR(1) items:
array_expression -> LBRACK array_elements RBRACK . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production array_expression -> LBRACK array_elements RBRACK

State 670:
## Known stack suffix:
## tuple_elements
## LR(1) items:
option(tuple_elements) -> tuple_elements . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production option(tuple_elements) -> tuple_elements

State 671:
## Known stack suffix:
## separated_nonempty_list(COMMA,expression)
## LR(1) items:
tuple_elements -> separated_nonempty_list(COMMA,expression) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production tuple_elements -> separated_nonempty_list(COMMA,expression)

State 672:
## Known stack suffix:
## LPAREN option(tuple_elements)
## LR(1) items:
tuple_expression -> LPAREN option(tuple_elements) . RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On RPAREN shift to state 673
## Reductions:

State 673:
## Known stack suffix:
## LPAREN option(tuple_elements) RPAREN
## LR(1) items:
tuple_expression -> LPAREN option(tuple_elements) RPAREN . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production tuple_expression -> LPAREN option(tuple_elements) RPAREN

State 674:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
grouped_expression -> LPAREN expression . RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
separated_nonempty_list(COMMA,expression) -> expression . [ RPAREN ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAREN ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RPAREN QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On RPAREN shift to state 675
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On COMMA shift to state 575
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,expression) -> expression
** Conflict on RPAREN

State 675:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
grouped_expression -> LPAREN expression RPAREN . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production grouped_expression -> LPAREN expression RPAREN

State 676:
## Known stack suffix:
## MATCH scrutinee
## LR(1) items:
match_expression -> MATCH scrutinee . LBRACE list(inner_attr) option(match_arms) RBRACE [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On LBRACE shift to state 677
## Reductions:

State 677:
## Known stack suffix:
## MATCH scrutinee LBRACE
## LR(1) items:
match_expression -> MATCH scrutinee LBRACE . list(inner_attr) option(match_arms) RBRACE [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On POUND shift to state 9
-- On list(inner_attr) shift to state 678
-- On inner_attr shift to state 703
## Reductions:
-- On RBRACE POUND OR
--   reduce production list(inner_attr) ->
** Conflict on POUND

State 678:
## Known stack suffix:
## MATCH scrutinee LBRACE list(inner_attr)
## LR(1) items:
match_expression -> MATCH scrutinee LBRACE list(inner_attr) . option(match_arms) RBRACE [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On POUND shift to state 1
-- On outer_attr shift to state 42
-- On option(match_arms) shift to state 679
-- On match_arms shift to state 681
-- On match_arm shift to state 682
-- On list(outer_attr) shift to state 690
-- On list(first_arms) shift to state 696
-- On first_arms shift to state 701
## Reductions:
-- On POUND OR
--   reduce production list(first_arms) ->
-- On OR
--   reduce production list(outer_attr) ->
-- On RBRACE
--   reduce production option(match_arms) ->
** Conflict on POUND OR

State 679:
## Known stack suffix:
## MATCH scrutinee LBRACE list(inner_attr) option(match_arms)
## LR(1) items:
match_expression -> MATCH scrutinee LBRACE list(inner_attr) option(match_arms) . RBRACE [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On RBRACE shift to state 680
## Reductions:

State 680:
## Known stack suffix:
## MATCH scrutinee LBRACE list(inner_attr) option(match_arms) RBRACE
## LR(1) items:
match_expression -> MATCH scrutinee LBRACE list(inner_attr) option(match_arms) RBRACE . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production match_expression -> MATCH scrutinee LBRACE list(inner_attr) option(match_arms) RBRACE

State 681:
## Known stack suffix:
## match_arms
## LR(1) items:
option(match_arms) -> match_arms . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production option(match_arms) -> match_arms

State 682:
## Known stack suffix:
## match_arm
## LR(1) items:
first_arms -> match_arm . FATARROW block_or_not [ POUND OR ]
## Transitions:
-- On FATARROW shift to state 683
## Reductions:

State 683:
## Known stack suffix:
## match_arm FATARROW
## LR(1) items:
first_arms -> match_arm FATARROW . block_or_not [ POUND OR ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 684
-- On exprs_with_block shift to state 686
-- On expression shift to state 485
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_or_not shift to state 689
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 684:
## Known stack suffix:
## exprs_without_block
## LR(1) items:
block_or_not -> exprs_without_block . COMMA [ POUND OR ]
expression -> exprs_without_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
-- On COMMA shift to state 685
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND
--   reduce production expression -> exprs_without_block

State 685:
## Known stack suffix:
## exprs_without_block COMMA
## LR(1) items:
block_or_not -> exprs_without_block COMMA . [ POUND OR ]
## Transitions:
## Reductions:
-- On POUND OR
--   reduce production block_or_not -> exprs_without_block COMMA

State 686:
## Known stack suffix:
## exprs_with_block
## LR(1) items:
block_or_not -> exprs_with_block . option(COMMA) [ POUND OR ]
expression -> exprs_with_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
-- On COMMA shift to state 687
-- On option(COMMA) shift to state 688
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND
--   reduce production expression -> exprs_with_block
-- On POUND OR
--   reduce production option(COMMA) ->
** Conflict on OR

State 687:
## Known stack suffix:
## COMMA
## LR(1) items:
option(COMMA) -> COMMA . [ RBRACE POUND OR ]
## Transitions:
## Reductions:
-- On RBRACE POUND OR
--   reduce production option(COMMA) -> COMMA

State 688:
## Known stack suffix:
## exprs_with_block option(COMMA)
## LR(1) items:
block_or_not -> exprs_with_block option(COMMA) . [ POUND OR ]
## Transitions:
## Reductions:
-- On POUND OR
--   reduce production block_or_not -> exprs_with_block option(COMMA)

State 689:
## Known stack suffix:
## match_arm FATARROW block_or_not
## LR(1) items:
first_arms -> match_arm FATARROW block_or_not . [ POUND OR ]
## Transitions:
## Reductions:
-- On POUND OR
--   reduce production first_arms -> match_arm FATARROW block_or_not

State 690:
## Known stack suffix:
## list(outer_attr)
## LR(1) items:
match_arm -> list(outer_attr) . pattern option(match_arm_guard) [ FATARROW ]
## Transitions:
-- On OR shift to state 289
-- On pattern shift to state 691
## Reductions:

State 691:
## Known stack suffix:
## list(outer_attr) pattern
## LR(1) items:
match_arm -> list(outer_attr) pattern . option(match_arm_guard) [ FATARROW ]
## Transitions:
-- On IF shift to state 692
-- On option(match_arm_guard) shift to state 694
-- On match_arm_guard shift to state 695
## Reductions:
-- On FATARROW
--   reduce production option(match_arm_guard) ->

State 692:
## Known stack suffix:
## IF
## LR(1) items:
match_arm_guard -> IF . expression [ FATARROW ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 693
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 693:
## Known stack suffix:
## IF expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
match_arm_guard -> IF expression . [ FATARROW ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE FATARROW EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On FATARROW
--   reduce production match_arm_guard -> IF expression

State 694:
## Known stack suffix:
## list(outer_attr) pattern option(match_arm_guard)
## LR(1) items:
match_arm -> list(outer_attr) pattern option(match_arm_guard) . [ FATARROW ]
## Transitions:
## Reductions:
-- On FATARROW
--   reduce production match_arm -> list(outer_attr) pattern option(match_arm_guard)

State 695:
## Known stack suffix:
## match_arm_guard
## LR(1) items:
option(match_arm_guard) -> match_arm_guard . [ FATARROW ]
## Transitions:
## Reductions:
-- On FATARROW
--   reduce production option(match_arm_guard) -> match_arm_guard

State 696:
## Known stack suffix:
## list(first_arms)
## LR(1) items:
match_arms -> list(first_arms) . match_arm FATARROW expression option(COMMA) [ RBRACE ]
## Transitions:
-- On POUND shift to state 1
-- On outer_attr shift to state 42
-- On match_arm shift to state 697
-- On list(outer_attr) shift to state 690
## Reductions:
-- On OR
--   reduce production list(outer_attr) ->

State 697:
## Known stack suffix:
## list(first_arms) match_arm
## LR(1) items:
match_arms -> list(first_arms) match_arm . FATARROW expression option(COMMA) [ RBRACE ]
## Transitions:
-- On FATARROW shift to state 698
## Reductions:

State 698:
## Known stack suffix:
## list(first_arms) match_arm FATARROW
## LR(1) items:
match_arms -> list(first_arms) match_arm FATARROW . expression option(COMMA) [ RBRACE ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 699
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 699:
## Known stack suffix:
## list(first_arms) match_arm FATARROW expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
match_arms -> list(first_arms) match_arm FATARROW expression . option(COMMA) [ RBRACE ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On COMMA shift to state 687
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
-- On option(COMMA) shift to state 700
## Reductions:
-- On RBRACE
--   reduce production option(COMMA) ->

State 700:
## Known stack suffix:
## list(first_arms) match_arm FATARROW expression option(COMMA)
## LR(1) items:
match_arms -> list(first_arms) match_arm FATARROW expression option(COMMA) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production match_arms -> list(first_arms) match_arm FATARROW expression option(COMMA)

State 701:
## Known stack suffix:
## first_arms
## LR(1) items:
list(first_arms) -> first_arms . list(first_arms) [ POUND OR ]
## Transitions:
-- On POUND shift to state 1
-- On outer_attr shift to state 42
-- On match_arm shift to state 682
-- On list(outer_attr) shift to state 690
-- On list(first_arms) shift to state 702
-- On first_arms shift to state 701
## Reductions:
-- On POUND OR
--   reduce production list(first_arms) ->
-- On OR
--   reduce production list(outer_attr) ->
** Conflict on POUND OR

State 702:
## Known stack suffix:
## first_arms list(first_arms)
## LR(1) items:
list(first_arms) -> first_arms list(first_arms) . [ POUND OR ]
## Transitions:
## Reductions:
-- On POUND OR
--   reduce production list(first_arms) -> first_arms list(first_arms)

State 703:
## Known stack suffix:
## inner_attr
## LR(1) items:
list(inner_attr) -> inner_attr . list(inner_attr) [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On POUND shift to state 9
-- On list(inner_attr) shift to state 704
-- On inner_attr shift to state 703
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production list(inner_attr) ->
** Conflict on POUND

State 704:
## Known stack suffix:
## inner_attr list(inner_attr)
## LR(1) items:
list(inner_attr) -> inner_attr list(inner_attr) . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production list(inner_attr) -> inner_attr list(inner_attr)

State 705:
## Known stack suffix:
## MINUS expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> MINUS expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> MINUS expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 706:
## Known stack suffix:
## MOVE OR option(closure_params) OR expr_or_typ_block
## LR(1) items:
closure_expression -> MOVE OR option(closure_params) OR expr_or_typ_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production closure_expression -> MOVE OR option(closure_params) OR expr_or_typ_block

State 707:
## Known stack suffix:
## NOT expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> NOT expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> NOT expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 708:
## Known stack suffix:
## LBRACK typ SEMI expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
type_no_bounds -> LBRACK typ SEMI expression . RBRACK [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On RBRACK shift to state 709
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:

State 709:
## Known stack suffix:
## LBRACK typ SEMI expression RBRACK
## LR(1) items:
type_no_bounds -> LBRACK typ SEMI expression RBRACK . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_no_bounds -> LBRACK typ SEMI expression RBRACK

State 710:
## Known stack suffix:
## LBRACK typ RBRACK
## LR(1) items:
type_no_bounds -> LBRACK typ RBRACK . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_no_bounds -> LBRACK typ RBRACK

State 711:
## Known stack suffix:
## LPAREN typ
## LR(1) items:
list(terminated(typ,COMMA)) -> typ . COMMA list(terminated(typ,COMMA)) [ RPAREN ]
separated_nonempty_list(COMMA,typ) -> typ . [ RPAREN ]
separated_nonempty_list(COMMA,typ) -> typ . COMMA separated_nonempty_list(COMMA,typ) [ RPAREN ]
type_no_bounds -> LPAREN typ . RPAREN [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On RPAREN shift to state 712
-- On COMMA shift to state 713
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,typ) -> typ
** Conflict on RPAREN

State 712:
## Known stack suffix:
## LPAREN typ RPAREN
## LR(1) items:
type_no_bounds -> LPAREN typ RPAREN . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production type_no_bounds -> LPAREN typ RPAREN

State 713:
## Known stack suffix:
## typ COMMA
## LR(1) items:
list(terminated(typ,COMMA)) -> typ COMMA . list(terminated(typ,COMMA)) [ RPAREN ]
separated_nonempty_list(COMMA,typ) -> typ COMMA . separated_nonempty_list(COMMA,typ) [ RPAREN ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On IMPL shift to state 73
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 714
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On separated_nonempty_list(COMMA,typ) shift to state 219
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On list(terminated(typ,COMMA)) shift to state 715
-- On lifetime shift to state 179
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On RPAREN
--   reduce production list(terminated(typ,COMMA)) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 714:
## Known stack suffix:
## typ
## LR(1) items:
list(terminated(typ,COMMA)) -> typ . COMMA list(terminated(typ,COMMA)) [ RPAREN ]
separated_nonempty_list(COMMA,typ) -> typ . [ RPAREN ]
separated_nonempty_list(COMMA,typ) -> typ . COMMA separated_nonempty_list(COMMA,typ) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 713
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,typ) -> typ

State 715:
## Known stack suffix:
## typ COMMA list(terminated(typ,COMMA))
## LR(1) items:
list(terminated(typ,COMMA)) -> typ COMMA list(terminated(typ,COMMA)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production list(terminated(typ,COMMA)) -> typ COMMA list(terminated(typ,COMMA))

State 716:
## Known stack suffix:
## LPAREN separated_or_terminated_list(COMMA,typ)
## LR(1) items:
tuple_type -> LPAREN separated_or_terminated_list(COMMA,typ) . RPAREN [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On RPAREN shift to state 717
## Reductions:

State 717:
## Known stack suffix:
## LPAREN separated_or_terminated_list(COMMA,typ) RPAREN
## LR(1) items:
tuple_type -> LPAREN separated_or_terminated_list(COMMA,typ) RPAREN . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production tuple_type -> LPAREN separated_or_terminated_list(COMMA,typ) RPAREN

State 718:
## Known stack suffix:
## separated_nonempty_list(COMMA,typ)
## LR(1) items:
loption(separated_nonempty_list(COMMA,typ)) -> separated_nonempty_list(COMMA,typ) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,typ)) -> separated_nonempty_list(COMMA,typ)

State 719:
## Known stack suffix:
## LPAREN option(question_or_for)
## LR(1) items:
trait_bound -> option(question_or_for) . type_path [ RPAREN PLUS COMMA ]
trait_bound -> LPAREN option(question_or_for) . type_path RPAREN [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On PATHSEP shift to state 4
-- On type_path shift to state 720
-- On option(PATHSEP) shift to state 93
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->

State 720:
## Known stack suffix:
## LPAREN option(question_or_for) type_path
## LR(1) items:
trait_bound -> option(question_or_for) type_path . [ RPAREN PLUS COMMA ]
trait_bound -> LPAREN option(question_or_for) type_path . RPAREN [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On RPAREN shift to state 271
## Reductions:
-- On RPAREN PLUS COMMA
--   reduce production trait_bound -> option(question_or_for) type_path
** Conflict on RPAREN

State 721:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,typ))
## LR(1) items:
separated_or_terminated_list(COMMA,typ) -> loption(separated_nonempty_list(COMMA,typ)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_or_terminated_list(COMMA,typ) -> loption(separated_nonempty_list(COMMA,typ))

State 722:
## Known stack suffix:
## list(terminated(typ,COMMA))
## LR(1) items:
separated_or_terminated_list(COMMA,typ) -> list(terminated(typ,COMMA)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_or_terminated_list(COMMA,typ) -> list(terminated(typ,COMMA))

State 723:
## Known stack suffix:
## LT typ
## LR(1) items:
qualified_path_type -> LT typ . option(as_typath) GT [ SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE ]
## Transitions:
-- On AS shift to state 724
-- On option(as_typath) shift to state 726
-- On as_typath shift to state 728
## Reductions:
-- On GT
--   reduce production option(as_typath) ->

State 724:
## Known stack suffix:
## AS
## LR(1) items:
as_typath -> AS . type_path [ GT ]
## Transitions:
-- On PATHSEP shift to state 4
-- On type_path shift to state 725
-- On option(PATHSEP) shift to state 93
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->

State 725:
## Known stack suffix:
## AS type_path
## LR(1) items:
as_typath -> AS type_path . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production as_typath -> AS type_path

State 726:
## Known stack suffix:
## LT typ option(as_typath)
## LR(1) items:
qualified_path_type -> LT typ option(as_typath) . GT [ SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE ]
## Transitions:
-- On GT shift to state 727
## Reductions:

State 727:
## Known stack suffix:
## LT typ option(as_typath) GT
## LR(1) items:
qualified_path_type -> LT typ option(as_typath) GT . [ SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE ]
## Transitions:
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production qualified_path_type -> LT typ option(as_typath) GT

State 728:
## Known stack suffix:
## as_typath
## LR(1) items:
option(as_typath) -> as_typath . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production option(as_typath) -> as_typath

State 729:
## Known stack suffix:
## STAR MUT type_no_bounds
## LR(1) items:
raw_pointer_type -> STAR MUT type_no_bounds . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production raw_pointer_type -> STAR MUT type_no_bounds

State 730:
## Known stack suffix:
## STAR CONST
## LR(1) items:
raw_pointer_type -> STAR CONST . type_no_bounds [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
-- On UNDERSCORE shift to state 47
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LBRACK shift to state 72
-- On IMPL shift to state 119
-- On FOR shift to state 75
-- On DYN shift to state 122
-- On AND shift to state 116
-- On type_path shift to state 124
-- On type_no_bounds shift to state 731
-- On tuple_type shift to state 126
-- On trait_bound shift to state 127
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On impl_trait_type_one_bound shift to state 155
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 731:
## Known stack suffix:
## STAR CONST type_no_bounds
## LR(1) items:
raw_pointer_type -> STAR CONST type_no_bounds . [ XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR TRUE STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE RAW_STRING_LIT RAW_IDENT RAW_C_STRING RAW_BYTE_STRING QUESTION PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE INT_LIT IDENT GT GE FLOAT_LIT FATARROW FALSE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT C_STRING COMMA CHAR_LIT BYTE_STRING BYTE AS ANDEQ ANDAND AND
--   reduce production raw_pointer_type -> STAR CONST type_no_bounds

State 732:
## Known stack suffix:
## RARROW type_no_bounds
## LR(1) items:
expr_or_typ_block -> RARROW type_no_bounds . block_expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On LBRACE shift to state 8
-- On block_expression shift to state 733
## Reductions:

State 733:
## Known stack suffix:
## RARROW type_no_bounds block_expression
## LR(1) items:
expr_or_typ_block -> RARROW type_no_bounds block_expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production expr_or_typ_block -> RARROW type_no_bounds block_expression

State 734:
## Known stack suffix:
## OR option(closure_params) OR expr_or_typ_block
## LR(1) items:
closure_expression -> OR option(closure_params) OR expr_or_typ_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production closure_expression -> OR option(closure_params) OR expr_or_typ_block

State 735:
## Known stack suffix:
## RAW_CONST expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> RAW_CONST expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> RAW_CONST expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 736:
## Known stack suffix:
## RAW_MUT expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> RAW_MUT expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> RAW_MUT expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 737:
## Known stack suffix:
## RETURN option(expression)
## LR(1) items:
return_expression -> RETURN option(expression) . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production return_expression -> RETURN option(expression)

State 738:
## Known stack suffix:
## STAR expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> STAR expression . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI RPAREN RBRACK RBRACE QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK LBRACE GT GE FATARROW EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT COMMA AS ANDEQ ANDAND AND
--   reduce production operator_expression -> STAR expression
** Conflict on XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND

State 739:
## Known stack suffix:
## statements
## LR(1) items:
option(statements) -> statements . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production option(statements) -> statements

State 740:
## Known stack suffix:
## statement
## LR(1) items:
list(statement) -> statement . list(statement) [ WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On statement shift to state 740
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 741
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On list(statement) shift to state 742
-- On list(outer_attr) shift to state 743
-- On let_statement shift to state 816
-- On item shift to state 817
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 818
-- On exprs_with_block shift to state 820
-- On expression_statement shift to state 823
-- On expression shift to state 485
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On USE UNSAFE MOD LET EXTERN
--   reduce production list(outer_attr) ->
-- On WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production list(statement) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT

State 741:
## Known stack suffix:
## outer_attr
## LR(1) items:
list(outer_attr) -> outer_attr . list(outer_attr) [ USE UNSAFE MOD LET EXTERN ]
nonempty_list(outer_attr) -> outer_attr . [ WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
nonempty_list(outer_attr) -> outer_attr . nonempty_list(outer_attr) [ WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On POUND shift to state 1
-- On outer_attr shift to state 741
-- On nonempty_list(outer_attr) shift to state 463
-- On list(outer_attr) shift to state 43
## Reductions:
-- On USE UNSAFE MOD LET EXTERN
--   reduce production list(outer_attr) ->
-- On WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production nonempty_list(outer_attr) -> outer_attr
** Conflict on UNSAFE POUND

State 742:
## Known stack suffix:
## statement list(statement)
## LR(1) items:
list(statement) -> statement list(statement) . [ WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production list(statement) -> statement list(statement)

State 743:
## Known stack suffix:
## list(outer_attr)
## LR(1) items:
item -> list(outer_attr) . vis_item [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
let_statement -> list(outer_attr) . LET pattern_no_top_alt COLON typ option(let_expr) SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On USE shift to state 744
-- On UNSAFE shift to state 770
-- On MOD shift to state 777
-- On LET shift to state 803
-- On EXTERN shift to state 786
-- On vis_item shift to state 796
-- On use_declaration shift to state 797
-- On unsafe_module shift to state 798
-- On safe_module shift to state 799
-- On extern_crate shift to state 800
## Reductions:

State 744:
## Known stack suffix:
## USE
## LR(1) items:
use_declaration -> USE . use_tree SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On SUPER shift to state 16
-- On SELFVALUE shift to state 17
-- On RAW_IDENT shift to state 18
-- On PATHSEP shift to state 745
-- On IDENT shift to state 19
-- On DOLLAR_CRATE shift to state 20
-- On CRATE shift to state 21
-- On use_tree shift to state 750
-- On simple_path_special shift to state 752
-- On simple_path_segment shift to state 746
-- On simple_path shift to state 759
-- On option(PATHSEP) shift to state 15
-- On nonempty_list(terminated(simple_path_segment,PATHSEP)) shift to state 766
-- On ident shift to state 25
## Reductions:
-- On SUPER SELFVALUE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On STAR LBRACE
--   reduce production simple_path_special ->
** Conflict on SUPER SELFVALUE RAW_IDENT IDENT DOLLAR_CRATE CRATE

State 745:
## Known stack suffix:
## PATHSEP
## LR(1) items:
option(PATHSEP) -> PATHSEP . [ SUPER SELFVALUE RAW_IDENT IDENT DOLLAR_CRATE CRATE ]
simple_path_special -> PATHSEP . nonempty_list(terminated(simple_path_segment,PATHSEP)) [ STAR LBRACE ]
## Transitions:
-- On SUPER shift to state 16
-- On SELFVALUE shift to state 17
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On DOLLAR_CRATE shift to state 20
-- On CRATE shift to state 21
-- On simple_path_segment shift to state 746
-- On nonempty_list(terminated(simple_path_segment,PATHSEP)) shift to state 749
-- On ident shift to state 25
## Reductions:
-- On SUPER SELFVALUE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) -> PATHSEP
** Conflict on SUPER SELFVALUE RAW_IDENT IDENT DOLLAR_CRATE CRATE

State 746:
## Known stack suffix:
## simple_path_segment
## LR(1) items:
nonempty_list(terminated(simple_path_segment,PATHSEP)) -> simple_path_segment . PATHSEP [ STAR LBRACE ]
nonempty_list(terminated(simple_path_segment,PATHSEP)) -> simple_path_segment . PATHSEP nonempty_list(terminated(simple_path_segment,PATHSEP)) [ STAR LBRACE ]
## Transitions:
-- On PATHSEP shift to state 747
## Reductions:

State 747:
## Known stack suffix:
## simple_path_segment PATHSEP
## LR(1) items:
nonempty_list(terminated(simple_path_segment,PATHSEP)) -> simple_path_segment PATHSEP . [ STAR LBRACE ]
nonempty_list(terminated(simple_path_segment,PATHSEP)) -> simple_path_segment PATHSEP . nonempty_list(terminated(simple_path_segment,PATHSEP)) [ STAR LBRACE ]
## Transitions:
-- On SUPER shift to state 16
-- On SELFVALUE shift to state 17
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On DOLLAR_CRATE shift to state 20
-- On CRATE shift to state 21
-- On simple_path_segment shift to state 746
-- On nonempty_list(terminated(simple_path_segment,PATHSEP)) shift to state 748
-- On ident shift to state 25
## Reductions:
-- On STAR LBRACE
--   reduce production nonempty_list(terminated(simple_path_segment,PATHSEP)) -> simple_path_segment PATHSEP

State 748:
## Known stack suffix:
## simple_path_segment PATHSEP nonempty_list(terminated(simple_path_segment,PATHSEP))
## LR(1) items:
nonempty_list(terminated(simple_path_segment,PATHSEP)) -> simple_path_segment PATHSEP nonempty_list(terminated(simple_path_segment,PATHSEP)) . [ STAR LBRACE ]
## Transitions:
## Reductions:
-- On STAR LBRACE
--   reduce production nonempty_list(terminated(simple_path_segment,PATHSEP)) -> simple_path_segment PATHSEP nonempty_list(terminated(simple_path_segment,PATHSEP))

State 749:
## Known stack suffix:
## PATHSEP nonempty_list(terminated(simple_path_segment,PATHSEP))
## LR(1) items:
simple_path_special -> PATHSEP nonempty_list(terminated(simple_path_segment,PATHSEP)) . [ STAR LBRACE ]
## Transitions:
## Reductions:
-- On STAR LBRACE
--   reduce production simple_path_special -> PATHSEP nonempty_list(terminated(simple_path_segment,PATHSEP))

State 750:
## Known stack suffix:
## USE use_tree
## LR(1) items:
use_declaration -> USE use_tree . SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On SEMI shift to state 751
## Reductions:

State 751:
## Known stack suffix:
## USE use_tree SEMI
## LR(1) items:
use_declaration -> USE use_tree SEMI . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production use_declaration -> USE use_tree SEMI

State 752:
## Known stack suffix:
## simple_path_special
## LR(1) items:
use_tree -> simple_path_special . STAR [ SEMI RBRACE COMMA ]
use_tree -> simple_path_special . LBRACE use_trees RBRACE [ SEMI RBRACE COMMA ]
## Transitions:
-- On STAR shift to state 753
-- On LBRACE shift to state 754
## Reductions:

State 753:
## Known stack suffix:
## simple_path_special STAR
## LR(1) items:
use_tree -> simple_path_special STAR . [ SEMI RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMI RBRACE COMMA
--   reduce production use_tree -> simple_path_special STAR

State 754:
## Known stack suffix:
## simple_path_special LBRACE
## LR(1) items:
use_tree -> simple_path_special LBRACE . use_trees RBRACE [ SEMI RBRACE COMMA ]
## Transitions:
-- On SUPER shift to state 16
-- On SELFVALUE shift to state 17
-- On RAW_IDENT shift to state 18
-- On PATHSEP shift to state 745
-- On IDENT shift to state 19
-- On DOLLAR_CRATE shift to state 20
-- On CRATE shift to state 21
-- On use_trees shift to state 755
-- On use_tree shift to state 757
-- On simple_path_special shift to state 752
-- On simple_path_segment shift to state 746
-- On simple_path shift to state 759
-- On separated_nonempty_list(COMMA,use_tree) shift to state 767
-- On option(PATHSEP) shift to state 15
-- On nonempty_separated_or_terminated_list(COMMA,use_tree) shift to state 768
-- On nonempty_list(terminated(use_tree,COMMA)) shift to state 769
-- On nonempty_list(terminated(simple_path_segment,PATHSEP)) shift to state 766
-- On ident shift to state 25
## Reductions:
-- On SUPER SELFVALUE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On STAR LBRACE
--   reduce production simple_path_special ->
** Conflict on SUPER SELFVALUE RAW_IDENT IDENT DOLLAR_CRATE CRATE

State 755:
## Known stack suffix:
## simple_path_special LBRACE use_trees
## LR(1) items:
use_tree -> simple_path_special LBRACE use_trees . RBRACE [ SEMI RBRACE COMMA ]
## Transitions:
-- On RBRACE shift to state 756
## Reductions:

State 756:
## Known stack suffix:
## simple_path_special LBRACE use_trees RBRACE
## LR(1) items:
use_tree -> simple_path_special LBRACE use_trees RBRACE . [ SEMI RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMI RBRACE COMMA
--   reduce production use_tree -> simple_path_special LBRACE use_trees RBRACE

State 757:
## Known stack suffix:
## use_tree
## LR(1) items:
nonempty_list(terminated(use_tree,COMMA)) -> use_tree . COMMA [ RBRACE ]
nonempty_list(terminated(use_tree,COMMA)) -> use_tree . COMMA nonempty_list(terminated(use_tree,COMMA)) [ RBRACE ]
separated_nonempty_list(COMMA,use_tree) -> use_tree . [ RBRACE ]
separated_nonempty_list(COMMA,use_tree) -> use_tree . COMMA separated_nonempty_list(COMMA,use_tree) [ RBRACE ]
## Transitions:
-- On COMMA shift to state 758
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(COMMA,use_tree) -> use_tree

State 758:
## Known stack suffix:
## use_tree COMMA
## LR(1) items:
nonempty_list(terminated(use_tree,COMMA)) -> use_tree COMMA . [ RBRACE ]
nonempty_list(terminated(use_tree,COMMA)) -> use_tree COMMA . nonempty_list(terminated(use_tree,COMMA)) [ RBRACE ]
separated_nonempty_list(COMMA,use_tree) -> use_tree COMMA . separated_nonempty_list(COMMA,use_tree) [ RBRACE ]
## Transitions:
-- On SUPER shift to state 16
-- On SELFVALUE shift to state 17
-- On RAW_IDENT shift to state 18
-- On PATHSEP shift to state 745
-- On IDENT shift to state 19
-- On DOLLAR_CRATE shift to state 20
-- On CRATE shift to state 21
-- On use_tree shift to state 757
-- On simple_path_special shift to state 752
-- On simple_path_segment shift to state 746
-- On simple_path shift to state 759
-- On separated_nonempty_list(COMMA,use_tree) shift to state 764
-- On option(PATHSEP) shift to state 15
-- On nonempty_list(terminated(use_tree,COMMA)) shift to state 765
-- On nonempty_list(terminated(simple_path_segment,PATHSEP)) shift to state 766
-- On ident shift to state 25
## Reductions:
-- On RBRACE
--   reduce production nonempty_list(terminated(use_tree,COMMA)) -> use_tree COMMA
-- On SUPER SELFVALUE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On STAR LBRACE
--   reduce production simple_path_special ->
** Conflict on SUPER SELFVALUE RAW_IDENT IDENT DOLLAR_CRATE CRATE

State 759:
## Known stack suffix:
## simple_path
## LR(1) items:
use_tree -> simple_path . as_id_or_underscore [ SEMI RBRACE COMMA ]
## Transitions:
-- On AS shift to state 760
-- On as_id_or_underscore shift to state 763
## Reductions:
-- On SEMI RBRACE COMMA
--   reduce production as_id_or_underscore ->

State 760:
## Known stack suffix:
## AS
## LR(1) items:
as_id_or_underscore -> AS . ident [ SEMI RBRACE COMMA ]
as_id_or_underscore -> AS . UNDERSCORE [ SEMI RBRACE COMMA ]
## Transitions:
-- On UNDERSCORE shift to state 761
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On ident shift to state 762
## Reductions:

State 761:
## Known stack suffix:
## AS UNDERSCORE
## LR(1) items:
as_id_or_underscore -> AS UNDERSCORE . [ SEMI RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMI RBRACE COMMA
--   reduce production as_id_or_underscore -> AS UNDERSCORE

State 762:
## Known stack suffix:
## AS ident
## LR(1) items:
as_id_or_underscore -> AS ident . [ SEMI RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMI RBRACE COMMA
--   reduce production as_id_or_underscore -> AS ident

State 763:
## Known stack suffix:
## simple_path as_id_or_underscore
## LR(1) items:
use_tree -> simple_path as_id_or_underscore . [ SEMI RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMI RBRACE COMMA
--   reduce production use_tree -> simple_path as_id_or_underscore

State 764:
## Known stack suffix:
## use_tree COMMA separated_nonempty_list(COMMA,use_tree)
## LR(1) items:
separated_nonempty_list(COMMA,use_tree) -> use_tree COMMA separated_nonempty_list(COMMA,use_tree) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(COMMA,use_tree) -> use_tree COMMA separated_nonempty_list(COMMA,use_tree)

State 765:
## Known stack suffix:
## use_tree COMMA nonempty_list(terminated(use_tree,COMMA))
## LR(1) items:
nonempty_list(terminated(use_tree,COMMA)) -> use_tree COMMA nonempty_list(terminated(use_tree,COMMA)) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production nonempty_list(terminated(use_tree,COMMA)) -> use_tree COMMA nonempty_list(terminated(use_tree,COMMA))

State 766:
## Known stack suffix:
## nonempty_list(terminated(simple_path_segment,PATHSEP))
## LR(1) items:
simple_path_special -> nonempty_list(terminated(simple_path_segment,PATHSEP)) . [ STAR LBRACE ]
## Transitions:
## Reductions:
-- On STAR LBRACE
--   reduce production simple_path_special -> nonempty_list(terminated(simple_path_segment,PATHSEP))

State 767:
## Known stack suffix:
## separated_nonempty_list(COMMA,use_tree)
## LR(1) items:
nonempty_separated_or_terminated_list(COMMA,use_tree) -> separated_nonempty_list(COMMA,use_tree) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production nonempty_separated_or_terminated_list(COMMA,use_tree) -> separated_nonempty_list(COMMA,use_tree)

State 768:
## Known stack suffix:
## nonempty_separated_or_terminated_list(COMMA,use_tree)
## LR(1) items:
use_trees -> nonempty_separated_or_terminated_list(COMMA,use_tree) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production use_trees -> nonempty_separated_or_terminated_list(COMMA,use_tree)

State 769:
## Known stack suffix:
## nonempty_list(terminated(use_tree,COMMA))
## LR(1) items:
nonempty_separated_or_terminated_list(COMMA,use_tree) -> nonempty_list(terminated(use_tree,COMMA)) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production nonempty_separated_or_terminated_list(COMMA,use_tree) -> nonempty_list(terminated(use_tree,COMMA))

State 770:
## Known stack suffix:
## UNSAFE
## LR(1) items:
unsafe_module -> UNSAFE . MOD ident SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
unsafe_module -> UNSAFE . MOD ident LBRACE list(inner_attr) items RBRACE [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On MOD shift to state 771
## Reductions:

State 771:
## Known stack suffix:
## UNSAFE MOD
## LR(1) items:
unsafe_module -> UNSAFE MOD . ident SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
unsafe_module -> UNSAFE MOD . ident LBRACE list(inner_attr) items RBRACE [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On ident shift to state 772
## Reductions:

State 772:
## Known stack suffix:
## UNSAFE MOD ident
## LR(1) items:
unsafe_module -> UNSAFE MOD ident . SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
unsafe_module -> UNSAFE MOD ident . LBRACE list(inner_attr) items RBRACE [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On SEMI shift to state 773
-- On LBRACE shift to state 774
## Reductions:

State 773:
## Known stack suffix:
## UNSAFE MOD ident SEMI
## LR(1) items:
unsafe_module -> UNSAFE MOD ident SEMI . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production unsafe_module -> UNSAFE MOD ident SEMI

State 774:
## Known stack suffix:
## UNSAFE MOD ident LBRACE
## LR(1) items:
unsafe_module -> UNSAFE MOD ident LBRACE . list(inner_attr) items RBRACE [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On POUND shift to state 9
-- On list(inner_attr) shift to state 775
-- On inner_attr shift to state 703
## Reductions:
-- On USE UNSAFE RBRACE POUND MOD EXTERN
--   reduce production list(inner_attr) ->
** Conflict on POUND

State 775:
## Known stack suffix:
## UNSAFE MOD ident LBRACE list(inner_attr)
## LR(1) items:
unsafe_module -> UNSAFE MOD ident LBRACE list(inner_attr) . items RBRACE [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On POUND shift to state 1
-- On outer_attr shift to state 42
-- On list(outer_attr) shift to state 776
-- On items shift to state 801
-- On item shift to state 784
## Reductions:
-- On RBRACE
--   reduce production items ->
-- On USE UNSAFE MOD EXTERN
--   reduce production list(outer_attr) ->

State 776:
## Known stack suffix:
## list(outer_attr)
## LR(1) items:
item -> list(outer_attr) . vis_item [ USE UNSAFE RBRACE POUND MOD EXTERN EOF ]
## Transitions:
-- On USE shift to state 744
-- On UNSAFE shift to state 770
-- On MOD shift to state 777
-- On EXTERN shift to state 786
-- On vis_item shift to state 796
-- On use_declaration shift to state 797
-- On unsafe_module shift to state 798
-- On safe_module shift to state 799
-- On extern_crate shift to state 800
## Reductions:

State 777:
## Known stack suffix:
## MOD
## LR(1) items:
safe_module -> MOD . ident SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
safe_module -> MOD . ident LBRACE list(inner_attr) items RBRACE [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On ident shift to state 778
## Reductions:

State 778:
## Known stack suffix:
## MOD ident
## LR(1) items:
safe_module -> MOD ident . SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
safe_module -> MOD ident . LBRACE list(inner_attr) items RBRACE [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On SEMI shift to state 779
-- On LBRACE shift to state 780
## Reductions:

State 779:
## Known stack suffix:
## MOD ident SEMI
## LR(1) items:
safe_module -> MOD ident SEMI . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production safe_module -> MOD ident SEMI

State 780:
## Known stack suffix:
## MOD ident LBRACE
## LR(1) items:
safe_module -> MOD ident LBRACE . list(inner_attr) items RBRACE [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On POUND shift to state 9
-- On list(inner_attr) shift to state 781
-- On inner_attr shift to state 703
## Reductions:
-- On USE UNSAFE RBRACE POUND MOD EXTERN
--   reduce production list(inner_attr) ->
** Conflict on POUND

State 781:
## Known stack suffix:
## MOD ident LBRACE list(inner_attr)
## LR(1) items:
safe_module -> MOD ident LBRACE list(inner_attr) . items RBRACE [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On POUND shift to state 1
-- On outer_attr shift to state 42
-- On list(outer_attr) shift to state 776
-- On items shift to state 782
-- On item shift to state 784
## Reductions:
-- On RBRACE
--   reduce production items ->
-- On USE UNSAFE MOD EXTERN
--   reduce production list(outer_attr) ->

State 782:
## Known stack suffix:
## MOD ident LBRACE list(inner_attr) items
## LR(1) items:
safe_module -> MOD ident LBRACE list(inner_attr) items . RBRACE [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On RBRACE shift to state 783
## Reductions:

State 783:
## Known stack suffix:
## MOD ident LBRACE list(inner_attr) items RBRACE
## LR(1) items:
safe_module -> MOD ident LBRACE list(inner_attr) items RBRACE . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production safe_module -> MOD ident LBRACE list(inner_attr) items RBRACE

State 784:
## Known stack suffix:
## item
## LR(1) items:
items -> item . items [ RBRACE EOF ]
## Transitions:
-- On POUND shift to state 1
-- On outer_attr shift to state 42
-- On list(outer_attr) shift to state 776
-- On items shift to state 785
-- On item shift to state 784
## Reductions:
-- On RBRACE EOF
--   reduce production items ->
-- On USE UNSAFE MOD EXTERN
--   reduce production list(outer_attr) ->

State 785:
## Known stack suffix:
## item items
## LR(1) items:
items -> item items . [ RBRACE EOF ]
## Transitions:
## Reductions:
-- On RBRACE EOF
--   reduce production items -> item items

State 786:
## Known stack suffix:
## EXTERN
## LR(1) items:
extern_crate -> EXTERN . CRATE crate_ref as_clause SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On CRATE shift to state 787
## Reductions:

State 787:
## Known stack suffix:
## EXTERN CRATE
## LR(1) items:
extern_crate -> EXTERN CRATE . crate_ref as_clause SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On SELFVALUE shift to state 788
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On ident shift to state 789
-- On crate_ref shift to state 790
## Reductions:

State 788:
## Known stack suffix:
## SELFVALUE
## LR(1) items:
crate_ref -> SELFVALUE . [ SEMI AS ]
## Transitions:
## Reductions:
-- On SEMI AS
--   reduce production crate_ref -> SELFVALUE

State 789:
## Known stack suffix:
## ident
## LR(1) items:
crate_ref -> ident . [ SEMI AS ]
## Transitions:
## Reductions:
-- On SEMI AS
--   reduce production crate_ref -> ident

State 790:
## Known stack suffix:
## EXTERN CRATE crate_ref
## LR(1) items:
extern_crate -> EXTERN CRATE crate_ref . as_clause SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On AS shift to state 791
-- On as_clause shift to state 794
## Reductions:
-- On SEMI
--   reduce production as_clause ->

State 791:
## Known stack suffix:
## AS
## LR(1) items:
as_clause -> AS . ident [ SEMI ]
as_clause -> AS . UNDERSCORE [ SEMI ]
## Transitions:
-- On UNDERSCORE shift to state 792
-- On RAW_IDENT shift to state 18
-- On IDENT shift to state 19
-- On ident shift to state 793
## Reductions:

State 792:
## Known stack suffix:
## AS UNDERSCORE
## LR(1) items:
as_clause -> AS UNDERSCORE . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI
--   reduce production as_clause -> AS UNDERSCORE

State 793:
## Known stack suffix:
## AS ident
## LR(1) items:
as_clause -> AS ident . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI
--   reduce production as_clause -> AS ident

State 794:
## Known stack suffix:
## EXTERN CRATE crate_ref as_clause
## LR(1) items:
extern_crate -> EXTERN CRATE crate_ref as_clause . SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On SEMI shift to state 795
## Reductions:

State 795:
## Known stack suffix:
## EXTERN CRATE crate_ref as_clause SEMI
## LR(1) items:
extern_crate -> EXTERN CRATE crate_ref as_clause SEMI . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production extern_crate -> EXTERN CRATE crate_ref as_clause SEMI

State 796:
## Known stack suffix:
## list(outer_attr) vis_item
## LR(1) items:
item -> list(outer_attr) vis_item . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production item -> list(outer_attr) vis_item

State 797:
## Known stack suffix:
## use_declaration
## LR(1) items:
vis_item -> use_declaration . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production vis_item -> use_declaration

State 798:
## Known stack suffix:
## unsafe_module
## LR(1) items:
vis_item -> unsafe_module . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production vis_item -> unsafe_module

State 799:
## Known stack suffix:
## safe_module
## LR(1) items:
unsafe_module -> safe_module . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production unsafe_module -> safe_module

State 800:
## Known stack suffix:
## extern_crate
## LR(1) items:
vis_item -> extern_crate . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production vis_item -> extern_crate

State 801:
## Known stack suffix:
## UNSAFE MOD ident LBRACE list(inner_attr) items
## LR(1) items:
unsafe_module -> UNSAFE MOD ident LBRACE list(inner_attr) items . RBRACE [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On RBRACE shift to state 802
## Reductions:

State 802:
## Known stack suffix:
## UNSAFE MOD ident LBRACE list(inner_attr) items RBRACE
## LR(1) items:
unsafe_module -> UNSAFE MOD ident LBRACE list(inner_attr) items RBRACE . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN EOF DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production unsafe_module -> UNSAFE MOD ident LBRACE list(inner_attr) items RBRACE

State 803:
## Known stack suffix:
## list(outer_attr) LET
## LR(1) items:
let_statement -> list(outer_attr) LET . pattern_no_top_alt COLON typ option(let_expr) SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On UNDERSCORE shift to state 290
-- On TRUE shift to state 291
-- On STRING_LIT shift to state 292
-- On REF shift to state 293
-- On RAW_STRING_LIT shift to state 297
-- On RAW_IDENT shift to state 18
-- On RAW_C_STRING shift to state 298
-- On RAW_BYTE_STRING shift to state 299
-- On PATHSEP shift to state 4
-- On MUT shift to state 300
-- On MINUS shift to state 304
-- On LT shift to state 52
-- On LPAREN shift to state 307
-- On LBRACK shift to state 319
-- On INT_LIT shift to state 324
-- On IDENT shift to state 19
-- On FLOAT_LIT shift to state 325
-- On FALSE shift to state 326
-- On DOTDOTEQ shift to state 327
-- On DOTDOT shift to state 347
-- On C_STRING shift to state 348
-- On CHAR_LIT shift to state 349
-- On BYTE_STRING shift to state 350
-- On BYTE shift to state 330
-- On ANDAND shift to state 351
-- On AND shift to state 355
-- On tuple_struct_pattern shift to state 357
-- On tuple_pattern shift to state 358
-- On struct_pattern shift to state 359
-- On range_to_inclusive_pattern shift to state 414
-- On range_pattern_bound shift to state 415
-- On range_pattern shift to state 421
-- On range_inclusive_pattern shift to state 422
-- On range_from_pattern shift to state 423
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On pattern_no_top_alt shift to state 804
-- On path_in_expression shift to state 360
-- On path_expression shift to state 425
-- On option(PATHSEP) shift to state 345
-- On obsolete_range_pattern shift to state 426
-- On no_range_pattern shift to state 427
-- On neg shift to state 402
-- On literal_pattern shift to state 405
-- On identifier_pattern shift to state 406
-- On ident shift to state 410
## Reductions:
-- On INT_LIT FLOAT_LIT
--   reduce production neg ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
** Conflict on RAW_IDENT INT_LIT IDENT FLOAT_LIT

State 804:
## Known stack suffix:
## list(outer_attr) LET pattern_no_top_alt
## LR(1) items:
let_statement -> list(outer_attr) LET pattern_no_top_alt . COLON typ option(let_expr) SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On COLON shift to state 805
## Reductions:

State 805:
## Known stack suffix:
## list(outer_attr) LET pattern_no_top_alt COLON
## LR(1) items:
let_statement -> list(outer_attr) LET pattern_no_top_alt COLON . typ option(let_expr) SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On USE shift to state 53
-- On UNDERSCORE shift to state 47
-- On STATIC_LIFETIME shift to state 55
-- On STAR shift to state 48
-- On QUESTION shift to state 50
-- On PATHSEP shift to state 4
-- On NOT shift to state 51
-- On LT shift to state 52
-- On LPAREN shift to state 71
-- On LIFETIME_OR_LABEL shift to state 57
-- On LBRACK shift to state 72
-- On IMPL shift to state 73
-- On FOR shift to state 75
-- On ELIDED_LIFETIME shift to state 59
-- On DYN shift to state 84
-- On AND shift to state 116
-- On use_bound shift to state 85
-- On type_path shift to state 124
-- On type_param_bounds shift to state 171
-- On type_param_bound shift to state 87
-- On type_no_bounds shift to state 172
-- On typ shift to state 806
-- On tuple_type shift to state 126
-- On trait_object_type shift to state 174
-- On trait_bound shift to state 175
-- On separated_nonempty_list(PLUS,type_param_bound) shift to state 176
-- On reference_type shift to state 128
-- On raw_pointer_type shift to state 129
-- On qualified_path_type shift to state 130
-- On qualified_path_in_type shift to state 133
-- On option(question_or_for) shift to state 91
-- On option(for_lifetimes) shift to state 134
-- On option(PATHSEP) shift to state 93
-- On nonempty_separated_or_terminated_list(PLUS,type_param_bound) shift to state 177
-- On nonempty_list(terminated(type_param_bound,PLUS)) shift to state 178
-- On lifetime shift to state 179
-- On impl_trait_type_one_bound shift to state 155
-- On impl_trait_type shift to state 180
-- On for_lifetimes shift to state 156
-- On bare_function_type shift to state 157
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On UNSAFE SAFE FN EXTERN
--   reduce production option(for_lifetimes) ->
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE
--   reduce production option(question_or_for) ->
** Conflict on SUPER SELFVALUE SELFTYPE RAW_IDENT PATHSEP IDENT DOLLAR_CRATE CRATE

State 806:
## Known stack suffix:
## list(outer_attr) LET pattern_no_top_alt COLON typ
## LR(1) items:
let_statement -> list(outer_attr) LET pattern_no_top_alt COLON typ . option(let_expr) SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On EQ shift to state 807
-- On option(let_expr) shift to state 813
-- On let_expr shift to state 815
## Reductions:
-- On SEMI
--   reduce production option(let_expr) ->

State 807:
## Known stack suffix:
## EQ
## LR(1) items:
let_expr -> EQ . expression option(else_expr) [ SEMI ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 487
-- On exprs_with_block shift to state 488
-- On expression shift to state 808
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
** Conflict on LBRACE

State 808:
## Known stack suffix:
## EQ expression
## LR(1) items:
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
let_expr -> EQ expression . option(else_expr) [ SEMI ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On ELSE shift to state 809
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
-- On option(else_expr) shift to state 811
-- On else_expr shift to state 812
## Reductions:
-- On SEMI
--   reduce production option(else_expr) ->

State 809:
## Known stack suffix:
## ELSE
## LR(1) items:
else_expr -> ELSE . block_expression [ SEMI ]
## Transitions:
-- On LBRACE shift to state 8
-- On block_expression shift to state 810
## Reductions:

State 810:
## Known stack suffix:
## ELSE block_expression
## LR(1) items:
else_expr -> ELSE block_expression . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI
--   reduce production else_expr -> ELSE block_expression

State 811:
## Known stack suffix:
## EQ expression option(else_expr)
## LR(1) items:
let_expr -> EQ expression option(else_expr) . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI
--   reduce production let_expr -> EQ expression option(else_expr)

State 812:
## Known stack suffix:
## else_expr
## LR(1) items:
option(else_expr) -> else_expr . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI
--   reduce production option(else_expr) -> else_expr

State 813:
## Known stack suffix:
## list(outer_attr) LET pattern_no_top_alt COLON typ option(let_expr)
## LR(1) items:
let_statement -> list(outer_attr) LET pattern_no_top_alt COLON typ option(let_expr) . SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On SEMI shift to state 814
## Reductions:

State 814:
## Known stack suffix:
## list(outer_attr) LET pattern_no_top_alt COLON typ option(let_expr) SEMI
## LR(1) items:
let_statement -> list(outer_attr) LET pattern_no_top_alt COLON typ option(let_expr) SEMI . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production let_statement -> list(outer_attr) LET pattern_no_top_alt COLON typ option(let_expr) SEMI

State 815:
## Known stack suffix:
## let_expr
## LR(1) items:
option(let_expr) -> let_expr . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI
--   reduce production option(let_expr) -> let_expr

State 816:
## Known stack suffix:
## let_statement
## LR(1) items:
statement -> let_statement . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production statement -> let_statement

State 817:
## Known stack suffix:
## item
## LR(1) items:
statement -> item . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production statement -> item

State 818:
## Known stack suffix:
## exprs_without_block
## LR(1) items:
expression -> exprs_without_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
expression_statement -> exprs_without_block . SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On SEMI shift to state 819
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND
--   reduce production expression -> exprs_without_block

State 819:
## Known stack suffix:
## exprs_without_block SEMI
## LR(1) items:
expression_statement -> exprs_without_block SEMI . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production expression_statement -> exprs_without_block SEMI

State 820:
## Known stack suffix:
## exprs_with_block
## LR(1) items:
expression -> exprs_with_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
expression_statement -> exprs_with_block . option(SEMI) [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
-- On SEMI shift to state 821
-- On option(SEMI) shift to state 822
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND
--   reduce production expression -> exprs_with_block
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production option(SEMI) ->
** Conflict on STAR OR MINUS LT LPAREN LBRACK DOTDOTEQ DOTDOT AND

State 821:
## Known stack suffix:
## SEMI
## LR(1) items:
option(SEMI) -> SEMI . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production option(SEMI) -> SEMI

State 822:
## Known stack suffix:
## exprs_with_block option(SEMI)
## LR(1) items:
expression_statement -> exprs_with_block option(SEMI) . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production expression_statement -> exprs_with_block option(SEMI)

State 823:
## Known stack suffix:
## expression_statement
## LR(1) items:
statement -> expression_statement . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT
--   reduce production statement -> expression_statement

State 824:
## Known stack suffix:
## LBRACE list(inner_attr) option(statements)
## LR(1) items:
block_expression -> LBRACE list(inner_attr) option(statements) . RBRACE [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
-- On RBRACE shift to state 825
## Reductions:

State 825:
## Known stack suffix:
## LBRACE list(inner_attr) option(statements) RBRACE
## LR(1) items:
block_expression -> LBRACE list(inner_attr) option(statements) RBRACE . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production block_expression -> LBRACE list(inner_attr) option(statements) RBRACE

State 826:
## Known stack suffix:
## list(statement)
## LR(1) items:
statements -> list(statement) . [ RBRACE ]
statements -> list(statement) . exprs_without_block [ RBRACE ]
## Transitions:
-- On UNSAFE shift to state 7
-- On UNDERSCORE shift to state 30
-- On TRUE shift to state 31
-- On STRING_LIT shift to state 32
-- On STAR shift to state 33
-- On RETURN shift to state 34
-- On RAW_STRING_LIT shift to state 35
-- On RAW_MUT shift to state 36
-- On RAW_C_STRING shift to state 37
-- On RAW_CONST shift to state 38
-- On RAW_BYTE_STRING shift to state 39
-- On POUND shift to state 1
-- On PATHSEP shift to state 4
-- On OR shift to state 40
-- On NOT shift to state 276
-- On MOVE shift to state 277
-- On MINUS shift to state 281
-- On MATCH shift to state 282
-- On LT shift to state 52
-- On LPAREN shift to state 283
-- On LIFETIME_OR_LABEL shift to state 284
-- On LBRACK shift to state 286
-- On LBRACE shift to state 8
-- On INT_LIT shift to state 108
-- On IF shift to state 287
-- On FLOAT_LIT shift to state 109
-- On FALSE shift to state 110
-- On DOTDOTEQ shift to state 437
-- On DOTDOT shift to state 438
-- On C_STRING shift to state 111
-- On CONTINUE shift to state 439
-- On CONST shift to state 442
-- On CHAR_LIT shift to state 112
-- On BYTE_STRING shift to state 113
-- On BYTE shift to state 114
-- On BREAK shift to state 444
-- On ASYNC shift to state 446
-- On AND shift to state 450
-- On AMPMUT shift to state 451
-- On unsafe_block_expression shift to state 452
-- On tuple_indexing_expression shift to state 453
-- On tuple_expression shift to state 454
-- On struct_expression shift to state 455
-- On return_expression shift to state 456
-- On range_expression shift to state 457
-- On qualified_path_type shift to state 332
-- On qualified_path_in_expression shift to state 342
-- On path_in_expression shift to state 458
-- On path_expression shift to state 461
-- On outer_attr shift to state 462
-- On option(loop_label) shift to state 464
-- On option(PATHSEP) shift to state 345
-- On operator_expression shift to state 471
-- On nonempty_list(outer_attr) shift to state 472
-- On method_call_expression shift to state 473
-- On match_expression shift to state 474
-- On loop_label shift to state 475
-- On loop_expression shift to state 476
-- On literal_expression shift to state 477
-- On index_expression shift to state 478
-- On if_let_expression shift to state 479
-- On if_expression shift to state 480
-- On grouped_expression shift to state 481
-- On field_expression shift to state 482
-- On exprs_without_block shift to state 827
-- On exprs_with_block shift to state 488
-- On expression shift to state 485
-- On continue_expression shift to state 555
-- On const_block_expression shift to state 556
-- On closure_expression shift to state 557
-- On call_expression shift to state 560
-- On break_expression shift to state 561
-- On block_expression shift to state 562
-- On await_expression shift to state 563
-- On async_block_expression shift to state 564
-- On array_expression shift to state 565
## Reductions:
-- On SUPER SELFVALUE SELFTYPE RAW_IDENT IDENT DOLLAR_CRATE CRATE
--   reduce production option(PATHSEP) ->
-- On WHILE LOOP LBRACE FOR
--   reduce production option(loop_label) ->
-- On RBRACE
--   reduce production statements -> list(statement)
** Conflict on LBRACE

State 827:
## Known stack suffix:
## list(statement) exprs_without_block
## LR(1) items:
expression -> exprs_without_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
statements -> list(statement) exprs_without_block . [ RBRACE ]
## Transitions:
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND
--   reduce production expression -> exprs_without_block
-- On RBRACE
--   reduce production statements -> list(statement) exprs_without_block

State 828:
## Known stack suffix:
## exprs_without_block
## LR(1) items:
expression -> exprs_without_block . [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
expression_statement -> exprs_without_block . SEMI [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAR SELFVALUE SELFTYPE RETURN RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING POUND PATHSEP OR NOT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IF IDENT FOR FLOAT_LIT FALSE EXTERN DOTDOTEQ DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AND AMPMUT ]
statements -> exprs_without_block . [ RBRACE ]
## Transitions:
-- On SEMI shift to state 819
## Reductions:
-- On XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND
--   reduce production expression -> exprs_without_block
-- On RBRACE
--   reduce production statements -> exprs_without_block

State 829:
## Known stack suffix:
## UNSAFE block_expression
## LR(1) items:
unsafe_block_expression -> UNSAFE block_expression . [ XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On XOREQ XOR WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL SEMI SELFVALUE SELFTYPE RPAREN RETURN RBRACK RBRACE RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PLUSEQ PLUS PERCENT PATHSEP OROR OREQ OR NOT NE MOVE MOD MINUSEQ MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LE LBRACK LBRACE INT_LIT IF IDENT GT GE FOR FLOAT_LIT FATARROW FALSE EXTERN EQEQ EQ ELSE DOTDOTEQ DOTDOT DOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST COMMA CHAR_LIT BYTE_STRING BYTE BREAK ASYNC AS ANDEQ ANDAND AND AMPMUT
--   reduce production unsafe_block_expression -> UNSAFE block_expression

State 830:
## Known stack suffix:
## EQ expression
## LR(1) items:
attr_input -> EQ expression . [ RBRACK ]
await_expression -> expression . DOT AWAIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
call_expression -> expression . LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
field_expression -> expression . DOT ident [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
index_expression -> expression . LBRACK expression RBRACK [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
method_call_expression -> expression . DOT path_expr_segment LPAREN call_params RPAREN [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . QUESTION [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUS expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASH expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PERCENT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHL expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . NE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . LE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . GE expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDAND expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OROR expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . AS type_no_bounds [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . EQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . PLUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . MINUSEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . STAREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SLASHEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . ANDEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . OREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . XOREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHLEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
operator_expression -> expression . SHREQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
range_expression -> expression . DOTDOTEQ expression [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
tuple_indexing_expression -> expression . DOT INT_LIT [ XOREQ XOR STAREQ STAR SLASHEQ SLASH SHREQ SHR SHLEQ SHL RBRACK QUESTION PLUSEQ PLUS PERCENT OROR OREQ OR NE MINUSEQ MINUS LT LPAREN LE LBRACK GT GE EQEQ EQ DOTDOTEQ DOTDOT DOT AS ANDEQ ANDAND AND ]
## Transitions:
-- On XOREQ shift to state 486
-- On XOR shift to state 490
-- On STAREQ shift to state 492
-- On STAR shift to state 494
-- On SLASHEQ shift to state 496
-- On SLASH shift to state 498
-- On SHREQ shift to state 500
-- On SHR shift to state 502
-- On SHLEQ shift to state 504
-- On SHL shift to state 506
-- On QUESTION shift to state 508
-- On PLUSEQ shift to state 509
-- On PLUS shift to state 511
-- On PERCENT shift to state 513
-- On OROR shift to state 515
-- On OREQ shift to state 517
-- On OR shift to state 519
-- On NE shift to state 521
-- On MINUSEQ shift to state 523
-- On MINUS shift to state 525
-- On LT shift to state 527
-- On LPAREN shift to state 529
-- On LE shift to state 533
-- On LBRACK shift to state 535
-- On GT shift to state 538
-- On GE shift to state 540
-- On EQEQ shift to state 542
-- On EQ shift to state 544
-- On DOTDOTEQ shift to state 546
-- On DOTDOT shift to state 548
-- On DOT shift to state 550
-- On AS shift to state 567
-- On ANDEQ shift to state 569
-- On ANDAND shift to state 571
-- On AND shift to state 573
## Reductions:
-- On RBRACK
--   reduce production attr_input -> EQ expression

State 831:
## Known stack suffix:
## UNSAFE simple_path maybe_attr_input
## LR(1) items:
attr -> UNSAFE simple_path maybe_attr_input . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production attr -> UNSAFE simple_path maybe_attr_input

State 832:
## Known stack suffix:
## POUND LBRACK attr
## LR(1) items:
outer_attr -> POUND LBRACK attr . RBRACK [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STATIC_LIFETIME STAR SELFVALUE SELFTYPE SAFE RETURN REF RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PATHSEP OR NOT MUT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IMPL IF IDENT FOR FN FLOAT_LIT FALSE EXTERN ELIDED_LIFETIME DYN DOTDOTEQ DOTDOTDOT DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC ANDAND AND AMPMUT ]
## Transitions:
-- On RBRACK shift to state 833
## Reductions:

State 833:
## Known stack suffix:
## POUND LBRACK attr RBRACK
## LR(1) items:
outer_attr -> POUND LBRACK attr RBRACK . [ WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STATIC_LIFETIME STAR SELFVALUE SELFTYPE SAFE RETURN REF RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PATHSEP OR NOT MUT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IMPL IF IDENT FOR FN FLOAT_LIT FALSE EXTERN ELIDED_LIFETIME DYN DOTDOTEQ DOTDOTDOT DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC ANDAND AND AMPMUT ]
## Transitions:
## Reductions:
-- On WHILE USE UNSAFE UNDERSCORE TRUE SUPER STRING_LIT STATIC_LIFETIME STAR SELFVALUE SELFTYPE SAFE RETURN REF RAW_STRING_LIT RAW_MUT RAW_IDENT RAW_C_STRING RAW_CONST RAW_BYTE_STRING QUESTION POUND PATHSEP OR NOT MUT MOVE MOD MINUS MATCH LT LPAREN LOOP LIFETIME_OR_LABEL LET LBRACK LBRACE INT_LIT IMPL IF IDENT FOR FN FLOAT_LIT FALSE EXTERN ELIDED_LIFETIME DYN DOTDOTEQ DOTDOTDOT DOTDOT DOLLAR_CRATE C_STRING CRATE CONTINUE CONST CHAR_LIT BYTE_STRING BYTE BREAK ASYNC ANDAND AND AMPMUT
--   reduce production outer_attr -> POUND LBRACK attr RBRACK

State 834:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 835:
## Known stack suffix:
## items
## LR(1) items:
program -> items . EOF [ # ]
## Transitions:
-- On EOF shift to state 836
## Reductions:

State 836:
## Known stack suffix:
## items EOF
## LR(1) items:
program -> items EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> items EOF

